import "./chunk-3BSMAOTP.js";
import "./chunk-ELKJSBLM.js";
import "./chunk-DRMSVCOU.js";
import {
  SvelteSet
} from "./chunk-R573Y5SO.js";
import "./chunk-JB2VBDFR.js";
import "./chunk-7RQDXF5S.js";
import {
  action,
  add_locations,
  assign,
  bind_prop,
  bind_this,
  check_target,
  clsx,
  component,
  create_ownership_validator,
  derived,
  each,
  get as get2,
  hmr,
  if_block,
  index,
  init,
  legacy_api,
  onMount,
  prop,
  readable,
  set_attribute,
  set_class,
  set_style,
  setup_stores,
  snippet,
  store_get,
  store_mutate,
  store_set,
  validate_each_keys,
  validate_snippet_args,
  validate_store,
  wrap_snippet,
  writable
} from "./chunk-BEPHR3HK.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  from_html,
  set_text,
  text
} from "./chunk-RGUUASGC.js";
import {
  $window,
  FILENAME,
  HMR,
  add_svelte_meta,
  apply,
  child,
  delegate,
  effect,
  equals,
  event,
  first_child,
  get,
  getContext,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mutable_source,
  noop,
  pop,
  proxy,
  push,
  reset,
  set,
  setContext,
  sibling,
  state,
  strict_equals,
  tag,
  tag_proxy,
  template_effect,
  tick,
  to_array,
  untrack,
  user_derived,
  user_effect,
  user_pre_effect
} from "./chunk-5TWYXSRX.js";
import "./chunk-L3IDHH4W.js";
import "./chunk-K63UQA3V.js";
import "./chunk-3F74YA3Z.js";

// node_modules/@event-calendar/core/src/Calendar.svelte
import "/Users/iwonki/Desktop/project-manage/project-manage-app/node_modules/@event-calendar/core/dist/index.css";

// node_modules/@event-calendar/core/src/lib/a11y.js
function keyEnter(fn) {
  return function(e) {
    return e.key === "Enter" || e.key === " " && !e.preventDefault() ? fn.call(this, e) : void 0;
  };
}

// node_modules/@event-calendar/core/src/lib/actions.js
function setContent(node, content) {
  let actions = {
    update(content2) {
      if (typeof content2 == "string") {
        node.innerText = content2;
      } else if (content2 == null ? void 0 : content2.domNodes) {
        node.replaceChildren(...content2.domNodes);
      } else if (content2 == null ? void 0 : content2.html) {
        node.innerHTML = content2.html;
      }
    }
  };
  actions.update(content);
  return actions;
}
function outsideEvent(node, type) {
  const handlePointerDown = (jsEvent) => {
    if (node && !node.contains(jsEvent.target)) {
      node.dispatchEvent(
        new CustomEvent(type + "outside", { detail: { jsEvent } })
      );
    }
  };
  document.addEventListener(type, handlePointerDown, true);
  return {
    destroy() {
      document.removeEventListener(type, handlePointerDown, true);
    }
  };
}
function observeResize(node, callback) {
  let resizeObserver = new ResizeObserver((entries2) => {
    for (let entry of entries2) {
      callback(entry);
    }
  });
  resizeObserver.observe(node);
  return {
    destroy() {
      resizeObserver.unobserve(node);
    }
  };
}

// node_modules/@event-calendar/core/src/lib/date.js
var DAY_IN_SECONDS = 86400;
function createDate(input = void 0) {
  if (input !== void 0) {
    return input instanceof Date ? _fromLocalDate(input) : _fromISOString(input);
  }
  return _fromLocalDate(/* @__PURE__ */ new Date());
}
function createDuration(input) {
  if (typeof input === "number") {
    input = { seconds: input };
  } else if (typeof input === "string") {
    let seconds = 0, exp = 2;
    for (let part of input.split(":", 3)) {
      seconds += parseInt(part, 10) * Math.pow(60, exp--);
    }
    input = { seconds };
  } else if (input instanceof Date) {
    input = { hours: input.getUTCHours(), minutes: input.getUTCMinutes(), seconds: input.getUTCSeconds() };
  }
  let weeks = input.weeks || input.week || 0;
  return {
    years: input.years || input.year || 0,
    months: input.months || input.month || 0,
    days: weeks * 7 + (input.days || input.day || 0),
    seconds: (input.hours || input.hour || 0) * 60 * 60 + (input.minutes || input.minute || 0) * 60 + (input.seconds || input.second || 0),
    inWeeks: !!weeks
  };
}
function cloneDate(date) {
  return new Date(date.getTime());
}
function addDuration(date, duration, x = 1) {
  date.setUTCFullYear(date.getUTCFullYear() + x * duration.years);
  let month = date.getUTCMonth() + x * duration.months;
  date.setUTCMonth(month);
  month %= 12;
  if (month < 0) {
    month += 12;
  }
  while (date.getUTCMonth() !== month) {
    subtractDay(date);
  }
  date.setUTCDate(date.getUTCDate() + x * duration.days);
  date.setUTCSeconds(date.getUTCSeconds() + x * duration.seconds);
  return date;
}
function subtractDuration(date, duration, x = 1) {
  return addDuration(date, duration, -x);
}
function addDay(date, x = 1) {
  date.setUTCDate(date.getUTCDate() + x);
  return date;
}
function subtractDay(date, x = 1) {
  return addDay(date, -x);
}
function setMidnight(date) {
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function toLocalDate(date) {
  return new Date(
    date.getUTCFullYear(),
    date.getUTCMonth(),
    date.getUTCDate(),
    date.getUTCHours(),
    date.getUTCMinutes(),
    date.getUTCSeconds()
  );
}
function toISOString(date, len = 19) {
  return date.toISOString().substring(0, len);
}
function datesEqual(date1, ...dates2) {
  return dates2.every((date2) => date1.getTime() === date2.getTime());
}
function nextClosestDay(date, day) {
  let diff2 = day - date.getUTCDay();
  date.setUTCDate(date.getUTCDate() + (diff2 >= 0 ? diff2 : diff2 + 7));
  return date;
}
function prevClosestDay(date, day) {
  let diff2 = day - date.getUTCDay();
  date.setUTCDate(date.getUTCDate() + (diff2 <= 0 ? diff2 : diff2 - 7));
  return date;
}
function noTimePart(date) {
  return typeof date === "string" && date.length <= 10;
}
function copyTime(toDate, fromDate) {
  toDate.setUTCHours(fromDate.getUTCHours(), fromDate.getUTCMinutes(), fromDate.getUTCSeconds(), 0);
  return toDate;
}
function toSeconds(duration) {
  return duration.seconds;
}
function nextDate(date, duration) {
  addDuration(date, duration);
  return date;
}
function prevDate(date, duration, hiddenDays) {
  subtractDuration(date, duration);
  if (hiddenDays.length && hiddenDays.length < 7) {
    while (hiddenDays.includes(date.getUTCDay())) {
      subtractDay(date);
    }
  }
  return date;
}
function getWeekNumber(date, firstDay) {
  date = cloneDate(date);
  if (firstDay == 0) {
    date.setUTCDate(date.getUTCDate() + 6 - date.getUTCDay());
  } else {
    date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay() || 7));
  }
  let yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1));
  return Math.ceil(((date - yearStart) / 1e3 / DAY_IN_SECONDS + 1) / 7);
}
function _fromLocalDate(date) {
  return new Date(Date.UTC(
    date.getFullYear(),
    date.getMonth(),
    date.getDate(),
    date.getHours(),
    date.getMinutes(),
    date.getSeconds()
  ));
}
function _fromISOString(str) {
  const parts = str.match(/\d+/g);
  return new Date(Date.UTC(
    Number(parts[0]),
    Number(parts[1]) - 1,
    Number(parts[2]),
    Number(parts[3] || 0),
    Number(parts[4] || 0),
    Number(parts[5] || 0)
  ));
}

// node_modules/@event-calendar/core/src/lib/utils.js
function assign2(...args) {
  return Object.assign(...args);
}
function keys(object) {
  return Object.keys(object);
}
function entries(object) {
  return Object.entries(object);
}
function floor(value) {
  return Math.floor(value);
}
function ceil(value) {
  return Math.ceil(value);
}
function min(...args) {
  return Math.min(...args);
}
function max(...args) {
  return Math.max(...args);
}
function symbol() {
  return Symbol("ec");
}
function isArray(value) {
  return Array.isArray(value);
}
function isFunction(value) {
  return typeof value === "function";
}
function run(fn) {
  return fn();
}
function runAll(fns) {
  fns.forEach(run);
}
function noop2() {
}
var identity = (x) => x;
function stopPropagation(fn) {
  return function(event2) {
    event2.stopPropagation();
    if (fn) {
      fn.call(this, event2);
    }
  };
}

// node_modules/@event-calendar/core/src/lib/debounce.js
function debounce(fn, handle, queueStore) {
  queueStore.update((queue) => queue.set(handle, fn));
}
function flushDebounce(queue) {
  runAll(queue);
  queue.clear();
}
function task(fn, handle, tasks) {
  handle ?? (handle = fn);
  if (!tasks.has(handle)) {
    tasks.set(handle, setTimeout(() => {
      tasks.delete(handle);
      fn();
    }));
  }
}

// node_modules/@event-calendar/core/src/lib/payload.js
var payloadProp = symbol();
function setPayload(obj, payload) {
  obj[payloadProp] = payload;
}
function hasPayload(obj) {
  return !!(obj == null ? void 0 : obj[payloadProp]);
}
function getPayload(obj) {
  return obj[payloadProp];
}

// node_modules/@event-calendar/core/src/lib/dom.js
function createElement(tag2, className, content, attrs = []) {
  let el = document.createElement(tag2);
  el.className = className;
  if (typeof content == "string") {
    el.innerText = content;
  } else if (content.domNodes) {
    el.replaceChildren(...content.domNodes);
  } else if (content.html) {
    el.innerHTML = content.html;
  }
  for (let attr of attrs) {
    el.setAttribute(...attr);
  }
  return el;
}
function hasYScroll(el) {
  return el.scrollHeight > el.clientHeight;
}
function rect(el) {
  return el.getBoundingClientRect();
}
function ancestor(el, up) {
  while (up--) {
    el = el.parentElement;
  }
  return el;
}
function height(el) {
  return rect(el).height;
}
function getElementWithPayload(x, y, root29 = document, processed = []) {
  processed.push(root29);
  for (let el of root29.elementsFromPoint(x, y)) {
    if (hasPayload(el)) {
      return el;
    }
    if (el.shadowRoot && !processed.includes(el.shadowRoot)) {
      let shadowEl = getElementWithPayload(x, y, el.shadowRoot, processed);
      if (shadowEl) {
        return shadowEl;
      }
    }
  }
  return null;
}
function listen(node, event2, handler, options) {
  node.addEventListener(event2, handler, options);
  return () => node.removeEventListener(event2, handler, options);
}

// node_modules/@event-calendar/core/src/lib/view.js
function createView(view2, _viewTitle, _currentRange, _activeRange) {
  return {
    type: view2,
    title: _viewTitle,
    currentStart: _currentRange.start,
    currentEnd: _currentRange.end,
    activeStart: _activeRange.start,
    activeEnd: _activeRange.end,
    calendar: void 0
  };
}
function toViewWithLocalDates(view2) {
  view2 = assign2({}, view2);
  view2.currentStart = toLocalDate(view2.currentStart);
  view2.currentEnd = toLocalDate(view2.currentEnd);
  view2.activeStart = toLocalDate(view2.activeStart);
  view2.activeEnd = toLocalDate(view2.activeEnd);
  return view2;
}
function listView(view2) {
  return view2.startsWith("list");
}
function timelineView(view2) {
  return view2.includes("Timeline");
}

// node_modules/@event-calendar/core/src/lib/events.js
var eventId = 1;
function createEvents(input) {
  return input.map((event2) => {
    let result = {
      id: "id" in event2 ? String(event2.id) : `{generated-${eventId++}}`,
      resourceIds: toArrayProp(event2, "resourceId").map(String),
      allDay: event2.allDay ?? (noTimePart(event2.start) && noTimePart(event2.end)),
      start: createDate(event2.start),
      end: createDate(event2.end),
      title: event2.title ?? "",
      editable: event2.editable,
      startEditable: event2.startEditable,
      durationEditable: event2.durationEditable,
      display: event2.display ?? "auto",
      extendedProps: event2.extendedProps ?? {},
      backgroundColor: event2.backgroundColor ?? event2.color,
      textColor: event2.textColor,
      classNames: toArrayProp(event2, "className"),
      styles: toArrayProp(event2, "style")
    };
    if (result.allDay) {
      setMidnight(result.start);
      let end = cloneDate(result.end);
      setMidnight(result.end);
      if (!datesEqual(result.end, end) || datesEqual(result.end, result.start)) {
        addDay(result.end);
      }
    }
    return result;
  });
}
function toArrayProp(input, propName) {
  let result = input[propName + "s"] ?? input[propName] ?? [];
  return isArray(result) ? result : [result];
}
function createEventSources(input) {
  return input.map((source) => ({
    events: source.events,
    url: source.url && source.url.trimEnd("&") || "",
    method: source.method && source.method.toUpperCase() || "GET",
    extraParams: source.extraParams || {}
  }));
}
function createEventChunk(event2, start, end) {
  let chunk = {
    start: event2.start > start ? event2.start : start,
    end: event2.end < end ? event2.end : end,
    event: event2
  };
  chunk.zeroDuration = datesEqual(chunk.start, chunk.end);
  return chunk;
}
function sortEventChunks(chunks) {
  chunks.sort((a, b) => a.start - b.start || b.event.allDay - a.event.allDay);
}
function createEventContent(chunk, displayEventEnd, eventContent, theme, _intlEventTime, _view) {
  let timeText = _intlEventTime.formatRange(
    chunk.start,
    displayEventEnd && chunk.event.display !== "pointer" && !chunk.zeroDuration ? copyTime(cloneDate(chunk.start), chunk.end) : chunk.start
  );
  let content;
  if (eventContent) {
    content = isFunction(eventContent) ? eventContent({
      event: toEventWithLocalDates(chunk.event),
      timeText,
      view: toViewWithLocalDates(_view)
    }) : eventContent;
  }
  if (content === void 0) {
    let domNodes;
    switch (chunk.event.display) {
      case "background":
        domNodes = [];
        break;
      case "pointer":
        domNodes = [createTimeElement(timeText, chunk, theme)];
        break;
      default:
        domNodes = [
          ...chunk.event.allDay ? [] : [createTimeElement(timeText, chunk, theme)],
          createElement("h4", theme.eventTitle, chunk.event.title)
        ];
    }
    content = { domNodes };
  }
  return [timeText, content];
}
function createTimeElement(timeText, chunk, theme) {
  return createElement(
    "time",
    theme.eventTime,
    timeText,
    [["datetime", toISOString(chunk.start)]]
  );
}
function createEventClasses(eventClassNames, event2, _view) {
  let result = event2.classNames;
  if (eventClassNames) {
    if (isFunction(eventClassNames)) {
      eventClassNames = eventClassNames({
        event: toEventWithLocalDates(event2),
        view: toViewWithLocalDates(_view)
      });
    }
    result = [
      ...isArray(eventClassNames) ? eventClassNames : [eventClassNames],
      ...result
    ];
  }
  return result;
}
function toEventWithLocalDates(event2) {
  return _cloneEvent(event2, toLocalDate);
}
function cloneEvent(event2) {
  return _cloneEvent(event2, cloneDate);
}
function _cloneEvent(event2, dateFn) {
  event2 = assign2({}, event2);
  event2.start = dateFn(event2.start);
  event2.end = dateFn(event2.end);
  return event2;
}
function prepareEventChunks(chunks, hiddenDays) {
  let longChunks = {};
  if (chunks.length) {
    sortEventChunks(chunks);
    let prevChunk;
    for (let chunk of chunks) {
      let dates = [];
      let date = setMidnight(cloneDate(chunk.start));
      while (chunk.end > date) {
        if (!hiddenDays.includes(date.getUTCDay())) {
          dates.push(cloneDate(date));
          if (dates.length > 1) {
            let key = date.getTime();
            if (longChunks[key]) {
              longChunks[key].chunks.push(chunk);
            } else {
              longChunks[key] = {
                sorted: false,
                chunks: [chunk]
              };
            }
          }
        }
        addDay(date);
      }
      if (dates.length) {
        chunk.date = dates[0];
        chunk.days = dates.length;
        chunk.dates = dates;
        if (chunk.start < dates[0]) {
          chunk.start = dates[0];
        }
        let maxEnd = addDay(cloneDate(dates.at(-1)));
        if (chunk.end > maxEnd) {
          chunk.end = maxEnd;
        }
      } else {
        chunk.date = setMidnight(cloneDate(chunk.start));
        chunk.days = 1;
        chunk.dates = [chunk.date];
      }
      if (prevChunk && datesEqual(prevChunk.date, chunk.date)) {
        chunk.prev = prevChunk;
      }
      prevChunk = chunk;
    }
  }
  return longChunks;
}
function repositionEvent(chunk, longChunks, height2) {
  chunk.top = 0;
  if (chunk.prev) {
    chunk.top = chunk.prev.bottom + 1;
  }
  chunk.bottom = chunk.top + height2;
  let margin = 1;
  let key = chunk.date.getTime();
  if (longChunks[key]) {
    if (!longChunks[key].sorted) {
      longChunks[key].chunks.sort((a, b) => a.top - b.top);
      longChunks[key].sorted = true;
    }
    for (let longChunk of longChunks[key].chunks) {
      if (chunk.top < longChunk.bottom && chunk.bottom > longChunk.top) {
        let offset = longChunk.bottom - chunk.top + 1;
        margin += offset;
        chunk.top += offset;
        chunk.bottom += offset;
      }
    }
  }
  return margin;
}
function runReposition(refs, data) {
  var _a;
  refs.length = data.length;
  let result = [];
  for (let ref of refs) {
    result.push((_a = ref == null ? void 0 : ref.reposition) == null ? void 0 : _a.call(ref));
  }
  return result;
}
function eventIntersects(event2, start, end, resources) {
  if (event2.start < end && event2.end > start) {
    if (resources) {
      if (!isArray(resources)) {
        resources = [resources];
      }
      return resources.some((resource) => event2.resourceIds.includes(resource.id));
    }
    return true;
  }
  return false;
}
function helperEvent(display) {
  return previewEvent(display) || ghostEvent(display) || pointerEvent(display);
}
function bgEvent(display) {
  return display === "background";
}
function previewEvent(display) {
  return display === "preview";
}
function ghostEvent(display) {
  return display === "ghost";
}
function pointerEvent(display) {
  return display === "pointer";
}

// node_modules/@event-calendar/core/src/lib/options.js
function btnTextDay(text2) {
  return btnText(text2, "day");
}
function btnTextWeek(text2) {
  return btnText(text2, "week");
}
function btnTextMonth(text2) {
  return btnText(text2, "month");
}
function btnTextYear(text2) {
  return btnText(text2, "year");
}
function btnText(text2, period) {
  return {
    ...text2,
    next: "Next " + period,
    prev: "Previous " + period
  };
}
function themeView(view2) {
  return (theme) => ({ ...theme, view: view2 });
}

// node_modules/@event-calendar/core/src/lib/range.js
function createDateRange(input) {
  let start, end;
  if (input) {
    ({ start, end } = input);
    if (start) {
      start = setMidnight(createDate(start));
    }
    if (end) {
      end = setMidnight(createDate(end));
    }
  }
  return { start, end };
}
function outsideRange(date, range) {
  return range.start && date < range.start || range.end && date > range.end;
}
function limitToRange(date, range) {
  if (range.start && date < range.start) {
    date = range.start;
  }
  if (range.end && date > range.end) {
    date = range.end;
  }
  return date;
}

// node_modules/@event-calendar/core/src/lib/resources.js
function createResources(input) {
  let result = [];
  _createResources(input, 0, result);
  return result;
}
function _createResources(input, level, flat) {
  let result = [];
  for (let item of input) {
    let resource = createResource(item);
    result.push(resource);
    flat.push(resource);
    let payload = {
      level,
      children: [],
      expanded: true,
      hidden: false
    };
    setPayload(resource, payload);
    if (item.children) {
      payload.children = _createResources(item.children, level + 1, flat);
    }
  }
  return result;
}
function createResource(input) {
  return {
    id: String(input.id),
    title: input.title || "",
    eventBackgroundColor: input.eventBackgroundColor,
    eventTextColor: input.eventTextColor,
    extendedProps: input.extendedProps ?? {}
  };
}
function resourceBackgroundColor(event2, resources) {
  var _a;
  return (_a = findResource(event2, resources)) == null ? void 0 : _a.eventBackgroundColor;
}
function resourceTextColor(event2, resources) {
  var _a;
  return (_a = findResource(event2, resources)) == null ? void 0 : _a.eventTextColor;
}
function findResource(event2, resources) {
  return resources.find((resource) => event2.resourceIds.includes(resource.id));
}

// node_modules/@event-calendar/core/src/lib/stores.js
function intl(locale, format) {
  return derived([locale, format], ([$locale, $format]) => {
    let intl2 = isFunction($format) ? { format: $format } : new Intl.DateTimeFormat($locale, $format);
    return {
      format: (date) => intl2.format(toLocalDate(date))
    };
  });
}
function intlRange(locale, format) {
  return derived([locale, format], ([$locale, $format]) => {
    let formatRange;
    if (isFunction($format)) {
      formatRange = $format;
    } else {
      let intl2 = new Intl.DateTimeFormat($locale, $format);
      formatRange = (start, end) => {
        if (start <= end) {
          return intl2.formatRange(start, end);
        } else {
          let parts = intl2.formatRangeToParts(end, start);
          let result = "";
          let sources = ["startRange", "endRange"];
          let processed = [false, false];
          for (let part of parts) {
            let i = sources.indexOf(part.source);
            if (i >= 0) {
              if (!processed[i]) {
                result += _getParts(sources[1 - i], parts);
                processed[i] = true;
              }
            } else {
              result += part.value;
            }
          }
          return result;
        }
      };
    }
    return {
      formatRange: (start, end) => formatRange(toLocalDate(start), toLocalDate(end))
    };
  });
}
function _getParts(source, parts) {
  let result = "";
  for (let part of parts) {
    if (part.source == source) {
      result += part.value;
    }
  }
  return result;
}
function viewResources(state2) {
  return derived(
    [state2.resources, state2.filterResourcesWithEvents, state2._filteredEvents, state2._activeRange],
    ([$resources, $filterResourcesWithEvents, $_filteredEvents, $_activeRange]) => {
      let result = $resources.filter((resource) => !getPayload(resource).hidden);
      if ($filterResourcesWithEvents) {
        result = $resources.filter((resource) => {
          for (let event2 of $_filteredEvents) {
            if (event2.display !== "background" && event2.resourceIds.includes(resource.id) && event2.start < $_activeRange.end && event2.end > $_activeRange.start) {
              return true;
            }
          }
          return false;
        });
      }
      if (!result.length) {
        result = createResources([{}]);
      }
      return result;
    }
  );
}

// node_modules/@event-calendar/core/src/lib/times.js
function createTimes(date, $slotDuration, $slotLabelInterval, $_slotTimeLimits, $_intlSlotLabel) {
  date = cloneDate(date);
  let times2 = [];
  let end = cloneDate(date);
  addDuration(date, $_slotTimeLimits.min);
  addDuration(end, $_slotTimeLimits.max);
  if ($slotLabelInterval === void 0) {
    $slotLabelInterval = $slotDuration.seconds < 3600 ? createDuration($slotDuration.seconds * 2) : $slotDuration;
  }
  let label = cloneDate(date);
  while (date < end) {
    times2.push([
      toISOString(date),
      $_intlSlotLabel.format(date),
      date >= label
    ]);
    while ($slotLabelInterval.seconds && date >= label) {
      addDuration(label, $slotLabelInterval);
    }
    addDuration(date, $slotDuration);
  }
  return times2;
}
function createSlotTimeLimits($slotMinTime, $slotMaxTime, $flexibleSlotTimeLimits, $_viewDates, $_filteredEvents) {
  let min2 = createDuration($slotMinTime);
  let max2 = createDuration($slotMaxTime);
  if ($flexibleSlotTimeLimits) {
    let minMin = createDuration(min(toSeconds(min2), max(0, toSeconds(max2) - DAY_IN_SECONDS)));
    let maxMax = createDuration(max(toSeconds(max2), toSeconds(minMin) + DAY_IN_SECONDS));
    let filter = isFunction($flexibleSlotTimeLimits == null ? void 0 : $flexibleSlotTimeLimits.eventFilter) ? $flexibleSlotTimeLimits.eventFilter : (event2) => !bgEvent(event2.display);
    loop: for (let date of $_viewDates) {
      let start = addDuration(cloneDate(date), min2);
      let end = addDuration(cloneDate(date), max2);
      let minStart = addDuration(cloneDate(date), minMin);
      let maxEnd = addDuration(cloneDate(date), maxMax);
      for (let event2 of $_filteredEvents) {
        if (!event2.allDay && filter(event2) && event2.start < maxEnd && event2.end > minStart) {
          if (event2.start < start) {
            let seconds = max((event2.start - date) / 1e3, toSeconds(minMin));
            if (seconds < toSeconds(min2)) {
              min2.seconds = seconds;
            }
          }
          if (event2.end > end) {
            let seconds = min((event2.end - date) / 1e3, toSeconds(maxMax));
            if (seconds > toSeconds(max2)) {
              max2.seconds = seconds;
            }
          }
          if (toSeconds(min2) === toSeconds(minMin) && toSeconds(max2) === toSeconds(maxMax)) {
            break loop;
          }
        }
      }
    }
  }
  return { min: min2, max: max2 };
}

// node_modules/@event-calendar/core/src/storage/options.js
function createOptions(plugins) {
  var _a;
  let options = {
    allDayContent: void 0,
    allDaySlot: true,
    buttonText: {
      today: "today"
    },
    customButtons: {},
    date: /* @__PURE__ */ new Date(),
    datesSet: void 0,
    dayHeaderFormat: {
      weekday: "short",
      month: "numeric",
      day: "numeric"
    },
    dayHeaderAriaLabelFormat: {
      dateStyle: "full"
    },
    displayEventEnd: true,
    duration: { weeks: 1 },
    events: [],
    eventAllUpdated: void 0,
    eventBackgroundColor: void 0,
    eventClassNames: void 0,
    eventClick: void 0,
    eventColor: void 0,
    eventContent: void 0,
    eventDidMount: void 0,
    eventFilter: void 0,
    // ec option
    eventMouseEnter: void 0,
    eventMouseLeave: void 0,
    eventSources: [],
    eventTextColor: void 0,
    eventTimeFormat: {
      hour: "numeric",
      minute: "2-digit"
    },
    filterEventsWithResources: false,
    filterResourcesWithEvents: false,
    firstDay: 0,
    flexibleSlotTimeLimits: false,
    // ec option
    headerToolbar: {
      start: "title",
      center: "",
      end: "today prev,next"
    },
    height: void 0,
    hiddenDays: [],
    highlightedDates: [],
    // ec option
    lazyFetching: true,
    loading: void 0,
    locale: void 0,
    nowIndicator: false,
    resourceLabelContent: void 0,
    resourceLabelDidMount: void 0,
    resources: [],
    selectable: false,
    scrollTime: "06:00:00",
    slotDuration: "00:30:00",
    slotEventOverlap: true,
    slotHeight: 24,
    // ec option
    slotLabelInterval: void 0,
    slotLabelFormat: {
      hour: "numeric",
      minute: "2-digit"
    },
    slotMaxTime: "24:00:00",
    slotMinTime: "00:00:00",
    slotWidth: 72,
    theme: {
      allDay: "ec-all-day",
      active: "ec-active",
      bgEvent: "ec-bg-event",
      bgEvents: "ec-bg-events",
      body: "ec-body",
      button: "ec-button",
      buttonGroup: "ec-button-group",
      calendar: "ec",
      content: "ec-content",
      day: "ec-day",
      dayHead: "ec-day-head",
      days: "ec-days",
      disabled: "ec-disabled",
      event: "ec-event",
      eventBody: "ec-event-body",
      eventTime: "ec-event-time",
      eventTitle: "ec-event-title",
      events: "ec-events",
      extra: "ec-extra",
      handle: "ec-handle",
      header: "ec-header",
      hiddenScroll: "ec-hidden-scroll",
      highlight: "ec-highlight",
      icon: "ec-icon",
      line: "ec-line",
      lines: "ec-lines",
      minor: "ec-minor",
      nowIndicator: "ec-now-indicator",
      otherMonth: "ec-other-month",
      resource: "ec-resource",
      sidebar: "ec-sidebar",
      sidebarTitle: "ec-sidebar-title",
      today: "ec-today",
      time: "ec-time",
      title: "ec-title",
      toolbar: "ec-toolbar",
      view: "",
      weekdays: ["ec-sun", "ec-mon", "ec-tue", "ec-wed", "ec-thu", "ec-fri", "ec-sat"],
      withScroll: "ec-with-scroll"
    },
    titleFormat: {
      year: "numeric",
      month: "short",
      day: "numeric"
    },
    validRange: void 0,
    view: void 0,
    viewDidMount: void 0,
    views: {}
  };
  for (let plugin of plugins) {
    (_a = plugin.createOptions) == null ? void 0 : _a.call(plugin, options);
  }
  return options;
}
function createParsers(plugins) {
  var _a;
  let parsers = {
    date: (date) => setMidnight(createDate(date)),
    duration: createDuration,
    events: createEvents,
    eventSources: createEventSources,
    hiddenDays: (days2) => [...new Set(days2)],
    highlightedDates: (dates) => dates.map((date) => setMidnight(createDate(date))),
    resources: createResources,
    scrollTime: createDuration,
    slotDuration: createDuration,
    slotLabelInterval: (input) => input !== void 0 ? createDuration(input) : void 0,
    slotMaxTime: createDuration,
    slotMinTime: createDuration,
    validRange: createDateRange
  };
  for (let plugin of plugins) {
    (_a = plugin.createParsers) == null ? void 0 : _a.call(plugin, parsers);
  }
  return parsers;
}
function diff(options, prevOptions) {
  let diff2 = [];
  for (let key of keys(options)) {
    if (options[key] !== prevOptions[key]) {
      diff2.push([key, options[key]]);
    }
  }
  return diff2;
}

// node_modules/@event-calendar/core/src/storage/stores.js
function dayGrid(state2) {
  return derived(state2.view, ($view) => $view == null ? void 0 : $view.startsWith("dayGrid"));
}
function activeRange(state2) {
  return derived(
    [state2._currentRange, state2.firstDay, state2.slotMaxTime, state2._dayGrid],
    ([$_currentRange, $firstDay, $slotMaxTime, $_dayGrid]) => {
      let start = cloneDate($_currentRange.start);
      let end = cloneDate($_currentRange.end);
      if ($_dayGrid) {
        prevClosestDay(start, $firstDay);
        nextClosestDay(end, $firstDay);
      } else if ($slotMaxTime.days || $slotMaxTime.seconds > DAY_IN_SECONDS) {
        addDuration(subtractDay(end), $slotMaxTime);
        let start2 = subtractDay(cloneDate(end));
        if (start2 < start) {
          start = start2;
        }
      }
      return { start, end };
    }
  );
}
function currentRange(state2) {
  return derived(
    [state2.date, state2.duration, state2.firstDay],
    ([$date, $duration, $firstDay]) => {
      let start = cloneDate($date), end;
      if ($duration.months) {
        start.setUTCDate(1);
      } else if ($duration.inWeeks) {
        prevClosestDay(start, $firstDay);
      }
      end = addDuration(cloneDate(start), $duration);
      return { start, end };
    }
  );
}
function viewDates(state2) {
  return derived([state2._activeRange, state2.hiddenDays], ([$_activeRange, $hiddenDays]) => {
    let dates = [];
    let date = setMidnight(cloneDate($_activeRange.start));
    let end = setMidnight(cloneDate($_activeRange.end));
    while (date < end) {
      if (!$hiddenDays.includes(date.getUTCDay())) {
        dates.push(cloneDate(date));
      }
      addDay(date);
    }
    if (!dates.length && $hiddenDays.length && $hiddenDays.length < 7) {
      state2.date.update((date2) => {
        while ($hiddenDays.includes(date2.getUTCDay())) {
          addDay(date2);
        }
        return date2;
      });
      dates = get2(state2._viewDates);
    }
    return dates;
  });
}
function viewTitle(state2) {
  return derived(
    [state2.date, state2._activeRange, state2._intlTitle, state2._dayGrid],
    ([$date, $_activeRange, $_intlTitle, $_dayGrid]) => {
      return $_dayGrid ? $_intlTitle.formatRange($date, $date) : $_intlTitle.formatRange($_activeRange.start, subtractDay(cloneDate($_activeRange.end)));
    }
  );
}
function view(state2) {
  return derived([state2.view, state2._viewTitle, state2._currentRange, state2._activeRange], (args) => createView(...args));
}
function events(state2) {
  let _events = writable([]);
  let abortController;
  let fetching = 0;
  let debounceHandle = {};
  derived(
    [state2.events, state2.eventSources, state2._activeRange, state2._fetchedRange, state2.lazyFetching, state2.loading],
    (values, set2) => debounce(() => {
      let [$events, $eventSources, $_activeRange, $_fetchedRange, $lazyFetching, $loading] = values;
      if (!$eventSources.length) {
        set2($events);
        return;
      }
      if (!$_fetchedRange.start || $_fetchedRange.start > $_activeRange.start || $_fetchedRange.end < $_activeRange.end || !$lazyFetching) {
        if (abortController) {
          abortController.abort();
        }
        abortController = new AbortController();
        if (isFunction($loading) && !fetching) {
          $loading(true);
        }
        let stopLoading = () => {
          if (--fetching === 0 && isFunction($loading)) {
            $loading(false);
          }
        };
        let events2 = [];
        let failure = (e) => stopLoading();
        let success = (data) => {
          events2 = events2.concat(createEvents(data));
          set2(events2);
          stopLoading();
        };
        let startStr = toISOString($_activeRange.start);
        let endStr = toISOString($_activeRange.end);
        for (let source of $eventSources) {
          if (isFunction(source.events)) {
            let result = source.events({
              start: toLocalDate($_activeRange.start),
              end: toLocalDate($_activeRange.end),
              startStr,
              endStr
            }, success, failure);
            if (result !== void 0) {
              Promise.resolve(result).then(success, failure);
            }
          } else {
            let params = isFunction(source.extraParams) ? source.extraParams() : assign2({}, source.extraParams);
            params.start = startStr;
            params.end = endStr;
            params = new URLSearchParams(params);
            let url = source.url, headers = {}, body;
            if (["GET", "HEAD"].includes(source.method)) {
              url += (url.includes("?") ? "&" : "?") + params;
            } else {
              headers["content-type"] = "application/x-www-form-urlencoded;charset=UTF-8";
              body = String(params);
            }
            fetch(url, { method: source.method, headers, body, signal: abortController.signal, credentials: "same-origin" }).then((response) => response.json()).then(success).catch(failure);
          }
          ++fetching;
        }
        $_fetchedRange.start = $_activeRange.start;
        $_fetchedRange.end = $_activeRange.end;
      }
    }, debounceHandle, state2._queue),
    []
  ).subscribe(_events.set);
  return _events;
}
function filteredEvents(state2) {
  let view2;
  state2._view.subscribe(($_view) => view2 = $_view);
  let debounceHandle = {};
  return derived(
    [state2._events, state2.eventFilter],
    (values, set2) => debounce(() => {
      let [$_events, $eventFilter] = values;
      set2(
        isFunction($eventFilter) ? $_events.filter((event2, index2, events2) => $eventFilter({
          event: event2,
          index: index2,
          events: events2,
          view: view2
        })) : $_events
      );
    }, debounceHandle, state2._queue),
    []
  );
}
function now() {
  return readable(createDate(), (set2) => {
    let interval = setInterval(() => {
      set2(createDate());
    }, 1e3);
    return () => clearInterval(interval);
  });
}
function today(state2) {
  return derived(state2._now, ($_now) => setMidnight(cloneDate($_now)));
}

// node_modules/@event-calendar/core/src/storage/state.js
var state_default = class {
  constructor(plugins, input) {
    var _a, _b;
    plugins = plugins || [];
    let options = createOptions(plugins);
    let parsers = createParsers(plugins);
    options = parseOpts(options, parsers);
    input = parseOpts(input, parsers);
    for (let [option, value] of Object.entries(options)) {
      this[option] = writable(value);
    }
    this._queue = writable(/* @__PURE__ */ new Map());
    this._tasks = /* @__PURE__ */ new Map();
    this._auxiliary = writable([]);
    this._dayGrid = dayGrid(this);
    this._currentRange = currentRange(this);
    this._activeRange = activeRange(this);
    this._fetchedRange = writable({ start: void 0, end: void 0 });
    this._events = events(this);
    this._now = now();
    this._today = today(this);
    this._intlEventTime = intlRange(this.locale, this.eventTimeFormat);
    this._intlSlotLabel = intl(this.locale, this.slotLabelFormat);
    this._intlDayHeader = intl(this.locale, this.dayHeaderFormat);
    this._intlDayHeaderAL = intl(this.locale, this.dayHeaderAriaLabelFormat);
    this._intlTitle = intlRange(this.locale, this.titleFormat);
    this._bodyEl = writable(void 0);
    this._scrollable = writable(false);
    this._recheckScrollable = writable(false);
    this._viewTitle = viewTitle(this);
    this._viewDates = viewDates(this);
    this._view = view(this);
    this._viewComponent = writable(void 0);
    this._filteredEvents = filteredEvents(this);
    this._interaction = writable({});
    this._iEvents = writable([null, null]);
    this._iClasses = writable(identity);
    this._iClass = writable(void 0);
    this._set = (key, value) => {
      if (validKey(key, this)) {
        if (parsers[key]) {
          value = parsers[key](value);
        }
        this[key].set(value);
      }
    };
    this._get = (key) => validKey(key, this) ? get2(this[key]) : void 0;
    for (let plugin of plugins) {
      (_a = plugin.createStores) == null ? void 0 : _a.call(plugin, this);
    }
    if (input.view) {
      this.view.set(input.view);
    }
    let views = /* @__PURE__ */ new Set([...keys(options.views), ...keys(input.views ?? {})]);
    for (let view2 of views) {
      let defOpts = mergeOpts(options, options.views[view2] ?? {});
      let opts = mergeOpts(defOpts, input, ((_b = input.views) == null ? void 0 : _b[view2]) ?? {});
      let component2 = opts.component;
      filterOpts(opts, this);
      for (let key of keys(opts)) {
        let { set: set2, _set = set2, ...rest } = this[key];
        this[key] = {
          // Set value in all views
          set: ["buttonText", "theme"].includes(key) ? (value) => {
            if (isFunction(value)) {
              let result = value(defOpts[key]);
              opts[key] = result;
              set2(set2 === _set ? result : value);
            } else {
              opts[key] = value;
              set2(value);
            }
          } : (value) => {
            opts[key] = value;
            set2(value);
          },
          _set,
          ...rest
        };
      }
      this.view.subscribe((newView) => {
        if (newView === view2) {
          this._viewComponent.set(component2);
          if (isFunction(opts.viewDidMount)) {
            tick().then(() => opts.viewDidMount({
              view: toViewWithLocalDates(get2(this._view))
            }));
          }
          for (let key of keys(opts)) {
            this[key]._set(opts[key]);
          }
        }
      });
    }
  }
};
function parseOpts(opts, parsers) {
  let result = { ...opts };
  for (let key of keys(parsers)) {
    if (key in result) {
      result[key] = parsers[key](result[key]);
    }
  }
  if (opts.views) {
    result.views = {};
    for (let view2 of keys(opts.views)) {
      result.views[view2] = parseOpts(opts.views[view2], parsers);
    }
  }
  return result;
}
function mergeOpts(...args) {
  let result = {};
  for (let opts of args) {
    let override = {};
    for (let key of ["buttonText", "theme"]) {
      if (isFunction(opts[key])) {
        override[key] = opts[key](result[key]);
      }
    }
    result = {
      ...result,
      ...opts,
      ...override
    };
  }
  return result;
}
function filterOpts(opts, state2) {
  keys(opts).filter((key) => !validKey(key, state2) || key === "view").forEach((key) => delete opts[key]);
}
function validKey(key, state2) {
  return state2.hasOwnProperty(key) && key[0] !== "_";
}

// node_modules/@event-calendar/core/src/Buttons.svelte
Buttons[FILENAME] = "node_modules/@event-calendar/core/src/Buttons.svelte";
var root_2 = add_locations(from_html(`<h2></h2>`), Buttons[FILENAME], [[61, 8]]);
var root_4 = add_locations(from_html(`<button><i></i></button>`), Buttons[FILENAME], [[63, 8, [[69, 9]]]]);
var root_6 = add_locations(from_html(`<button><i></i></button>`), Buttons[FILENAME], [[71, 8, [[77, 9]]]]);
var root_8 = add_locations(from_html(`<button> </button>`), Buttons[FILENAME], [[79, 8]]);
var root_10 = add_locations(from_html(`<button></button>`), Buttons[FILENAME], [[86, 8]]);
var root_12 = add_locations(from_html(`<button> </button>`), Buttons[FILENAME], [[92, 8]]);
function Buttons($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Buttons);
  const [$$stores, $$cleanup] = setup_stores();
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $date = () => (validate_store(date, "date"), store_get(date, "$date", $$stores));
  const $duration = () => (validate_store(duration, "duration"), store_get(duration, "$duration", $$stores));
  const $hiddenDays = () => (validate_store(hiddenDays, "hiddenDays"), store_get(hiddenDays, "$hiddenDays", $$stores));
  const $_currentRange = () => (validate_store(_currentRange, "_currentRange"), store_get(_currentRange, "$_currentRange", $$stores));
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_viewTitle = () => (validate_store(_viewTitle, "_viewTitle"), store_get(_viewTitle, "$_viewTitle", $$stores));
  const $buttonText = () => (validate_store(buttonText, "buttonText"), store_get(buttonText, "$buttonText", $$stores));
  const $customButtons = () => (validate_store(customButtons, "customButtons"), store_get(customButtons, "$customButtons", $$stores));
  const $view = () => (validate_store(view2, "view"), store_get(view2, "$view", $$stores));
  let buttons = prop($$props, "buttons", 8);
  let {
    _currentRange,
    _viewTitle,
    _viewDates,
    buttonText,
    customButtons,
    date,
    duration,
    hiddenDays,
    theme,
    validRange,
    view: view2
  } = getContext("state");
  let today2 = setMidnight(createDate());
  let prevDisabled = mutable_source(), nextDisabled = mutable_source(), todayDisabled = mutable_source();
  let running = mutable_source(false);
  function isRunning() {
    return get(running);
  }
  function test() {
    return $_viewDates().every((date2) => outsideRange(date2, $validRange()));
  }
  function prev() {
    store_set(date, prevDate($date(), $duration(), $hiddenDays()));
  }
  function next() {
    store_set(date, nextDate($date(), $duration()));
  }
  legacy_pre_effect(
    () => ($validRange(), cloneDate, $date(), prevDate, $duration(), $hiddenDays(), nextDate, get(todayDisabled), $_currentRange(), tick),
    () => {
      if (!isRunning()) {
        set(running, true);
        set(prevDisabled, false);
        set(nextDisabled, false);
        if ($validRange().start) {
          let currentDate = cloneDate($date());
          store_set(date, prevDate($date(), $duration(), $hiddenDays()));
          set(prevDisabled, test());
          store_set(date, currentDate);
        }
        if ($validRange().end) {
          let currentDate = cloneDate($date());
          store_set(date, nextDate($date(), $duration()));
          set(nextDisabled, test());
          store_set(date, currentDate);
        }
        set(todayDisabled, today2 >= $_currentRange().start && today2 < $_currentRange().end);
        if (!get(todayDisabled) && ($validRange().start || $validRange().end)) {
          let currentDate = cloneDate($date());
          store_set(date, cloneDate(today2));
          set(todayDisabled, test());
          store_set(date, currentDate);
        }
        tick().then(() => set(running, false));
      }
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => each(node, 1, buttons, index, ($$anchor2, button) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var h2 = root_2();
          action(h2, ($$node, $$action_arg) => {
            var _a;
            return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
          }, $_viewTitle);
          template_effect(() => set_class(h2, 1, ($theme(), untrack(() => $theme().title))));
          append($$anchor3, h2);
        };
        var alternate_4 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          {
            var consequent_1 = ($$anchor4) => {
              var button_1 = root_4();
              var i = child(button_1);
              reset(button_1);
              template_effect(() => {
                set_class(button_1, 1, `${($theme(), untrack(() => $theme().button)) ?? ""} ec-${get(button) ?? ""}`);
                set_attribute(button_1, "aria-label", ($buttonText(), untrack(() => $buttonText().prev)));
                set_attribute(button_1, "title", ($buttonText(), untrack(() => $buttonText().prev)));
                button_1.disabled = get(prevDisabled);
                set_class(i, 1, `${($theme(), untrack(() => $theme().icon)) ?? ""} ec-${get(button) ?? ""}`);
              });
              event("click", button_1, prev);
              append($$anchor4, button_1);
            };
            var alternate_3 = ($$anchor4) => {
              var fragment_3 = comment();
              var node_3 = first_child(fragment_3);
              {
                var consequent_2 = ($$anchor5) => {
                  var button_2 = root_6();
                  var i_1 = child(button_2);
                  reset(button_2);
                  template_effect(() => {
                    set_class(button_2, 1, `${($theme(), untrack(() => $theme().button)) ?? ""} ec-${get(button) ?? ""}`);
                    set_attribute(button_2, "aria-label", ($buttonText(), untrack(() => $buttonText().next)));
                    set_attribute(button_2, "title", ($buttonText(), untrack(() => $buttonText().next)));
                    button_2.disabled = get(nextDisabled);
                    set_class(i_1, 1, `${($theme(), untrack(() => $theme().icon)) ?? ""} ec-${get(button) ?? ""}`);
                  });
                  event("click", button_2, next);
                  append($$anchor5, button_2);
                };
                var alternate_2 = ($$anchor5) => {
                  var fragment_4 = comment();
                  var node_4 = first_child(fragment_4);
                  {
                    var consequent_3 = ($$anchor6) => {
                      var button_3 = root_8();
                      var text2 = child(button_3, true);
                      reset(button_3);
                      template_effect(() => {
                        set_class(button_3, 1, `${($theme(), untrack(() => $theme().button)) ?? ""} ec-${get(button) ?? ""}`);
                        button_3.disabled = get(todayDisabled);
                        set_text(text2, ($buttonText(), get(button), untrack(() => $buttonText()[get(button)])));
                      });
                      event("click", button_3, () => store_set(date, cloneDate(today2)));
                      append($$anchor6, button_3);
                    };
                    var alternate_1 = ($$anchor6) => {
                      var fragment_5 = comment();
                      var node_5 = first_child(fragment_5);
                      {
                        var consequent_4 = ($$anchor7) => {
                          var button_4 = root_10();
                          effect(() => event("click", button_4, function(...$$args) {
                            apply(() => $customButtons()[get(button)].click, this, $$args, Buttons, [88, 22]);
                          }));
                          action(button_4, ($$node, $$action_arg) => {
                            var _a;
                            return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
                          }, () => $customButtons()[get(button)].text);
                          template_effect(() => set_class(button_4, 1, `${($theme(), untrack(() => $theme().button)) ?? ""} ec-${get(button) ?? ""}${($customButtons(), get(button), $theme(), untrack(() => $customButtons()[get(button)].active ? " " + $theme().active : "")) ?? ""}`));
                          append($$anchor7, button_4);
                        };
                        var alternate = ($$anchor7) => {
                          var fragment_6 = comment();
                          var node_6 = first_child(fragment_6);
                          {
                            var consequent_5 = ($$anchor8) => {
                              var button_5 = root_12();
                              var text_1 = child(button_5, true);
                              reset(button_5);
                              template_effect(() => {
                                set_class(button_5, 1, `${($theme(), untrack(() => $theme().button)) ?? ""}${($view(), get(button), $theme(), untrack(() => strict_equals($view(), get(button)) ? " " + $theme().active : "")) ?? ""} ec-${get(button) ?? ""}`);
                                set_text(text_1, ($buttonText(), get(button), untrack(() => $buttonText()[get(button)])));
                              });
                              event("click", button_5, () => store_set(view2, get(button)));
                              append($$anchor8, button_5);
                            };
                            add_svelte_meta(
                              () => if_block(
                                node_6,
                                ($$render) => {
                                  if (equals(get(button), "", false)) $$render(consequent_5);
                                },
                                true
                              ),
                              "if",
                              Buttons,
                              91,
                              4
                            );
                          }
                          append($$anchor7, fragment_6);
                        };
                        add_svelte_meta(
                          () => if_block(
                            node_5,
                            ($$render) => {
                              if ($customButtons(), get(button), untrack(() => $customButtons()[get(button)])) $$render(consequent_4);
                              else $$render(alternate, false);
                            },
                            true
                          ),
                          "if",
                          Buttons,
                          84,
                          4
                        );
                      }
                      append($$anchor6, fragment_5);
                    };
                    add_svelte_meta(
                      () => if_block(
                        node_4,
                        ($$render) => {
                          if (equals(get(button), "today")) $$render(consequent_3);
                          else $$render(alternate_1, false);
                        },
                        true
                      ),
                      "if",
                      Buttons,
                      78,
                      4
                    );
                  }
                  append($$anchor5, fragment_4);
                };
                add_svelte_meta(
                  () => if_block(
                    node_3,
                    ($$render) => {
                      if (equals(get(button), "next")) $$render(consequent_2);
                      else $$render(alternate_2, false);
                    },
                    true
                  ),
                  "if",
                  Buttons,
                  70,
                  4
                );
              }
              append($$anchor4, fragment_3);
            };
            add_svelte_meta(
              () => if_block(
                node_2,
                ($$render) => {
                  if (equals(get(button), "prev")) $$render(consequent_1);
                  else $$render(alternate_3, false);
                },
                true
              ),
              "if",
              Buttons,
              62,
              4
            );
          }
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (equals(get(button), "title")) $$render(consequent);
            else $$render(alternate_4, false);
          }),
          "if",
          Buttons,
          59,
          4
        );
      }
      append($$anchor2, fragment_1);
    }),
    "each",
    Buttons,
    58,
    0
  );
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Buttons = hmr(Buttons, () => Buttons[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Buttons[HMR].source;
    set(Buttons[HMR].source, module.default[HMR].original);
  });
}
var Buttons_default = Buttons;

// node_modules/@event-calendar/core/src/Toolbar.svelte
Toolbar[FILENAME] = "node_modules/@event-calendar/core/src/Toolbar.svelte";
var root_3 = add_locations(from_html(`<div><!></div>`), Toolbar[FILENAME], [[22, 20]]);
var root_1 = add_locations(from_html(`<div></div>`), Toolbar[FILENAME], [[19, 8]]);
var root = add_locations(from_html(`<nav></nav>`), Toolbar[FILENAME], [[17, 0]]);
function Toolbar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toolbar);
  const [$$stores, $$cleanup] = setup_stores();
  const $headerToolbar = () => (validate_store(headerToolbar, "headerToolbar"), store_get(headerToolbar, "$headerToolbar", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  let { headerToolbar, theme } = getContext("state");
  let sections = tag(
    user_derived(() => {
      var _a;
      let sections2 = {};
      for (let key of ["start", "center", "end"]) {
        sections2[key] = ((_a = $headerToolbar()[key]) == null ? void 0 : _a.split(" ").map((group) => group.split(","))) ?? [];
      }
      return sections2;
    }),
    "sections"
  );
  var nav = root();
  add_svelte_meta(
    () => each(nav, 21, () => keys(get(sections)), index, ($$anchor2, key) => {
      var div = root_1();
      add_svelte_meta(
        () => each(div, 21, () => get(sections)[get(key)], index, ($$anchor3, buttons) => {
          var fragment = comment();
          var node = first_child(fragment);
          {
            var consequent = ($$anchor4) => {
              var div_1 = root_3();
              var node_1 = child(div_1);
              add_svelte_meta(
                () => Buttons_default(node_1, {
                  get buttons() {
                    return get(buttons);
                  }
                }),
                "component",
                Toolbar,
                23,
                24,
                { componentTag: "Buttons" }
              );
              reset(div_1);
              template_effect(() => set_class(div_1, 1, $theme().buttonGroup));
              append($$anchor4, div_1);
            };
            var alternate = ($$anchor4) => {
              var fragment_1 = comment();
              var node_2 = first_child(fragment_1);
              add_svelte_meta(
                () => Buttons_default(node_2, {
                  get buttons() {
                    return get(buttons);
                  }
                }),
                "component",
                Toolbar,
                26,
                20,
                { componentTag: "Buttons" }
              );
              append($$anchor4, fragment_1);
            };
            add_svelte_meta(
              () => if_block(node, ($$render) => {
                if (get(buttons).length > 1) $$render(consequent);
                else $$render(alternate, false);
              }),
              "if",
              Toolbar,
              21,
              16
            );
          }
          append($$anchor3, fragment);
        }),
        "each",
        Toolbar,
        20,
        12
      );
      reset(div);
      template_effect(() => set_class(div, 1, `ec-${get(key) ?? ""}`));
      append($$anchor2, div);
    }),
    "each",
    Toolbar,
    18,
    4
  );
  reset(nav);
  template_effect(() => set_class(nav, 1, $theme().toolbar));
  append($$anchor, nav);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Toolbar = hmr(Toolbar, () => Toolbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toolbar[HMR].source;
    set(Toolbar[HMR].source, module.default[HMR].original);
  });
}
var Toolbar_default = Toolbar;

// node_modules/@event-calendar/core/src/Auxiliary.svelte
Auxiliary[FILENAME] = "node_modules/@event-calendar/core/src/Auxiliary.svelte";
function Auxiliary($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Auxiliary);
  const [$$stores, $$cleanup] = setup_stores();
  const $_activeRange = () => (validate_store(_activeRange, "_activeRange"), store_get(_activeRange, "$_activeRange", $$stores));
  const $datesSet = () => (validate_store(datesSet, "datesSet"), store_get(datesSet, "$datesSet", $$stores));
  const $_view = () => (validate_store(_view, "_view"), store_get(_view, "$_view", $$stores));
  const $_filteredEvents = () => (validate_store(_filteredEvents, "_filteredEvents"), store_get(_filteredEvents, "$_filteredEvents", $$stores));
  const $eventAllUpdated = () => (validate_store(eventAllUpdated, "eventAllUpdated"), store_get(eventAllUpdated, "$eventAllUpdated", $$stores));
  const $_queue = () => (validate_store(_queue, "_queue"), store_get(_queue, "$_queue", $$stores));
  const $_recheckScrollable = () => (validate_store(_recheckScrollable, "_recheckScrollable"), store_get(_recheckScrollable, "$_recheckScrollable", $$stores));
  const $_bodyEl = () => (validate_store(_bodyEl, "_bodyEl"), store_get(_bodyEl, "$_bodyEl", $$stores));
  const $_scrollable = () => (validate_store(_scrollable, "_scrollable"), store_get(_scrollable, "$_scrollable", $$stores));
  const $_auxiliary = () => (validate_store(_auxiliary, "_auxiliary"), store_get(_auxiliary, "$_auxiliary", $$stores));
  let {
    datesSet,
    eventAllUpdated,
    _auxiliary,
    _activeRange,
    _filteredEvents,
    _scrollable,
    _bodyEl,
    _tasks,
    _recheckScrollable,
    _queue,
    _view
  } = getContext("state");
  user_effect(() => {
    $_activeRange();
    untrack(() => {
      if (isFunction($datesSet())) {
        $datesSet()({
          start: toLocalDate($_activeRange().start),
          end: toLocalDate($_activeRange().end),
          startStr: toISOString($_activeRange().start),
          endStr: toISOString($_activeRange().end),
          view: toViewWithLocalDates($_view())
        });
      }
    });
  });
  user_effect(() => {
    $_filteredEvents();
    untrack(() => {
      if (isFunction($eventAllUpdated())) {
        task(() => $eventAllUpdated()({ view: toViewWithLocalDates($_view()) }), "eau", _tasks);
      }
    });
  });
  user_effect(() => {
    $_queue();
    untrack(() => {
      flushDebounce($_queue());
    });
  });
  user_effect(() => {
    $_recheckScrollable();
    untrack(() => {
      if ($_bodyEl()) {
        store_set(_scrollable, hasYScroll($_bodyEl()));
      }
      store_set(_recheckScrollable, false);
    });
  });
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => each(node, 1, $_auxiliary, index, ($$anchor2, Component) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => component(node_1, () => get(Component), ($$anchor3, Component_1) => {
          Component_1($$anchor3, {});
        }),
        "component",
        Auxiliary,
        57,
        4,
        { componentTag: "Component" }
      );
      append($$anchor2, fragment_1);
    }),
    "each",
    Auxiliary,
    56,
    0
  );
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Auxiliary = hmr(Auxiliary, () => Auxiliary[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Auxiliary[HMR].source;
    set(Auxiliary[HMR].source, module.default[HMR].original);
  });
}
var Auxiliary_default = Auxiliary;

// node_modules/@event-calendar/core/src/Calendar.svelte
Calendar[FILENAME] = "node_modules/@event-calendar/core/src/Calendar.svelte";
var root2 = add_locations(from_html(`<div><!> <!></div> <!>`, 1), Calendar[FILENAME], [[124, 0]]);
function Calendar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Calendar);
  const [$$stores, $$cleanup] = setup_stores();
  const $_events = () => (validate_store(_events, "_events"), store_get(_events, "$_events", $$stores));
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  const $date = () => (validate_store(date, "date"), store_get(date, "$date", $$stores));
  const $duration = () => (validate_store(duration, "duration"), store_get(duration, "$duration", $$stores));
  const $hiddenDays = () => (validate_store(hiddenDays, "hiddenDays"), store_get(hiddenDays, "$hiddenDays", $$stores));
  const $_viewComponent = () => (validate_store(_viewComponent, "_viewComponent"), store_get(_viewComponent, "$_viewComponent", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_scrollable = () => (validate_store(_scrollable, "_scrollable"), store_get(_scrollable, "$_scrollable", $$stores));
  const $_iClass = () => (validate_store(_iClass, "_iClass"), store_get(_iClass, "$_iClass", $$stores));
  const $height = () => (validate_store(height2, "height"), store_get(height2, "$height", $$stores));
  const $view = () => (validate_store(view2, "view"), store_get(view2, "$view", $$stores));
  let plugins = prop($$props, "plugins", 19, () => []), options = prop($$props, "options", 19, () => ({}));
  let state2 = new state_default(plugins(), options());
  setContext("state", state2);
  let {
    _viewComponent,
    _interaction,
    _iClass,
    _events,
    _scrollable,
    date,
    duration,
    hiddenDays,
    height: height2,
    theme,
    view: view2
  } = state2;
  let prevOptions = { ...options() };
  user_effect(() => {
    for (let [name, value] of diff(options(), prevOptions)) {
      untrack(() => {
        setOption(name, value);
      });
    }
    assign2(prevOptions, options());
  });
  function setOption(name, value) {
    state2._set(name, value);
    return this;
  }
  function getOption(name) {
    let value = state2._get(name);
    return value instanceof Date ? toLocalDate(value) : value;
  }
  function refetchEvents() {
    state2._fetchedRange.set({ start: void 0, end: void 0 });
    return this;
  }
  function getEvents() {
    return $_events().map(toEventWithLocalDates);
  }
  function getEventById(id) {
    for (let event2 of $_events()) {
      if (equals(event2.id, id)) {
        return toEventWithLocalDates(event2);
      }
    }
    return null;
  }
  function addEvent(event2) {
    event2 = createEvents([event2])[0];
    $_events().push(event2);
    store_set(_events, $_events());
    return toEventWithLocalDates(event2);
  }
  function updateEvent(event2) {
    let id = String(event2.id);
    let idx = $_events().findIndex((event3) => strict_equals(event3.id, id));
    if (idx >= 0) {
      event2 = createEvents([event2])[0];
      store_mutate(_events, untrack($_events)[idx] = event2, untrack($_events));
      return toEventWithLocalDates(event2);
    }
    return null;
  }
  function removeEventById(id) {
    id = String(id);
    let idx = $_events().findIndex((event2) => strict_equals(event2.id, id));
    if (idx >= 0) {
      $_events().splice(idx, 1);
      store_set(_events, $_events());
    }
    return this;
  }
  function getView() {
    return toViewWithLocalDates(get2(state2._view));
  }
  function unselect() {
    var _a;
    (_a = $_interaction().action) == null ? void 0 : _a.unselect();
    return this;
  }
  function dateFromPoint(x, y) {
    let dayEl = getElementWithPayload(x, y);
    if (dayEl) {
      let info = getPayload(dayEl)(x, y);
      info.date = toLocalDate(info.date);
      return info;
    }
    return null;
  }
  function next() {
    store_set(date, nextDate($date(), $duration()));
    return this;
  }
  function prev() {
    store_set(date, prevDate($date(), $duration(), $hiddenDays()));
    return this;
  }
  let View6 = tag(user_derived($_viewComponent), "View");
  var fragment = root2();
  var div = first_child(fragment);
  let styles;
  var node = child(div);
  add_svelte_meta(() => Toolbar_default(node, {}), "component", Calendar, 129, 4, { componentTag: "Toolbar" });
  var node_1 = sibling(node, 2);
  add_svelte_meta(
    () => component(node_1, () => get(View6), ($$anchor2, View_1) => {
      View_1($$anchor2, {});
    }),
    "component",
    Calendar,
    130,
    4,
    { componentTag: "View" }
  );
  reset(div);
  var node_2 = sibling(div, 2);
  add_svelte_meta(() => Auxiliary_default(node_2, {}), "component", Calendar, 132, 0, { componentTag: "Auxiliary" });
  template_effect(
    ($0, $1) => {
      set_class(div, 1, `${$theme().calendar ?? ""} ${$theme().view ?? ""}${$_scrollable() ? " " + $theme().withScroll : ""}${$_iClass() ? " " + $theme()[$_iClass()] : ""}`);
      set_attribute(div, "role", $0);
      styles = set_style(div, "", styles, $1);
    },
    [
      () => listView($view()) ? "list" : "table",
      () => ({ height: $height() })
    ]
  );
  append($$anchor, fragment);
  var $$pop = pop({
    get setOption() {
      return setOption;
    },
    get getOption() {
      return getOption;
    },
    get refetchEvents() {
      return refetchEvents;
    },
    get getEvents() {
      return getEvents;
    },
    get getEventById() {
      return getEventById;
    },
    get addEvent() {
      return addEvent;
    },
    get updateEvent() {
      return updateEvent;
    },
    get removeEventById() {
      return removeEventById;
    },
    get getView() {
      return getView;
    },
    get unselect() {
      return unselect;
    },
    get dateFromPoint() {
      return dateFromPoint;
    },
    get next() {
      return next;
    },
    get prev() {
      return prev;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Calendar = hmr(Calendar, () => Calendar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar[HMR].source;
    set(Calendar[HMR].source, module.default[HMR].original);
  });
}
var Calendar_default = Calendar;

// node_modules/@event-calendar/core/src/plugins/day-grid/stores.js
function days(state2) {
  return derived([state2.date, state2.firstDay, state2.hiddenDays], ([$date, $firstDay, $hiddenDays]) => {
    let days2 = [];
    let day = cloneDate($date);
    let max2 = 7;
    while (day.getUTCDay() !== $firstDay && max2) {
      subtractDay(day);
      --max2;
    }
    for (let i = 0; i < 7; ++i) {
      if (!$hiddenDays.includes(day.getUTCDay())) {
        days2.push(cloneDate(day));
      }
      addDay(day);
    }
    return days2;
  });
}

// node_modules/@event-calendar/core/src/plugins/day-grid/Header.svelte
Header[FILENAME] = "node_modules/@event-calendar/core/src/plugins/day-grid/Header.svelte";
var root_13 = add_locations(from_html(`<div role="columnheader"><span></span></div>`), Header[FILENAME], [[11, 12, [[12, 16]]]]);
var root3 = add_locations(from_html(`<div><div role="row"></div> <div></div></div>`), Header[FILENAME], [[8, 0, [[9, 4], [19, 4]]]]);
function Header($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Header);
  const [$$stores, $$cleanup] = setup_stores();
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_days = () => (validate_store(_days, "_days"), store_get(_days, "$_days", $$stores));
  const $_intlDayHeaderAL = () => (validate_store(_intlDayHeaderAL, "_intlDayHeaderAL"), store_get(_intlDayHeaderAL, "$_intlDayHeaderAL", $$stores));
  const $_intlDayHeader = () => (validate_store(_intlDayHeader, "_intlDayHeader"), store_get(_intlDayHeader, "$_intlDayHeader", $$stores));
  let { theme, _intlDayHeader, _intlDayHeaderAL, _days } = getContext("state");
  init();
  var div = root3();
  var div_1 = child(div);
  add_svelte_meta(
    () => each(div_1, 5, $_days, index, ($$anchor2, day) => {
      var div_2 = root_13();
      var span = child(div_2);
      action(span, ($$node, $$action_arg) => {
        var _a;
        return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
      }, () => $_intlDayHeader().format(get(day)));
      reset(div_2);
      template_effect(
        ($0, $1) => {
          set_class(div_2, 1, `${$theme().day ?? ""} ${$0 ?? ""}`);
          set_attribute(span, "aria-label", $1);
        },
        [
          () => {
            var _a;
            return (_a = $theme().weekdays) == null ? void 0 : _a[get(day).getUTCDay()];
          },
          () => $_intlDayHeaderAL().format(get(day))
        ]
      );
      append($$anchor2, div_2);
    }),
    "each",
    Header,
    10,
    8
  );
  reset(div_1);
  var div_3 = sibling(div_1, 2);
  reset(div);
  template_effect(() => {
    set_class(div, 1, $theme().header);
    set_class(div_1, 1, $theme().days);
    set_class(div_3, 1, $theme().hiddenScroll);
  });
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Header = hmr(Header, () => Header[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Header[HMR].source;
    set(Header[HMR].source, module.default[HMR].original);
  });
}
var Header_default = Header;

// node_modules/@event-calendar/core/src/lib/components/BaseEvent.svelte
BaseEvent[FILENAME] = "node_modules/@event-calendar/core/src/lib/components/BaseEvent.svelte";
var root_14 = add_locations(from_html(`<div></div>`), BaseEvent[FILENAME], [[81, 8]]);
var root4 = add_locations(from_html(`<article><!></article>`), BaseEvent[FILENAME], [[68, 0]]);
function BaseEvent($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BaseEvent);
  const [$$stores, $$cleanup] = setup_stores();
  const $resources = () => (validate_store(resources, "resources"), store_get(resources, "$resources", $$stores));
  const $eventBackgroundColor = () => (validate_store(eventBackgroundColor, "eventBackgroundColor"), store_get(eventBackgroundColor, "$eventBackgroundColor", $$stores));
  const $eventColor = () => (validate_store(eventColor, "eventColor"), store_get(eventColor, "$eventColor", $$stores));
  const $eventTextColor = () => (validate_store(eventTextColor, "eventTextColor"), store_get(eventTextColor, "$eventTextColor", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $eventClassNames = () => (validate_store(eventClassNames, "eventClassNames"), store_get(eventClassNames, "$eventClassNames", $$stores));
  const $_view = () => (validate_store(_view, "_view"), store_get(_view, "$_view", $$stores));
  const $displayEventEnd = () => (validate_store(displayEventEnd, "displayEventEnd"), store_get(displayEventEnd, "$displayEventEnd", $$stores));
  const $eventContent = () => (validate_store(eventContent, "eventContent"), store_get(eventContent, "$eventContent", $$stores));
  const $_intlEventTime = () => (validate_store(_intlEventTime, "_intlEventTime"), store_get(_intlEventTime, "$_intlEventTime", $$stores));
  const $eventDidMount = () => (validate_store(eventDidMount, "eventDidMount"), store_get(eventDidMount, "$eventDidMount", $$stores));
  const $eventClick = () => (validate_store(eventClick, "eventClick"), store_get(eventClick, "$eventClick", $$stores));
  const $eventMouseEnter = () => (validate_store(eventMouseEnter, "eventMouseEnter"), store_get(eventMouseEnter, "$eventMouseEnter", $$stores));
  const $eventMouseLeave = () => (validate_store(eventMouseLeave, "eventMouseLeave"), store_get(eventMouseLeave, "$eventMouseLeave", $$stores));
  let el = prop($$props, "el", 15), classes = prop($$props, "classes", 3, identity), styles = prop($$props, "styles", 3, identity);
  let {
    displayEventEnd,
    eventBackgroundColor,
    eventColor,
    eventContent,
    eventClick,
    eventDidMount,
    eventClassNames,
    eventMouseEnter,
    eventMouseLeave,
    eventTextColor,
    resources,
    theme,
    _view,
    _intlEventTime
  } = getContext("state");
  let event2 = tag(user_derived(() => $$props.chunk.event), "event");
  let display = tag(user_derived(() => $$props.chunk.event.display), "display");
  let bgColor = tag(user_derived(() => get(event2).backgroundColor ?? resourceBackgroundColor(get(event2), $resources()) ?? $eventBackgroundColor() ?? $eventColor()), "bgColor");
  let txtColor = tag(user_derived(() => get(event2).textColor ?? resourceTextColor(get(event2), $resources()) ?? $eventTextColor()), "txtColor");
  let style = tag(user_derived(() => entries(styles()({ "background-color": get(bgColor), "color": get(txtColor) })).map((entry) => `${entry[0]}:${entry[1]}`).concat(get(event2).styles).join(";")), "style");
  let classNames = tag(
    user_derived(() => classes()([
      bgEvent(get(display)) ? $theme().bgEvent : $theme().event,
      ...createEventClasses($eventClassNames(), get(event2), $_view())
    ]).join(" ")),
    "classNames"
  );
  let $$d = tag(user_derived(() => createEventContent($$props.chunk, $displayEventEnd(), $eventContent(), $theme(), $_intlEventTime(), $_view())), "[$derived iterable]"), $$array = tag(user_derived(() => to_array(get($$d), 2)), "[$derived iterable]"), timeText = tag(user_derived(() => get($$array)[0]), "timeText"), content = tag(user_derived(() => get($$array)[1]), "content");
  onMount(() => {
    if (isFunction($eventDidMount())) {
      $eventDidMount()({
        event: toEventWithLocalDates(get(event2)),
        timeText: get(timeText),
        el: el(),
        view: toViewWithLocalDates($_view())
      });
    }
  });
  function createHandler(fn, display2) {
    return !helperEvent(display2) && isFunction(fn) ? (jsEvent) => fn({
      event: toEventWithLocalDates(get(event2)),
      el: el(),
      jsEvent,
      view: toViewWithLocalDates($_view())
    }) : void 0;
  }
  let onclick3 = tag(user_derived(() => !bgEvent(get(display)) && createHandler($eventClick(), get(display)) || void 0), "onclick");
  let onkeydown = tag(user_derived(() => get(onclick3) && keyEnter(get(onclick3))), "onkeydown");
  let onmouseenter = tag(user_derived(() => createHandler($eventMouseEnter(), get(display))), "onmouseenter");
  let onmouseleave = tag(user_derived(() => createHandler($eventMouseLeave(), get(display))), "onmouseleave");
  var article = root4();
  article.__click = function(...$$args) {
    apply(() => get(onclick3), this, $$args, BaseEvent, [74, 5]);
  };
  article.__keydown = function(...$$args) {
    apply(() => get(onkeydown), this, $$args, BaseEvent, [75, 5]);
  };
  article.__pointerdown = function(...$$args) {
    apply(() => $$props.onpointerdown, this, $$args, BaseEvent, [78, 5]);
  };
  {
    const defaultBody = wrap_snippet(BaseEvent, function($$anchor2) {
      validate_snippet_args(...arguments);
      var div = root_14();
      action(div, ($$node, $$action_arg) => {
        var _a;
        return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
      }, () => get(content));
      template_effect(() => set_class(div, 1, clsx($theme().eventBody)));
      append($$anchor2, div);
    });
    var node = child(article);
    {
      var consequent = ($$anchor2) => {
        var fragment = comment();
        var node_1 = first_child(fragment);
        add_svelte_meta(() => snippet(node_1, () => $$props.body, () => defaultBody, () => get(bgColor), () => get(txtColor)), "render", BaseEvent, 84, 8);
        append($$anchor2, fragment);
      };
      var alternate = ($$anchor2) => {
        add_svelte_meta(() => defaultBody($$anchor2), "render", BaseEvent, 86, 8);
      };
      add_svelte_meta(
        () => if_block(node, ($$render) => {
          if ($$props.body) $$render(consequent);
          else $$render(alternate, false);
        }),
        "if",
        BaseEvent,
        83,
        4
      );
    }
    reset(article);
    bind_this(article, ($$value) => el($$value), () => el());
  }
  template_effect(() => {
    set_class(article, 1, clsx(get(classNames)));
    set_style(article, get(style));
    set_attribute(article, "role", get(onclick3) ? "button" : void 0);
    set_attribute(article, "tabindex", get(onclick3) ? 0 : void 0);
  });
  event("mouseenter", article, function(...$$args) {
    apply(() => get(onmouseenter), this, $$args, BaseEvent, [76, 5]);
  });
  event("mouseleave", article, function(...$$args) {
    apply(() => get(onmouseleave), this, $$args, BaseEvent, [77, 5]);
  });
  append($$anchor, article);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  BaseEvent = hmr(BaseEvent, () => BaseEvent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BaseEvent[HMR].source;
    set(BaseEvent[HMR].source, module.default[HMR].original);
  });
}
var BaseEvent_default = BaseEvent;
delegate(["click", "keydown", "pointerdown"]);

// node_modules/@event-calendar/core/src/lib/components/InteractableEvent.svelte
InteractableEvent[FILENAME] = "node_modules/@event-calendar/core/src/lib/components/InteractableEvent.svelte";
function InteractableEvent($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, InteractableEvent);
  const [$$stores, $$cleanup] = setup_stores();
  var $$ownership_validator = create_ownership_validator($$props);
  const $_iClasses = () => (validate_store(_iClasses, "_iClasses"), store_get(_iClasses, "$_iClasses", $$stores));
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  let el = prop($$props, "el", 15);
  let { _interaction, _iClasses } = getContext("state");
  let event2 = tag(user_derived(() => $$props.chunk.event), "event");
  let display = tag(user_derived(() => $$props.chunk.event.display), "display");
  let classes = tag(user_derived(() => (classNames) => $_iClasses()(classNames, get(event2))), "classes");
  function createDragHandler(event3) {
    var _a, _b;
    return ((_a = $_interaction().action) == null ? void 0 : _a.draggable(event3)) ? (jsEvent) => {
      var _a2, _b2;
      return $_interaction().action.drag(event3, jsEvent, (_a2 = $$props.forceDate) == null ? void 0 : _a2.call($$props), (_b2 = $$props.forceMargin) == null ? void 0 : _b2.call($$props));
    } : (_b = $_interaction().action) == null ? void 0 : _b.noAction;
  }
  let onpointerdown = tag(user_derived(() => !bgEvent(get(display)) && !helperEvent(get(display)) ? createDragHandler(get(event2)) : void 0), "onpointerdown");
  let Resizer2 = tag(user_derived(() => $_interaction().resizer), "Resizer");
  var fragment = comment();
  var node = first_child(fragment);
  {
    const body = wrap_snippet(InteractableEvent, function($$anchor2, defaultBody = noop) {
      validate_snippet_args(...arguments);
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          add_svelte_meta(
            () => component(node_2, () => get(Resizer2), ($$anchor4, Resizer_1) => {
              Resizer_1($$anchor4, {
                get chunk() {
                  return $$props.chunk;
                },
                get axis() {
                  return $$props.axis;
                },
                get forceDate() {
                  return $$props.forceDate;
                },
                get forceMargin() {
                  return $$props.forceMargin;
                },
                children: wrap_snippet(InteractableEvent, ($$anchor5, $$slotProps) => {
                  var fragment_3 = comment();
                  var node_3 = first_child(fragment_3);
                  add_svelte_meta(() => snippet(node_3, defaultBody), "render", InteractableEvent, 39, 16);
                  append($$anchor5, fragment_3);
                }),
                $$slots: { default: true }
              });
            }),
            "component",
            InteractableEvent,
            38,
            12,
            { componentTag: "Resizer" }
          );
          append($$anchor3, fragment_2);
        };
        var alternate = ($$anchor3) => {
          var fragment_4 = comment();
          var node_4 = first_child(fragment_4);
          add_svelte_meta(() => snippet(node_4, defaultBody), "render", InteractableEvent, 42, 12);
          append($$anchor3, fragment_4);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (get(Resizer2)) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          InteractableEvent,
          37,
          8
        );
      }
      append($$anchor2, fragment_1);
    });
    $$ownership_validator.binding("el", BaseEvent_default, el);
    add_svelte_meta(
      () => BaseEvent_default(node, {
        get chunk() {
          return $$props.chunk;
        },
        get classes() {
          return get(classes);
        },
        get styles() {
          return $$props.styles;
        },
        get onpointerdown() {
          return get(onpointerdown);
        },
        get el() {
          return el();
        },
        set el($$value) {
          el($$value);
        },
        body,
        $$slots: { body: true }
      }),
      "component",
      InteractableEvent,
      35,
      0,
      { componentTag: "BaseEvent" }
    );
  }
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  InteractableEvent = hmr(InteractableEvent, () => InteractableEvent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InteractableEvent[HMR].source;
    set(InteractableEvent[HMR].source, module.default[HMR].original);
  });
}
var InteractableEvent_default = InteractableEvent;

// node_modules/@event-calendar/core/src/plugins/day-grid/Event.svelte
Event[FILENAME] = "node_modules/@event-calendar/core/src/plugins/day-grid/Event.svelte";
function Event($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Event);
  const [$$stores, $$cleanup] = setup_stores();
  const $dayMaxEvents = () => (validate_store(dayMaxEvents, "dayMaxEvents"), store_get(dayMaxEvents, "$dayMaxEvents", $$stores));
  const $_hiddenEvents = () => (validate_store(_hiddenEvents, "_hiddenEvents"), store_get(_hiddenEvents, "$_hiddenEvents", $$stores));
  const $_popupDate = () => (validate_store(_popupDate, "_popupDate"), store_get(_popupDate, "$_popupDate", $$stores));
  let longChunks = prop($$props, "longChunks", 19, () => ({})), inPopup = prop($$props, "inPopup", 3, false), dates = prop($$props, "dates", 19, () => []);
  let { dayMaxEvents, _hiddenEvents, _popupDate } = getContext("state");
  let el = tag(state(void 0), "el");
  let margin = tag(state(1), "margin");
  let hidden = tag(state(false), "hidden");
  let event2 = tag(user_derived(() => $$props.chunk.event), "event");
  let display = tag(user_derived(() => $$props.chunk.event.display), "display");
  let styles = tag(
    user_derived(() => (style) => {
      if (bgEvent(get(display))) {
        style["width"] = `calc(${$$props.chunk.days * 100}% + ${$$props.chunk.days - 1}px)`;
      } else {
        let marginTop = get(margin);
        if (get(event2)._margin) {
          let [_margin, _dates] = get(event2)._margin;
          if ($$props.chunk.date >= _dates[0] && $$props.chunk.date <= _dates.at(-1)) {
            marginTop = _margin;
          }
        }
        style["width"] = `calc(${$$props.chunk.days * 100}% + ${($$props.chunk.days - 1) * 7}px)`;
        style["margin-top"] = `${marginTop}px`;
      }
      if (get(hidden)) {
        style["visibility"] = "hidden";
      }
      return style;
    }),
    "styles"
  );
  function reposition() {
    set(margin, repositionEvent($$props.chunk, longChunks(), height(get(el))), true);
    if (strict_equals($dayMaxEvents(), true)) {
      hide();
    } else {
      set(hidden, false);
    }
  }
  function hide() {
    let dayEl = ancestor(get(el), 2);
    let h = height(dayEl) - height(dayEl.firstElementChild) - footHeight(dayEl);
    set(hidden, $$props.chunk.bottom > h);
    let update = false;
    for (let date of $$props.chunk.dates) {
      let hiddenEvents = $_hiddenEvents()[date.getTime()];
      if (hiddenEvents) {
        let size = hiddenEvents.size;
        if (get(hidden)) {
          hiddenEvents.add($$props.chunk.event);
        } else {
          hiddenEvents.delete($$props.chunk.event);
        }
        if (strict_equals(size, hiddenEvents.size, false)) {
          update = true;
        }
      }
    }
    if (update) {
      store_set(_hiddenEvents, $_hiddenEvents());
    }
  }
  function footHeight(dayEl) {
    let h = 0;
    for (let i = 0; i < $$props.chunk.days; ++i) {
      h = max(h, height(dayEl.lastElementChild));
      dayEl = dayEl.nextElementSibling;
      if (!dayEl) {
        break;
      }
    }
    return h;
  }
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => InteractableEvent_default(node, {
      get chunk() {
        return $$props.chunk;
      },
      get styles() {
        return get(styles);
      },
      axis: "x",
      forceDate: () => inPopup() ? $_popupDate() : void 0,
      forceMargin: () => [
        rect(get(el)).top - rect(ancestor(get(el), 1)).top,
        dates()
      ],
      get el() {
        return get(el);
      },
      set el($$value) {
        set(el, $$value, true);
      }
    }),
    "component",
    Event,
    86,
    0,
    { componentTag: "InteractableEvent" }
  );
  append($$anchor, fragment);
  var $$pop = pop({
    get reposition() {
      return reposition;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Event = hmr(Event, () => Event[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Event[HMR].source;
    set(Event[HMR].source, module.default[HMR].original);
  });
}
var Event_default = Event;

// node_modules/@event-calendar/core/src/plugins/day-grid/Popup.svelte
Popup[FILENAME] = "node_modules/@event-calendar/core/src/plugins/day-grid/Popup.svelte";
var root5 = add_locations(from_html(`<div><div><time></time> <a role="button" tabindex="0">&times;</a></div> <div></div></div>`), Popup[FILENAME], [[75, 0, [[83, 4, [[84, 8], [86, 8]]], [94, 4]]]]);
function Popup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Popup);
  const [$$stores, $$cleanup] = setup_stores();
  const $_popupChunks = () => (validate_store(_popupChunks, "_popupChunks"), store_get(_popupChunks, "$_popupChunks", $$stores));
  const $_popupDate = () => (validate_store(_popupDate, "_popupDate"), store_get(_popupDate, "$_popupDate", $$stores));
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_intlDayPopover = () => (validate_store(_intlDayPopover, "_intlDayPopover"), store_get(_intlDayPopover, "$_intlDayPopover", $$stores));
  const $buttonText = () => (validate_store(buttonText, "buttonText"), store_get(buttonText, "$buttonText", $$stores));
  let {
    buttonText,
    theme,
    _interaction,
    _intlDayPopover,
    _popupDate,
    _popupChunks
  } = getContext("state");
  let el = tag(state(void 0), "el");
  let style = tag(state(""), "style");
  function position() {
    let dayEl = ancestor(get(el), 1);
    let bodyEl = ancestor(dayEl, 3);
    let popupRect = rect(get(el));
    let dayRect = rect(dayEl);
    let bodyRect = rect(bodyEl);
    set(style, "");
    let left;
    if (popupRect.width >= bodyRect.width) {
      left = bodyRect.left - dayRect.left;
      let right = dayRect.right - bodyRect.right;
      set(style, get(style) + `right:${right}px;`);
    } else {
      left = (dayRect.width - popupRect.width) / 2;
      if (dayRect.left + left < bodyRect.left) {
        left = bodyRect.left - dayRect.left;
      } else if (dayRect.left + left + popupRect.width > bodyRect.right) {
        left = bodyRect.right - dayRect.left - popupRect.width;
      }
    }
    set(style, get(style) + `left:${left}px;`);
    let top;
    if (popupRect.height >= bodyRect.height) {
      top = bodyRect.top - dayRect.top;
      let bottom = dayRect.bottom - bodyRect.bottom;
      set(style, get(style) + `bottom:${bottom}px;`);
    } else {
      top = (dayRect.height - popupRect.height) / 2;
      if (dayRect.top + top < bodyRect.top) {
        top = bodyRect.top - dayRect.top;
      } else if (dayRect.top + top + popupRect.height > bodyRect.bottom) {
        top = bodyRect.bottom - dayRect.top - popupRect.height;
      }
    }
    set(style, get(style) + `top:${top}px;`);
  }
  user_effect(() => {
    $_popupChunks();
    tick().then(reposition);
  });
  function reposition() {
    if ($_popupChunks().length) {
      position();
    } else {
      close();
    }
  }
  function close() {
    store_set(_popupDate, null);
    store_set(_popupChunks, []);
  }
  function handlePointerDownOutside() {
    var _a;
    close();
    (_a = $_interaction().action) == null ? void 0 : _a.noClick();
  }
  var div = root5();
  var event_handler = user_derived(stopPropagation);
  div.__pointerdown = function(...$$args) {
    apply(() => get(event_handler), this, $$args, Popup, [80, 19], true, true);
  };
  var div_1 = child(div);
  var time = child(div_1);
  action(time, ($$node, $$action_arg) => {
    var _a;
    return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
  }, () => $_intlDayPopover().format($_popupDate()));
  var a = sibling(time, 2);
  var event_handler_1 = user_derived(() => stopPropagation(close));
  a.__click = function(...$$args) {
    apply(() => get(event_handler_1), this, $$args, Popup, [90, 21], true);
  };
  var event_handler_2 = user_derived(() => keyEnter(close));
  a.__keydown = function(...$$args) {
    apply(() => get(event_handler_2), this, $$args, Popup, [91, 23], true);
  };
  reset(div_1);
  var div_2 = sibling(div_1, 2);
  validate_each_keys($_popupChunks, (chunk) => chunk.event);
  add_svelte_meta(
    () => each(div_2, 5, $_popupChunks, (chunk) => chunk.event, ($$anchor2, chunk) => {
      var fragment = comment();
      var node = first_child(fragment);
      add_svelte_meta(
        () => Event_default(node, {
          get chunk() {
            return get(chunk);
          },
          inPopup: true
        }),
        "component",
        Popup,
        96,
        12,
        { componentTag: "Event" }
      );
      append($$anchor2, fragment);
    }),
    "each",
    Popup,
    95,
    8
  );
  reset(div_2);
  reset(div);
  bind_this(div, ($$value) => set(el, $$value), () => get(el));
  action(div, ($$node, $$action_arg) => {
    var _a;
    return (_a = outsideEvent) == null ? void 0 : _a($$node, $$action_arg);
  }, () => "pointerdown");
  template_effect(
    ($0) => {
      set_class(div, 1, $theme().popup);
      set_style(div, get(style));
      set_class(div_1, 1, $theme().dayHead);
      set_attribute(time, "datetime", $0);
      set_attribute(a, "aria-label", $buttonText().close);
      set_class(div_2, 1, $theme().events);
    },
    [() => toISOString($_popupDate(), 10)]
  );
  event("pointerdownoutside", div, handlePointerDownOutside);
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Popup = hmr(Popup, () => Popup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popup[HMR].source;
    set(Popup[HMR].source, module.default[HMR].original);
  });
}
var Popup_default = Popup;
delegate(["pointerdown", "click", "keydown"]);

// node_modules/@event-calendar/core/src/plugins/day-grid/Day.svelte
Day[FILENAME] = "node_modules/@event-calendar/core/src/plugins/day-grid/Day.svelte";
var root_15 = add_locations(from_html(`<span></span>`), Day[FILENAME], [[127, 12]]);
var root_5 = add_locations(from_html(`<div><!></div>`), Day[FILENAME], [[143, 12]]);
var root_62 = add_locations(from_html(`<div><!></div>`), Day[FILENAME], [[149, 12]]);
var root_42 = add_locations(from_html(`<!> <!>`, 1), Day[FILENAME], []);
var root_102 = add_locations(from_html(`<a role="button" tabindex="0" aria-haspopup="true"></a>`), Day[FILENAME], [[170, 12]]);
var root6 = add_locations(from_html(`<div role="cell"><div><time></time> <!></div> <div><!></div> <!> <div><!></div> <!> <div><!></div></div>`), Day[FILENAME], [
  [115, 0, [[121, 4, [[122, 8]]], [133, 4], [154, 4], [165, 4]]]
]);
function Day($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Day);
  const [$$stores, $$cleanup] = setup_stores();
  const $_hiddenEvents = () => (validate_store(_hiddenEvents, "_hiddenEvents"), store_get(_hiddenEvents, "$_hiddenEvents", $$stores));
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $currentDate = () => (validate_store(currentDate, "currentDate"), store_get(currentDate, "$currentDate", $$stores));
  const $highlightedDates = () => (validate_store(highlightedDates, "highlightedDates"), store_get(highlightedDates, "$highlightedDates", $$stores));
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $moreLinkContent = () => (validate_store(moreLinkContent, "moreLinkContent"), store_get(moreLinkContent, "$moreLinkContent", $$stores));
  const $_popupDate = () => (validate_store(_popupDate, "_popupDate"), store_get(_popupDate, "$_popupDate", $$stores));
  const $_popupChunks = () => (validate_store(_popupChunks, "_popupChunks"), store_get(_popupChunks, "$_popupChunks", $$stores));
  const $weekNumbers = () => (validate_store(weekNumbers, "weekNumbers"), store_get(weekNumbers, "$weekNumbers", $$stores));
  const $firstDay = () => (validate_store(firstDay, "firstDay"), store_get(firstDay, "$firstDay", $$stores));
  const $weekNumberContent = () => (validate_store(weekNumberContent, "weekNumberContent"), store_get(weekNumberContent, "$weekNumberContent", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  const $_intlDayCell = () => (validate_store(_intlDayCell, "_intlDayCell"), store_get(_intlDayCell, "$_intlDayCell", $$stores));
  let iChunks = prop($$props, "iChunks", 19, () => []);
  let {
    date: currentDate,
    dayMaxEvents,
    highlightedDates,
    firstDay,
    moreLinkContent,
    theme,
    validRange,
    weekNumbers,
    weekNumberContent,
    _hiddenEvents,
    _intlDayCell,
    _popupDate,
    _popupChunks,
    _today,
    _interaction
  } = getContext("state");
  let el = tag(state(void 0), "el");
  let hiddenEvents = new SvelteSet();
  user_pre_effect(() => {
    store_mutate(_hiddenEvents, untrack($_hiddenEvents)[$$props.date.getTime()] = untrack(() => hiddenEvents), untrack($_hiddenEvents));
  });
  let refs = [];
  let isToday = tag(user_derived(() => datesEqual($$props.date, $_today())), "isToday");
  let otherMonth = tag(user_derived(() => strict_equals($$props.date.getUTCMonth(), $currentDate().getUTCMonth(), false)), "otherMonth");
  let highlight = tag(user_derived(() => $highlightedDates().some((d) => datesEqual(d, $$props.date))), "highlight");
  let disabled = tag(user_derived(() => outsideRange($$props.date, $validRange())), "disabled");
  let dayBgChunks = tag(
    user_derived(() => !get(disabled) ? $$props.bgChunks.filter((bgChunk) => datesEqual(bgChunk.date, $$props.date)) : []),
    "dayBgChunks"
  );
  let dayChunks = tag(
    user_derived(() => {
      let dayChunks2 = [];
      if (!get(disabled)) {
        for (let chunk of $$props.chunks) {
          if (datesEqual(chunk.date, $$props.date)) {
            dayChunks2.push(chunk);
          }
        }
      }
      return dayChunks2;
    }),
    "dayChunks"
  );
  user_pre_effect(() => {
    get(dayChunks);
    hiddenEvents.clear();
  });
  let moreLink = tag(
    user_derived(() => {
      let moreLink2 = "";
      if (!get(disabled) && hiddenEvents.size) {
        let text2 = "+" + hiddenEvents.size + " more";
        if ($moreLinkContent()) {
          moreLink2 = isFunction($moreLinkContent()) ? $moreLinkContent()({ num: hiddenEvents.size, text: text2 }) : $moreLinkContent();
        } else {
          moreLink2 = text2;
        }
      }
      return moreLink2;
    }),
    "moreLink"
  );
  onMount(() => {
    setPayload(get(el), () => ({
      allDay: true,
      date: $$props.date,
      resource: void 0,
      dayEl: get(el),
      disabled: get(disabled)
    }));
  });
  function showMore() {
    store_set(_popupDate, $$props.date);
  }
  let showPopup = tag(user_derived(() => $_popupDate() && datesEqual($$props.date, $_popupDate())), "showPopup");
  user_pre_effect(() => {
    get(dayChunks);
    $$props.longChunks;
    if (get(showPopup)) {
      tick().then(setPopupChunks);
    }
  });
  function setPopupChunks() {
    var _a;
    let nextDay = addDay(cloneDate($$props.date));
    let chunks = get(dayChunks).concat(((_a = $$props.longChunks[$$props.date.getTime()]) == null ? void 0 : _a.chunks) || []);
    store_set(_popupChunks, chunks.map((chunk) => assign2({}, chunk, createEventChunk(chunk.event, $$props.date, nextDay), { days: 1, dates: [$$props.date] })).sort((a, b) => a.top - b.top));
  }
  let showWeekNumber = tag(user_derived(() => $weekNumbers() && equals($$props.date.getUTCDay(), $firstDay() ? 1 : 0)), "showWeekNumber");
  let weekNumber = tag(
    user_derived(() => {
      let weekNumber2;
      if (get(showWeekNumber)) {
        let week = getWeekNumber($$props.date, $firstDay());
        if ($weekNumberContent()) {
          weekNumber2 = isFunction($weekNumberContent()) ? $weekNumberContent()({ date: toLocalDate($$props.date), week }) : $weekNumberContent();
        } else {
          weekNumber2 = "W" + String(week).padStart(2, "0");
        }
      }
      return weekNumber2;
    }),
    "weekNumber"
  );
  function reposition() {
    if (!get(disabled)) {
      runReposition(refs, get(dayChunks));
    }
  }
  var div = root6();
  div.__pointerdown = function(...$$args) {
    apply(() => {
      var _a;
      return (_a = $_interaction().action) == null ? void 0 : _a.select;
    }, this, $$args, Day, [119, 19]);
  };
  var div_1 = child(div);
  var time = child(div_1);
  action(time, ($$node, $$action_arg) => {
    var _a;
    return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
  }, () => $_intlDayCell().format($$props.date));
  var node = sibling(time, 2);
  {
    var consequent = ($$anchor2) => {
      var span = root_15();
      action(span, ($$node, $$action_arg) => {
        var _a;
        return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
      }, () => get(weekNumber));
      template_effect(() => set_class(span, 1, $theme().weekNumber));
      append($$anchor2, span);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(showWeekNumber)) $$render(consequent);
      }),
      "if",
      Day,
      126,
      8
    );
  }
  reset(div_1);
  var div_2 = sibling(div_1, 2);
  var node_1 = child(div_2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      validate_each_keys(() => get(dayBgChunks), (chunk) => chunk.event);
      add_svelte_meta(
        () => each(node_2, 17, () => get(dayBgChunks), (chunk) => chunk.event, ($$anchor3, chunk) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          add_svelte_meta(
            () => Event_default(node_3, {
              get chunk() {
                return get(chunk);
              }
            }),
            "component",
            Day,
            136,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_1);
        }),
        "each",
        Day,
        135,
        12
      );
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (!get(disabled)) $$render(consequent_1);
      }),
      "if",
      Day,
      134,
      8
    );
  }
  reset(div_2);
  var node_4 = sibling(div_2, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment_2 = root_42();
      var node_5 = first_child(fragment_2);
      {
        var consequent_2 = ($$anchor3) => {
          var div_3 = root_5();
          var node_6 = child(div_3);
          add_svelte_meta(
            () => Event_default(node_6, {
              get chunk() {
                return iChunks()[2];
              }
            }),
            "component",
            Day,
            144,
            16,
            { componentTag: "Event" }
          );
          reset(div_3);
          template_effect(() => set_class(div_3, 1, $theme().events));
          append($$anchor3, div_3);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if (iChunks()[2] && datesEqual(iChunks()[2].date, $$props.date)) $$render(consequent_2);
          }),
          "if",
          Day,
          142,
          8
        );
      }
      var node_7 = sibling(node_5, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var div_4 = root_62();
          var node_8 = child(div_4);
          add_svelte_meta(
            () => Event_default(node_8, {
              get chunk() {
                return iChunks()[0];
              }
            }),
            "component",
            Day,
            150,
            16,
            { componentTag: "Event" }
          );
          reset(div_4);
          template_effect(() => set_class(div_4, 1, `${$theme().events ?? ""} ${$theme().preview ?? ""}`));
          append($$anchor3, div_4);
        };
        add_svelte_meta(
          () => if_block(node_7, ($$render) => {
            if (iChunks()[0] && datesEqual(iChunks()[0].date, $$props.date)) $$render(consequent_3);
          }),
          "if",
          Day,
          148,
          8
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if (!get(disabled)) $$render(consequent_4);
      }),
      "if",
      Day,
      140,
      4
    );
  }
  var div_5 = sibling(node_4, 2);
  var node_9 = child(div_5);
  {
    var consequent_5 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_10 = first_child(fragment_3);
      validate_each_keys(() => get(dayChunks), (chunk) => chunk.event);
      add_svelte_meta(
        () => each(node_10, 19, () => get(dayChunks), (chunk) => chunk.event, ($$anchor3, chunk, i) => {
          var fragment_4 = comment();
          var node_11 = first_child(fragment_4);
          add_svelte_meta(
            () => bind_this(
              Event_default(node_11, {
                get chunk() {
                  return get(chunk);
                },
                get longChunks() {
                  return $$props.longChunks;
                },
                get dates() {
                  return $$props.dates;
                }
              }),
              ($$value, i2) => refs[i2] = $$value,
              (i2) => refs == null ? void 0 : refs[i2],
              () => [get(i)]
            ),
            "component",
            Day,
            158,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_4);
        }),
        "each",
        Day,
        156,
        12
      );
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node_9, ($$render) => {
        if (!get(disabled)) $$render(consequent_5);
      }),
      "if",
      Day,
      155,
      8
    );
  }
  reset(div_5);
  var node_12 = sibling(div_5, 2);
  {
    var consequent_6 = ($$anchor2) => {
      var fragment_5 = comment();
      var node_13 = first_child(fragment_5);
      add_svelte_meta(() => Popup_default(node_13, {}), "component", Day, 163, 8, { componentTag: "Popup" });
      append($$anchor2, fragment_5);
    };
    add_svelte_meta(
      () => if_block(node_12, ($$render) => {
        if (get(showPopup)) $$render(consequent_6);
      }),
      "if",
      Day,
      162,
      4
    );
  }
  var div_6 = sibling(node_12, 2);
  var node_14 = child(div_6);
  {
    var consequent_7 = ($$anchor2) => {
      var a_1 = root_102();
      var event_handler = user_derived(() => stopPropagation(showMore));
      a_1.__click = function(...$$args) {
        apply(() => get(event_handler), this, $$args, Day, [174, 25], true);
      };
      var event_handler_1 = user_derived(() => keyEnter(showMore));
      a_1.__keydown = function(...$$args) {
        apply(() => get(event_handler_1), this, $$args, Day, [175, 27], true);
      };
      var event_handler_2 = user_derived(stopPropagation);
      a_1.__pointerdown = function(...$$args) {
        apply(() => get(event_handler_2), this, $$args, Day, [176, 31], true, true);
      };
      action(a_1, ($$node, $$action_arg) => {
        var _a;
        return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
      }, () => get(moreLink));
      append($$anchor2, a_1);
    };
    add_svelte_meta(
      () => if_block(node_14, ($$render) => {
        if (!get(disabled) && hiddenEvents.size) $$render(consequent_7);
      }),
      "if",
      Day,
      166,
      8
    );
  }
  reset(div_6);
  reset(div);
  bind_this(div, ($$value) => set(el, $$value), () => get(el));
  template_effect(
    ($0, $1) => {
      set_class(div, 1, `${$theme().day ?? ""} ${$0 ?? ""}${get(isToday) ? " " + $theme().today : ""}${get(otherMonth) ? " " + $theme().otherMonth : ""}${get(highlight) ? " " + $theme().highlight : ""}${get(disabled) ? " " + $theme().disabled : ""}`);
      set_class(div_1, 1, $theme().dayHead);
      set_attribute(time, "datetime", $1);
      set_class(div_2, 1, $theme().bgEvents);
      set_class(div_5, 1, $theme().events);
      set_class(div_6, 1, $theme().dayFoot);
    },
    [
      () => {
        var _a;
        return (_a = $theme().weekdays) == null ? void 0 : _a[$$props.date.getUTCDay()];
      },
      () => toISOString($$props.date, 10)
    ]
  );
  append($$anchor, div);
  var $$pop = pop({
    get reposition() {
      return reposition;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Day = hmr(Day, () => Day[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Day[HMR].source;
    set(Day[HMR].source, module.default[HMR].original);
  });
}
var Day_default = Day;
delegate(["pointerdown", "click", "keydown"]);

// node_modules/@event-calendar/core/src/plugins/day-grid/Week.svelte
Week[FILENAME] = "node_modules/@event-calendar/core/src/plugins/day-grid/Week.svelte";
var root7 = add_locations(from_html(`<div role="row"></div>`), Week[FILENAME], [[55, 0]]);
function Week($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Week);
  const [$$stores, $$cleanup] = setup_stores();
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $_filteredEvents = () => (validate_store(_filteredEvents, "_filteredEvents"), store_get(_filteredEvents, "$_filteredEvents", $$stores));
  const $filterEventsWithResources = () => (validate_store(filterEventsWithResources, "filterEventsWithResources"), store_get(filterEventsWithResources, "$filterEventsWithResources", $$stores));
  const $resources = () => (validate_store(resources, "resources"), store_get(resources, "$resources", $$stores));
  const $hiddenDays = () => (validate_store(hiddenDays, "hiddenDays"), store_get(hiddenDays, "$hiddenDays", $$stores));
  const $_iEvents = () => (validate_store(_iEvents, "_iEvents"), store_get(_iEvents, "$_iEvents", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  let {
    _filteredEvents,
    _iEvents,
    resources,
    filterEventsWithResources,
    hiddenDays,
    theme,
    validRange
  } = getContext("state");
  let refs = [];
  let start = tag(user_derived(() => limitToRange($$props.dates[0], $validRange())), "start");
  let end = tag(user_derived(() => addDay(cloneDate(limitToRange($$props.dates.at(-1), $validRange())))), "end");
  let $$d = tag(
    user_derived(() => {
      let chunks2 = [];
      let bgChunks2 = [];
      for (let event2 of $_filteredEvents()) {
        if (eventIntersects(event2, get(start), get(end), $filterEventsWithResources() ? $resources() : void 0)) {
          let chunk = createEventChunk(event2, get(start), get(end));
          if (bgEvent(event2.display)) {
            if (event2.allDay) {
              bgChunks2.push(chunk);
            }
          } else {
            chunks2.push(chunk);
          }
        }
      }
      prepareEventChunks(bgChunks2, $hiddenDays());
      let longChunks2 = prepareEventChunks(chunks2, $hiddenDays());
      return [chunks2, bgChunks2, longChunks2];
    }),
    "[$derived iterable]"
  ), $$array = tag(user_derived(() => to_array(get($$d), 3)), "[$derived iterable]"), chunks = tag(user_derived(() => get($$array)[0]), "chunks"), bgChunks = tag(user_derived(() => get($$array)[1]), "bgChunks"), longChunks = tag(user_derived(() => get($$array)[2]), "longChunks");
  let iChunks = tag(
    user_derived(() => $_iEvents().map((event2) => {
      let chunk;
      if (event2 && eventIntersects(event2, get(start), get(end))) {
        chunk = createEventChunk(event2, get(start), get(end));
        prepareEventChunks([chunk], $hiddenDays());
      } else {
        chunk = null;
      }
      return chunk;
    })),
    "iChunks"
  );
  function reposition() {
    runReposition(refs, $$props.dates);
  }
  var div = root7();
  add_svelte_meta(
    () => each(div, 21, () => $$props.dates, index, ($$anchor2, date, i) => {
      var fragment = comment();
      var node = first_child(fragment);
      add_svelte_meta(
        () => bind_this(
          Day_default(node, {
            get date() {
              return get(date);
            },
            get chunks() {
              return get(chunks);
            },
            get bgChunks() {
              return get(bgChunks);
            },
            get longChunks() {
              return get(longChunks);
            },
            get iChunks() {
              return get(iChunks);
            },
            get dates() {
              return $$props.dates;
            }
          }),
          ($$value, i2) => refs[i2] = $$value,
          (i2) => refs == null ? void 0 : refs[i2],
          () => [i]
        ),
        "component",
        Week,
        58,
        8,
        { componentTag: "Day" }
      );
      append($$anchor2, fragment);
    }),
    "each",
    Week,
    56,
    4
  );
  reset(div);
  template_effect(() => set_class(div, 1, $theme().days));
  append($$anchor, div);
  var $$pop = pop({
    get reposition() {
      return reposition;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Week = hmr(Week, () => Week[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Week[HMR].source;
    set(Week[HMR].source, module.default[HMR].original);
  });
}
var Week_default = Week;

// node_modules/@event-calendar/core/src/plugins/day-grid/Body.svelte
Body[FILENAME] = "node_modules/@event-calendar/core/src/plugins/day-grid/Body.svelte";
var root8 = add_locations(from_html(`<div><div></div></div>`), Body[FILENAME], [[41, 0, [[46, 4]]]]);
function Body($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Body);
  const [$$stores, $$cleanup] = setup_stores();
  const $hiddenDays = () => (validate_store(hiddenDays, "hiddenDays"), store_get(hiddenDays, "$hiddenDays", $$stores));
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $dayMaxEvents = () => (validate_store(dayMaxEvents, "dayMaxEvents"), store_get(dayMaxEvents, "$dayMaxEvents", $$stores));
  const $_hiddenEvents = () => (validate_store(_hiddenEvents, "_hiddenEvents"), store_get(_hiddenEvents, "$_hiddenEvents", $$stores));
  const $_filteredEvents = () => (validate_store(_filteredEvents, "_filteredEvents"), store_get(_filteredEvents, "$_filteredEvents", $$stores));
  const $_bodyEl = () => (validate_store(_bodyEl, "_bodyEl"), store_get(_bodyEl, "$_bodyEl", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_recheckScrollable = () => (validate_store(_recheckScrollable, "_recheckScrollable"), store_get(_recheckScrollable, "$_recheckScrollable", $$stores));
  let {
    _bodyEl,
    _viewDates,
    _filteredEvents,
    _hiddenEvents,
    _recheckScrollable,
    dayMaxEvents,
    hiddenDays,
    theme
  } = getContext("state");
  let refs = [];
  let days2 = tag(user_derived(() => 7 - $hiddenDays().length), "days");
  let weeks = tag(
    user_derived(() => {
      let weeks2 = [];
      for (let i = 0; i < $_viewDates().length / get(days2); ++i) {
        let dates = [];
        for (let j = 0; j < get(days2); ++j) {
          dates.push($_viewDates()[i * get(days2) + j]);
        }
        weeks2.push(dates);
      }
      return weeks2;
    }),
    "weeks"
  );
  user_pre_effect(() => {
    get(weeks);
    $dayMaxEvents();
    store_set(_hiddenEvents, {});
  });
  function reposition() {
    runReposition(refs, get(weeks));
  }
  user_effect(() => {
    $_filteredEvents();
    $_hiddenEvents();
    $dayMaxEvents();
    untrack(reposition);
  });
  var div = root8();
  event("resize", $window, reposition);
  var div_1 = child(div);
  add_svelte_meta(
    () => each(div_1, 21, () => get(weeks), index, ($$anchor2, dates, i) => {
      var fragment = comment();
      var node = first_child(fragment);
      add_svelte_meta(
        () => bind_this(
          Week_default(node, {
            get dates() {
              return get(dates);
            }
          }),
          ($$value, i2) => refs[i2] = $$value,
          (i2) => refs == null ? void 0 : refs[i2],
          () => [i]
        ),
        "component",
        Body,
        49,
        12,
        { componentTag: "Week" }
      );
      append($$anchor2, fragment);
    }),
    "each",
    Body,
    47,
    8
  );
  reset(div_1);
  reset(div);
  bind_this(div, ($$value) => store_set(_bodyEl, $$value), () => $_bodyEl());
  action(div, ($$node, $$action_arg) => {
    var _a;
    return (_a = observeResize) == null ? void 0 : _a($$node, $$action_arg);
  }, () => () => store_set(_recheckScrollable, true));
  template_effect(() => {
    set_class(div, 1, `${$theme().body ?? ""}${strict_equals($dayMaxEvents(), true) ? " " + $theme().uniform : ""}`);
    set_class(div_1, 1, $theme().content);
  });
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Body = hmr(Body, () => Body[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Body[HMR].source;
    set(Body[HMR].source, module.default[HMR].original);
  });
}
var Body_default = Body;

// node_modules/@event-calendar/core/src/plugins/day-grid/View.svelte
View[FILENAME] = "node_modules/@event-calendar/core/src/plugins/day-grid/View.svelte";
var root9 = add_locations(from_html(`<!> <!>`, 1), View[FILENAME], []);
function View($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, View);
  var fragment = root9();
  var node = first_child(fragment);
  add_svelte_meta(() => Header_default(node, {}), "component", View, 6, 0, { componentTag: "Header" });
  var node_1 = sibling(node, 2);
  add_svelte_meta(() => Body_default(node_1, {}), "component", View, 7, 0, { componentTag: "Body" });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  View = hmr(View, () => View[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = View[HMR].source;
    set(View[HMR].source, module.default[HMR].original);
  });
}
var View_default = View;

// node_modules/@event-calendar/core/src/plugins/day-grid/index.js
var day_grid_default = {
  createOptions(options) {
    options.dayMaxEvents = false;
    options.dayCellFormat = { day: "numeric" };
    options.dayPopoverFormat = { month: "long", day: "numeric", year: "numeric" };
    options.moreLinkContent = void 0;
    options.weekNumbers = false;
    options.weekNumberContent = void 0;
    options.buttonText.dayGridMonth = "month";
    options.buttonText.close = "Close";
    options.theme.uniform = "ec-uniform";
    options.theme.dayFoot = "ec-day-foot";
    options.theme.popup = "ec-popup";
    options.theme.weekNumber = "ec-week-number";
    options.view = "dayGridMonth";
    options.views.dayGridMonth = {
      buttonText: btnTextMonth,
      component: View_default,
      dayHeaderFormat: { weekday: "short" },
      dayHeaderAriaLabelFormat: { weekday: "long" },
      displayEventEnd: false,
      duration: { months: 1 },
      theme: themeView("ec-day-grid ec-month-view"),
      titleFormat: { year: "numeric", month: "long" }
    };
  },
  createStores(state2) {
    state2._days = days(state2);
    state2._intlDayCell = intl(state2.locale, state2.dayCellFormat);
    state2._intlDayPopover = intl(state2.locale, state2.dayPopoverFormat);
    state2._hiddenEvents = writable({});
    state2._popupDate = writable(null);
    state2._popupChunks = writable([]);
  }
};

// node_modules/@event-calendar/core/src/plugins/interaction/lib/events.js
function eventDraggable(event2, $eventStartEditable, $editable) {
  return event2.startEditable ?? $eventStartEditable ?? event2.editable ?? $editable;
}
function eventResizable(event2, $eventDurationEditable, $editable) {
  return event2.durationEditable ?? $eventDurationEditable ?? event2.editable ?? $editable;
}

// node_modules/@event-calendar/core/src/plugins/interaction/lib/utils.js
var busy = false;
function animate(fn) {
  if (!busy) {
    busy = true;
    window.requestAnimationFrame(() => {
      fn();
      busy = false;
    });
  }
}
function limit(value, minLimit, maxLimit) {
  return max(minLimit, min(maxLimit, value));
}

// node_modules/@event-calendar/core/src/plugins/interaction/Action.svelte
Action[FILENAME] = "node_modules/@event-calendar/core/src/plugins/interaction/Action.svelte";
function Action($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Action);
  const [$$stores, $$cleanup] = setup_stores();
  const $eventStartEditable = () => (validate_store(eventStartEditable, "eventStartEditable"), store_get(eventStartEditable, "$eventStartEditable", $$stores));
  const $editable = () => (validate_store(editable, "editable"), store_get(editable, "$editable", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $selectable = () => (validate_store(selectable, "selectable"), store_get(selectable, "$selectable", $$stores));
  const $view = () => (validate_store(view2, "view"), store_get(view2, "$view", $$stores));
  const $_bodyEl = () => (validate_store(_bodyEl, "_bodyEl"), store_get(_bodyEl, "$_bodyEl", $$stores));
  const $datesAboveResources = () => (validate_store(datesAboveResources, "datesAboveResources"), store_get(datesAboveResources, "$datesAboveResources", $$stores));
  const $selectLongPressDelay = () => (validate_store(selectLongPressDelay, "selectLongPressDelay"), store_get(selectLongPressDelay, "$selectLongPressDelay", $$stores));
  const $eventLongPressDelay = () => (validate_store(eventLongPressDelay, "eventLongPressDelay"), store_get(eventLongPressDelay, "$eventLongPressDelay", $$stores));
  const $longPressDelay = () => (validate_store(longPressDelay, "longPressDelay"), store_get(longPressDelay, "$longPressDelay", $$stores));
  const $selectMinDistance = () => (validate_store(selectMinDistance, "selectMinDistance"), store_get(selectMinDistance, "$selectMinDistance", $$stores));
  const $eventDragMinDistance = () => (validate_store(eventDragMinDistance, "eventDragMinDistance"), store_get(eventDragMinDistance, "$eventDragMinDistance", $$stores));
  const $_iClass = () => (validate_store(_iClass, "_iClass"), store_get(_iClass, "$_iClass", $$stores));
  const $_iEvents = () => (validate_store(_iEvents, "_iEvents"), store_get(_iEvents, "$_iEvents", $$stores));
  const $eventResizeStart = () => (validate_store(eventResizeStart, "eventResizeStart"), store_get(eventResizeStart, "$eventResizeStart", $$stores));
  const $eventDragStart = () => (validate_store(eventDragStart, "eventDragStart"), store_get(eventDragStart, "$eventDragStart", $$stores));
  const $resizeConstraint = () => (validate_store(resizeConstraint, "resizeConstraint"), store_get(resizeConstraint, "$resizeConstraint", $$stores));
  const $selectConstraint = () => (validate_store(selectConstraint, "selectConstraint"), store_get(selectConstraint, "$selectConstraint", $$stores));
  const $dragConstraint = () => (validate_store(dragConstraint, "dragConstraint"), store_get(dragConstraint, "$dragConstraint", $$stores));
  const $dragScroll = () => (validate_store(dragScroll, "dragScroll"), store_get(dragScroll, "$dragScroll", $$stores));
  const $slotHeight = () => (validate_store(slotHeight, "slotHeight"), store_get(slotHeight, "$slotHeight", $$stores));
  const $slotWidth = () => (validate_store(slotWidth, "slotWidth"), store_get(slotWidth, "$slotWidth", $$stores));
  const $unselectAuto = () => (validate_store(unselectAuto, "unselectAuto"), store_get(unselectAuto, "$unselectAuto", $$stores));
  const $unselectCancel = () => (validate_store(unselectCancel, "unselectCancel"), store_get(unselectCancel, "$unselectCancel", $$stores));
  const $selectFn = () => (validate_store(selectFn, "selectFn"), store_get(selectFn, "$selectFn", $$stores));
  const $eventResizeStop = () => (validate_store(eventResizeStop, "eventResizeStop"), store_get(eventResizeStop, "$eventResizeStop", $$stores));
  const $eventDragStop = () => (validate_store(eventDragStop, "eventDragStop"), store_get(eventDragStop, "$eventDragStop", $$stores));
  const $_view = () => (validate_store(_view, "_view"), store_get(_view, "$_view", $$stores));
  const $eventResize = () => (validate_store(eventResize, "eventResize"), store_get(eventResize, "$eventResize", $$stores));
  const $eventDrop = () => (validate_store(eventDrop, "eventDrop"), store_get(eventDrop, "$eventDrop", $$stores));
  const $dateClick = () => (validate_store(dateClick, "dateClick"), store_get(dateClick, "$dateClick", $$stores));
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $_dayGrid = () => (validate_store(_dayGrid, "_dayGrid"), store_get(_dayGrid, "$_dayGrid", $$stores));
  const $_events = () => (validate_store(_events, "_events"), store_get(_events, "$_events", $$stores));
  const $selectBackgroundColor = () => (validate_store(selectBackgroundColor, "selectBackgroundColor"), store_get(selectBackgroundColor, "$selectBackgroundColor", $$stores));
  const $unselectFn = () => (validate_store(unselectFn, "unselectFn"), store_get(unselectFn, "$unselectFn", $$stores));
  let {
    _iEvents,
    _iClass,
    _events,
    _view,
    _dayGrid,
    _bodyEl,
    datesAboveResources,
    dateClick,
    dragConstraint,
    dragScroll,
    editable,
    eventStartEditable,
    eventDragMinDistance,
    eventDragStart,
    eventDragStop,
    eventDrop,
    eventLongPressDelay,
    eventResizeStart,
    eventResizeStop,
    eventResize,
    longPressDelay,
    resizeConstraint,
    selectable,
    select: selectFn,
    selectBackgroundColor,
    selectConstraint,
    selectLongPressDelay,
    selectMinDistance,
    slotDuration,
    slotHeight,
    slotWidth,
    unselect: unselectFn,
    unselectAuto,
    unselectCancel,
    validRange,
    view: view2
  } = getContext("state");
  const ACTION_DRAG = 1;
  const ACTION_RESIZE_END = 2;
  const ACTION_RESIZE_START = 3;
  const ACTION_SELECT = 4;
  const ACTION_CLICK = 5;
  const ACTION_NO_ACTION = 6;
  let action2;
  let interacting;
  let event2;
  let display;
  let date, newDate;
  let resource, newResource;
  let fromX, fromY;
  let toX, toY;
  let bodyEl, bodyRect, clipEl, clipRect;
  let delta;
  let allDay;
  let iClass;
  let minResize;
  let selectStep;
  let selected;
  let noDateClick;
  let timer = mutable_source();
  let viewport;
  let margin;
  let extraDuration;
  function draggable(event3) {
    return eventDraggable(event3, $eventStartEditable(), $editable());
  }
  function drag(eventToDrag, jsEvent, forceDate, forceMargin) {
    if (!action2) {
      action2 = validJsEvent(jsEvent) ? ACTION_DRAG : ACTION_NO_ACTION;
      if (complexAction()) {
        event2 = eventToDrag;
        common(jsEvent);
        if (forceDate) {
          date = forceDate;
        }
        if (forceMargin) {
          margin = forceMargin;
        }
        iClass = "dragging";
        move(jsEvent);
      }
    }
  }
  function resize(eventToResize, jsEvent, start, axis, forceDate, forceMargin, zeroDuration) {
    if (!action2) {
      action2 = validJsEvent(jsEvent) ? start ? ACTION_RESIZE_START : ACTION_RESIZE_END : ACTION_NO_ACTION;
      if (complexAction()) {
        event2 = eventToResize;
        common(jsEvent);
        if (forceDate) {
          date = forceDate;
        }
        if (forceMargin) {
          margin = forceMargin;
        }
        iClass = strict_equals(axis, "x") ? "resizingX" : "resizingY";
        if (resizingStart()) {
          minResize = cloneDate(event2.end);
          if (allDay) {
            copyTime(minResize, event2.start);
            if (minResize >= event2.end) {
              subtractDay(minResize);
            }
          } else {
            subtractDuration(minResize, $slotDuration());
            if (minResize < event2.start) {
              minResize = event2.start;
            }
            date = event2.start;
          }
        } else {
          minResize = cloneDate(event2.start);
          if (allDay) {
            copyTime(minResize, event2.end);
            if (minResize <= event2.start && !zeroDuration) {
              addDay(minResize);
            }
          } else {
            addDuration(minResize, $slotDuration());
            if (minResize > event2.end) {
              minResize = event2.end;
            }
            date = event2.end;
            if (!zeroDuration) {
              date = subtractDuration(cloneDate(date), $slotDuration());
            }
          }
          if (zeroDuration && !allDay) {
            extraDuration = $slotDuration();
          }
        }
        move(jsEvent);
      }
    }
  }
  function select(jsEvent) {
    if (!action2) {
      action2 = validJsEvent(jsEvent) ? $selectable() && !listView($view()) ? ACTION_SELECT : ACTION_CLICK : ACTION_NO_ACTION;
      if (complexAction()) {
        common(jsEvent);
        iClass = "selecting";
        selectStep = allDay ? createDuration({ day: 1 }) : $slotDuration();
        event2 = {
          allDay,
          start: date,
          end: addDuration(cloneDate(date), selectStep),
          resourceIds: resource ? [resource.id] : []
        };
        move(jsEvent);
      }
    }
  }
  function noAction() {
    if (!action2) {
      action2 = ACTION_NO_ACTION;
    }
  }
  function common(jsEvent) {
    window.getSelection().removeAllRanges();
    fromX = toX = jsEvent.clientX;
    fromY = toY = jsEvent.clientY;
    let dayEl = getElementWithPayload(toX, toY);
    ({ allDay, date, resource } = getPayload(dayEl)(toX, toY));
    if (timelineView($view())) {
      bodyEl = clipEl = $_bodyEl();
    } else {
      bodyEl = ancestor(dayEl, resource ? 4 : 3);
      clipEl = ancestor(dayEl, resource && (dragging() || $datesAboveResources()) ? 2 : 1);
    }
    calcViewport();
    if (strict_equals(jsEvent.pointerType, "mouse", false)) {
      set(timer, setTimeout(
        () => {
          if (action2) {
            interacting = true;
            move(jsEvent);
          }
        },
        (selecting() ? $selectLongPressDelay() : $eventLongPressDelay()) ?? $longPressDelay()
      ));
    }
  }
  function move(jsEvent) {
    if (interacting || jsEvent && strict_equals(jsEvent.pointerType, "mouse") && distance() >= (selecting() ? $selectMinDistance() : $eventDragMinDistance())) {
      interacting = true;
      unselect(jsEvent);
      store_set(_iClass, iClass);
      if (!$_iEvents()[0]) {
        if (selecting()) {
          createIEventSelect();
        } else {
          createIEvent(jsEvent, resizing() ? $eventResizeStart() : $eventDragStart());
        }
      }
      let payload = findPayload(findDayEl());
      if (payload) {
        let newAllDay;
        ({ allDay: newAllDay, date: newDate, resource: newResource } = payload);
        if (strict_equals(newAllDay, allDay)) {
          let candidate = copyIEventData({}, $_iEvents()[0]);
          let constraintFn = $resizeConstraint();
          delta = createDuration((newDate - date) / 1e3);
          if (resizingStart()) {
            candidate.start = addDuration(cloneDate(event2.start), delta);
            if (candidate.start > minResize) {
              candidate.start = minResize;
              delta = createDuration((minResize - event2.start) / 1e3);
            }
          } else {
            candidate.end = addDuration(cloneDate(event2.end), delta);
            if (extraDuration) {
              addDuration(candidate.end, extraDuration);
            }
            if (resizing()) {
              if (candidate.end < minResize) {
                candidate.end = minResize;
                delta = createDuration((minResize - event2.end) / 1e3);
              }
            } else if (selecting()) {
              if (candidate.end < event2.end) {
                candidate.start = subtractDuration(candidate.end, selectStep);
                candidate.end = event2.end;
              } else {
                candidate.start = event2.start;
              }
              constraintFn = $selectConstraint();
            } else {
              candidate.start = addDuration(cloneDate(event2.start), delta);
              if (resource) {
                candidate.resourceIds = event2.resourceIds.filter((id) => strict_equals(id, resource.id, false));
                candidate.resourceIds.push(newResource.id);
              }
              constraintFn = $dragConstraint();
            }
          }
          do {
            if (strict_equals(constraintFn, void 0, false)) {
              candidate = copyIEventData(cloneEvent(event2), candidate);
              let result = constraintFn(selecting() ? createSelectCallbackInfo(candidate, jsEvent) : createCallbackInfo(candidate, event2, jsEvent));
              if (strict_equals(result, false)) {
                store_mutate(_iEvents, untrack($_iEvents)[0] = copyIEventData($_iEvents()[0], event2), untrack($_iEvents));
                break;
              }
            }
            store_mutate(_iEvents, untrack($_iEvents)[0] = copyIEventData($_iEvents()[0], candidate), untrack($_iEvents));
          } while (0);
        }
      }
    }
    if ($dragScroll()) {
      let thresholdY = $slotHeight() * 2;
      let thresholdX = $slotWidth();
      animate(() => {
        if (bodyEl) {
          if (toY < thresholdY) {
            window.scrollBy(0, max(-10, (toY - thresholdY) / 3));
          }
          if (toY < bodyRect.top + thresholdY) {
            bodyEl.scrollTop += max(-10, (toY - bodyRect.top - thresholdY) / 3);
          }
          if (toY > window.innerHeight - thresholdY) {
            window.scrollBy(0, min(10, (toY - window.innerHeight + thresholdY) / 3));
          }
          if (toY > bodyRect.bottom - thresholdY) {
            bodyEl.scrollTop += min(10, (toY - bodyRect.bottom + thresholdY) / 3);
          }
          if (timelineView($view())) {
            if (toX < bodyRect.left + thresholdX) {
              bodyEl.scrollLeft += max(-10, (toX - bodyRect.left - thresholdX) / 3);
            }
            if (toX > bodyRect.right - thresholdX) {
              bodyEl.scrollLeft += min(10, (toX - bodyRect.right + thresholdX) / 3);
            }
          }
        }
      });
    }
  }
  function handleScroll() {
    if (complexAction()) {
      calcViewport();
      move();
    }
  }
  function handlePointerMove(jsEvent) {
    if (complexAction() && jsEvent.isPrimary) {
      toX = jsEvent.clientX;
      toY = jsEvent.clientY;
      move(jsEvent);
    }
  }
  function handlePointerUp(jsEvent) {
    if (selected && $unselectAuto() && !($unselectCancel() && jsEvent.target.closest($unselectCancel()))) {
      unselect(jsEvent);
    }
    if (action2 && jsEvent.isPrimary) {
      if (interacting) {
        if (selecting()) {
          selected = true;
          if (isFunction($selectFn())) {
            let info = createSelectCallbackInfo($_iEvents()[0], jsEvent);
            $selectFn()(info);
          }
        } else {
          event2.display = display;
          let callback = resizing() ? $eventResizeStop() : $eventDragStop();
          if (isFunction(callback)) {
            callback({
              event: toEventWithLocalDates(event2),
              jsEvent,
              view: toViewWithLocalDates($_view())
            });
          }
          let oldEvent = cloneEvent(event2);
          updateEvent(event2, $_iEvents()[0]);
          destroyIEvent();
          callback = resizing() ? $eventResize() : $eventDrop();
          if (isFunction(callback)) {
            let eventRef = event2;
            let info = createCallbackInfo(event2, oldEvent, jsEvent);
            callback(assign2(info, {
              revert() {
                updateEvent(eventRef, oldEvent);
              }
            }));
          }
        }
      } else {
        if (clicking() || selecting()) {
          if (isFunction($dateClick()) && !noDateClick) {
            toX = jsEvent.clientX;
            toY = jsEvent.clientY;
            let dayEl = getElementWithPayload(toX, toY);
            if (dayEl) {
              let { allDay: allDay2, date: date2, resource: resource2 } = getPayload(dayEl)(toX, toY);
              $dateClick()({
                allDay: allDay2,
                date: toLocalDate(date2),
                dateStr: toISOString(date2),
                dayEl,
                jsEvent,
                view: toViewWithLocalDates($_view()),
                resource: resource2
              });
            }
          }
        }
      }
      interacting = false;
      action2 = fromX = fromY = toX = toY = event2 = display = date = newDate = resource = newResource = delta = extraDuration = allDay = store_set(_iClass, minResize = selectStep = margin = void 0);
      bodyEl = clipEl = bodyRect = clipRect = void 0;
      if (get(timer)) {
        clearTimeout(get(timer));
        set(timer, void 0);
      }
    }
    noDateClick = false;
  }
  function findDayEl() {
    return getElementWithPayload(limit(toX, viewport[0], viewport[1]), limit(toY, viewport[2], viewport[3]));
  }
  function findPayload(dayEl) {
    if (dayEl) {
      let payload = getPayload(dayEl)(toX, toY);
      if (payload.disabled) {
        if (!$validRange().end || payload.date < $validRange().end) {
          return findPayload(dayEl.nextElementSibling);
        }
        if (!$validRange().start || payload.date > $validRange().start) {
          return findPayload(dayEl.previousElementSibling);
        }
      } else {
        return payload;
      }
    }
    return null;
  }
  function calcViewport() {
    bodyRect = rect(bodyEl);
    clipRect = rect(clipEl);
    viewport = [
      max(0, clipRect.left + (timelineView($view()) ? 1 : $_dayGrid() ? 0 : 8)),
      // left
      min(document.documentElement.clientWidth, clipRect.left + clipEl.clientWidth) - 2,
      // right
      max(0, bodyRect.top),
      // top
      min(document.documentElement.clientHeight, bodyRect.top + bodyEl.clientHeight) - 2
      // bottom
    ];
  }
  function createIEvent(jsEvent, callback) {
    if (isFunction(callback)) {
      callback({
        event: toEventWithLocalDates(event2),
        jsEvent,
        view: toViewWithLocalDates($_view())
      });
    }
    display = event2.display;
    event2.display = "preview";
    store_mutate(_iEvents, untrack($_iEvents)[0] = cloneEvent(event2), untrack($_iEvents));
    if (strict_equals(margin, void 0, false)) {
      store_mutate(_iEvents, untrack($_iEvents)[0]._margin = margin, untrack($_iEvents));
    }
    if (extraDuration) {
      addDuration($_iEvents()[0].end, extraDuration);
    }
    event2.display = "ghost";
    store_set(_events, $_events());
  }
  function createIEventSelect() {
    store_mutate(
      _iEvents,
      untrack($_iEvents)[0] = {
        id: "{select}",
        allDay: event2.allDay,
        start: event2.start,
        title: "",
        display: "preview",
        extendedProps: {},
        backgroundColor: $selectBackgroundColor(),
        resourceIds: event2.resourceIds,
        classNames: [],
        styles: []
      },
      untrack($_iEvents)
    );
  }
  function destroyIEvent() {
    store_mutate(_iEvents, untrack($_iEvents)[0] = null, untrack($_iEvents));
  }
  function copyIEventData(target, source) {
    target.start = source.start;
    target.end = source.end;
    target.resourceIds = source.resourceIds;
    return target;
  }
  function updateEvent(target, source) {
    copyIEventData(target, source);
    store_set(_events, $_events());
  }
  function createSelectCallbackInfo(event3, jsEvent) {
    let { start, end } = toEventWithLocalDates(event3);
    return {
      start,
      end,
      startStr: toISOString(event3.start),
      endStr: toISOString(event3.end),
      allDay,
      view: toViewWithLocalDates($_view()),
      resource,
      jsEvent
    };
  }
  function createCallbackInfo(event3, oldEvent, jsEvent) {
    let info;
    if (resizing()) {
      info = resizingStart() ? { startDelta: delta, endDelta: createDuration(0) } : { startDelta: createDuration(0), endDelta: delta };
    } else {
      info = {
        delta,
        oldResource: strict_equals(resource, newResource, false) ? resource : void 0,
        newResource: strict_equals(resource, newResource, false) ? newResource : void 0
      };
    }
    assign2(info, {
      event: toEventWithLocalDates(event3),
      oldEvent: toEventWithLocalDates(oldEvent),
      view: toViewWithLocalDates($_view()),
      jsEvent
    });
    return info;
  }
  function distance() {
    return Math.sqrt(Math.pow(toX - fromX, 2) + Math.pow(toY - fromY, 2));
  }
  function dragging() {
    return strict_equals(action2, ACTION_DRAG);
  }
  function resizing() {
    return strict_equals(action2, ACTION_RESIZE_END) || resizingStart();
  }
  function resizingStart() {
    return strict_equals(action2, ACTION_RESIZE_START);
  }
  function clicking() {
    return strict_equals(action2, ACTION_CLICK);
  }
  function selecting() {
    return strict_equals(action2, ACTION_SELECT);
  }
  function complexAction() {
    return action2 && action2 < ACTION_CLICK;
  }
  function validJsEvent(jsEvent) {
    return jsEvent.isPrimary && (strict_equals(jsEvent.pointerType, "mouse", false) || jsEvent.buttons & 1);
  }
  function unselect(jsEvent) {
    if (selected) {
      selected = false;
      destroyIEvent();
      if (isFunction($unselectFn())) {
        $unselectFn()({ jsEvent, view: toViewWithLocalDates($_view()) });
      }
    }
  }
  function noClick() {
    noDateClick = true;
  }
  _view.subscribe(unselect);
  function handleTouchStart(jsEvent) {
    if (complexAction()) {
      let target = jsEvent.target;
      let stops = [];
      let stop = () => runAll(stops);
      stops.push(listen(window, "touchmove", noop2, { passive: false }));
      stops.push(listen(target, "touchmove", createPreventDefaultHandler(() => interacting)));
      stops.push(listen(target, "touchend", stop));
      stops.push(listen(target, "touchcancel", stop));
    }
  }
  function createPreventDefaultHandler(condition) {
    return (jsEvent) => {
      if (condition()) {
        jsEvent.preventDefault();
      }
    };
  }
  init();
  event("pointermove", $window, handlePointerMove);
  event("pointerup", $window, handlePointerUp);
  event("pointercancel", $window, handlePointerUp);
  event("scroll", $window, handleScroll);
  var event_handler = user_derived(() => createPreventDefaultHandler(complexAction));
  event("selectstart", $window, function(...$$args) {
    apply(() => get(event_handler), this, $$args, Action, [606, 19], true);
  });
  var event_handler_1 = user_derived(() => createPreventDefaultHandler(() => get(timer)));
  event("contextmenu", $window, function(...$$args) {
    apply(() => get(event_handler_1), this, $$args, Action, [607, 19], true);
  });
  event("touchstart", $window, handleTouchStart, void 0, true);
  bind_prop($$props, "draggable", draggable);
  bind_prop($$props, "drag", drag);
  bind_prop($$props, "resize", resize);
  bind_prop($$props, "select", select);
  bind_prop($$props, "noAction", noAction);
  bind_prop($$props, "handleScroll", handleScroll);
  bind_prop($$props, "unselect", unselect);
  bind_prop($$props, "noClick", noClick);
  var $$pop = pop({
    get draggable() {
      return draggable;
    },
    get drag() {
      return drag;
    },
    get resize() {
      return resize;
    },
    get select() {
      return select;
    },
    get noAction() {
      return noAction;
    },
    get handleScroll() {
      return handleScroll;
    },
    get unselect() {
      return unselect;
    },
    get noClick() {
      return noClick;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Action = hmr(Action, () => Action[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Action[HMR].source;
    set(Action[HMR].source, module.default[HMR].original);
  });
}
var Action_default = Action;

// node_modules/@event-calendar/core/src/plugins/interaction/Pointer.svelte
Pointer[FILENAME] = "node_modules/@event-calendar/core/src/plugins/interaction/Pointer.svelte";
function Pointer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Pointer);
  const [$$stores, $$cleanup] = setup_stores();
  const $_iEvents = () => (validate_store(_iEvents, "_iEvents"), store_get(_iEvents, "$_iEvents", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  let { _iEvents, slotDuration } = getContext("state");
  let x = 0, y = 0;
  user_effect(() => {
    if ($_iEvents()[0]) {
      removePointerEvent();
    }
  });
  function move() {
    let dayEl = getElementWithPayload(x, y);
    if (dayEl) {
      let { allDay, date, resource, disabled } = getPayload(dayEl)(x, y);
      if (!disabled) {
        let idx = allDay ? 2 : 1;
        if (!$_iEvents()[idx]) {
          createPointerEvent(idx);
        }
        store_mutate(_iEvents, untrack($_iEvents)[idx].start = date, untrack($_iEvents));
        store_mutate(_iEvents, untrack($_iEvents)[idx].end = addDuration(cloneDate(date), $slotDuration()), untrack($_iEvents));
        store_mutate(_iEvents, untrack($_iEvents)[idx].resourceIds = resource ? [resource.id] : [], untrack($_iEvents));
        return;
      }
    }
    removePointerEvent();
  }
  function handleScroll() {
    move();
  }
  function handlePointerMove(jsEvent) {
    if (validEvent(jsEvent)) {
      x = jsEvent.clientX;
      y = jsEvent.clientY;
      move();
    }
  }
  function createPointerEvent(idx) {
    store_mutate(
      _iEvents,
      untrack($_iEvents)[idx] = {
        id: "{pointer}",
        title: "",
        display: "pointer",
        extendedProps: {},
        backgroundColor: "transparent",
        classNames: [],
        styles: []
      },
      untrack($_iEvents)
    );
  }
  function removePointerEvent() {
    if ($_iEvents()[1]) {
      store_mutate(_iEvents, untrack($_iEvents)[1] = null, untrack($_iEvents));
    }
    if ($_iEvents()[2]) {
      store_mutate(_iEvents, untrack($_iEvents)[2] = null, untrack($_iEvents));
    }
  }
  function validEvent(jsEvent) {
    return jsEvent.isPrimary && strict_equals(jsEvent.pointerType, "mouse");
  }
  event("pointermove", $window, handlePointerMove);
  event("scroll", $window, handleScroll);
  var $$pop = pop({
    get handleScroll() {
      return handleScroll;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Pointer = hmr(Pointer, () => Pointer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pointer[HMR].source;
    set(Pointer[HMR].source, module.default[HMR].original);
  });
}
var Pointer_default = Pointer;

// node_modules/@event-calendar/core/src/plugins/interaction/Resizer.svelte
Resizer[FILENAME] = "node_modules/@event-calendar/core/src/plugins/interaction/Resizer.svelte";
var root_16 = add_locations(from_html(`<div></div>`), Resizer[FILENAME], [[31, 4]]);
var root_22 = add_locations(from_html(`<div></div>`), Resizer[FILENAME], [[35, 4]]);
var root10 = add_locations(from_html(`<!> <!> <!>`, 1), Resizer[FILENAME], []);
function Resizer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Resizer);
  const [$$stores, $$cleanup] = setup_stores();
  const $eventDurationEditable = () => (validate_store(eventDurationEditable, "eventDurationEditable"), store_get(eventDurationEditable, "$eventDurationEditable", $$stores));
  const $editable = () => (validate_store(editable, "editable"), store_get(editable, "$editable", $$stores));
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  const $eventResizableFromStart = () => (validate_store(eventResizableFromStart, "eventResizableFromStart"), store_get(eventResizableFromStart, "$eventResizableFromStart", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  let forceDate = prop($$props, "forceDate", 3, void 0), forceMargin = prop($$props, "forceMargin", 3, void 0);
  let {
    theme,
    eventDurationEditable,
    eventResizableFromStart,
    editable,
    _interaction
  } = getContext("state");
  let event2 = tag(user_derived(() => $$props.chunk.event), "event");
  let display = tag(user_derived(() => $$props.chunk.event.display), "display");
  let resizable = tag(user_derived(() => !bgEvent(get(display)) && !helperEvent(get(display)) && eventResizable(get(event2), $eventDurationEditable(), $editable())), "resizable");
  function createResizeHandler(start) {
    return (jsEvent) => {
      var _a, _b;
      return $_interaction().action.resize(get(event2), jsEvent, start, $$props.axis, (_a = forceDate()) == null ? void 0 : _a(), (_b = forceMargin()) == null ? void 0 : _b(), $$props.chunk.zeroDuration);
    };
  }
  var fragment = root10();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_16();
      var event_handler = user_derived(() => createResizeHandler(true));
      div.__pointerdown = function(...$$args) {
        apply(() => get(event_handler), this, $$args, Resizer, [31, 64], true);
      };
      template_effect(() => set_class(div, 1, `${$theme().resizer ?? ""} ${$theme().start ?? ""}`));
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(resizable) && $eventResizableFromStart()) $$render(consequent);
      }),
      "if",
      Resizer,
      30,
      0
    );
  }
  var node_1 = sibling(node, 2);
  add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Resizer, 33, 0);
  var node_2 = sibling(node_1, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var div_1 = root_22();
      var event_handler_1 = user_derived(() => createResizeHandler(false));
      div_1.__pointerdown = function(...$$args) {
        apply(() => get(event_handler_1), this, $$args, Resizer, [35, 49], true);
      };
      template_effect(() => set_class(div_1, 1, $theme().resizer));
      append($$anchor2, div_1);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (get(resizable)) $$render(consequent_1);
      }),
      "if",
      Resizer,
      34,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Resizer = hmr(Resizer, () => Resizer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Resizer[HMR].source;
    set(Resizer[HMR].source, module.default[HMR].original);
  });
}
var Resizer_default = Resizer;
delegate(["pointerdown"]);

// node_modules/@event-calendar/core/src/plugins/interaction/Auxiliary.svelte
Auxiliary2[FILENAME] = "node_modules/@event-calendar/core/src/plugins/interaction/Auxiliary.svelte";
var root11 = add_locations(from_html(`<!> <!>`, 1), Auxiliary2[FILENAME], []);
function Auxiliary2($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Auxiliary2);
  const [$$stores, $$cleanup] = setup_stores();
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $eventStartEditable = () => (validate_store(eventStartEditable, "eventStartEditable"), store_get(eventStartEditable, "$eventStartEditable", $$stores));
  const $editable = () => (validate_store(editable, "editable"), store_get(editable, "$editable", $$stores));
  const $_iClasses = () => (validate_store(_iClasses, "_iClasses"), store_get(_iClasses, "$_iClasses", $$stores));
  const $_bodyEl = () => (validate_store(_bodyEl, "_bodyEl"), store_get(_bodyEl, "$_bodyEl", $$stores));
  const $pointer = () => (validate_store(pointer, "pointer"), store_get(pointer, "$pointer", $$stores));
  let {
    theme,
    editable,
    eventStartEditable,
    pointer,
    _bodyEl,
    _interaction,
    _iClasses
  } = getContext("state");
  store_mutate(_interaction, untrack($_interaction).resizer = Resizer_default, untrack($_interaction));
  user_effect(() => {
    $theme();
    $eventStartEditable();
    $editable();
    store_set(_iClasses, (classNames, event2) => {
      let { display } = event2;
      return [
        ...classNames,
        helperEvent(display) ? [$theme()[display]] : !bgEvent(display) && eventDraggable(event2, $eventStartEditable(), $editable()) ? [$theme().draggable] : []
      ];
    });
  });
  user_effect(() => {
    if ($_bodyEl()) {
      return listen($_bodyEl(), "scroll", bodyScrollHandler);
    }
  });
  function bodyScrollHandler() {
    var _a;
    for (let component2 of Object.values($_interaction())) {
      (_a = component2 == null ? void 0 : component2.handleScroll) == null ? void 0 : _a.call(component2);
    }
  }
  var fragment = root11();
  var node = first_child(fragment);
  add_svelte_meta(() => bind_this(Action_default(node, {}), ($$value) => store_mutate(_interaction, untrack($_interaction).action = $$value, untrack($_interaction)), () => {
    var _a;
    return (_a = $_interaction()) == null ? void 0 : _a.action;
  }), "component", Auxiliary2, 46, 0, { componentTag: "Action" });
  var node_1 = sibling(node, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      add_svelte_meta(() => bind_this(Pointer_default(node_2, {}), ($$value) => store_mutate(_interaction, untrack($_interaction).pointer = $$value, untrack($_interaction)), () => {
        var _a;
        return (_a = $_interaction()) == null ? void 0 : _a.pointer;
      }), "component", Auxiliary2, 48, 4, { componentTag: "Pointer" });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if ($pointer()) $$render(consequent);
      }),
      "if",
      Auxiliary2,
      47,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Auxiliary2 = hmr(Auxiliary2, () => Auxiliary2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Auxiliary2[HMR].source;
    set(Auxiliary2[HMR].source, module.default[HMR].original);
  });
}
var Auxiliary_default2 = Auxiliary2;

// node_modules/@event-calendar/core/src/plugins/interaction/index.js
var interaction_default = {
  createOptions(options) {
    options.dateClick = void 0;
    options.dragConstraint = void 0;
    options.dragScroll = true;
    options.editable = false;
    options.eventDragMinDistance = 5;
    options.eventDragStart = void 0;
    options.eventDragStop = void 0;
    options.eventDrop = void 0;
    options.eventDurationEditable = true;
    options.eventLongPressDelay = void 0;
    options.eventResizableFromStart = false;
    options.eventResizeStart = void 0;
    options.eventResizeStop = void 0;
    options.eventResize = void 0;
    options.eventStartEditable = true;
    options.longPressDelay = 1e3;
    options.pointer = false;
    options.resizeConstraint = void 0;
    options.select = void 0;
    options.selectBackgroundColor = void 0;
    options.selectConstraint = void 0;
    options.selectLongPressDelay = void 0;
    options.selectMinDistance = 5;
    options.unselect = void 0;
    options.unselectAuto = true;
    options.unselectCancel = "";
    options.theme.draggable = "ec-draggable";
    options.theme.ghost = "ec-ghost";
    options.theme.preview = "ec-preview";
    options.theme.pointer = "ec-pointer";
    options.theme.resizer = "ec-resizer";
    options.theme.start = "ec-start";
    options.theme.dragging = "ec-dragging";
    options.theme.resizingY = "ec-resizing-y";
    options.theme.resizingX = "ec-resizing-x";
    options.theme.selecting = "ec-selecting";
  },
  createStores(state2) {
    state2._auxiliary.update(($_auxiliary) => [...$_auxiliary, Auxiliary_default2]);
  }
};

// node_modules/@event-calendar/core/src/plugins/list/Event.svelte
Event2[FILENAME] = "node_modules/@event-calendar/core/src/plugins/list/Event.svelte";
var root_17 = add_locations(from_html(`<div></div> <!>`, 1), Event2[FILENAME], [[19, 8]]);
function Event2($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Event2);
  const [$$stores, $$cleanup] = setup_stores();
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  let { theme, _interaction } = getContext("state");
  let styles = tag(
    user_derived(() => (style) => {
      delete style["background-color"];
      delete style["color"];
      return style;
    }),
    "styles"
  );
  var fragment = comment();
  var node = first_child(fragment);
  {
    const body = wrap_snippet(Event2, function($$anchor2, defaultBody = noop, bgColor = noop, txtColor = noop) {
      validate_snippet_args(...arguments);
      var fragment_1 = root_17();
      var div = first_child(fragment_1);
      let styles_1;
      var node_1 = sibling(div, 2);
      add_svelte_meta(() => snippet(node_1, defaultBody), "render", Event2, 20, 8);
      template_effect(
        ($02) => {
          set_class(div, 1, $theme().eventTag);
          styles_1 = set_style(div, "", styles_1, $02);
        },
        [() => ({ "background-color": bgColor() })]
      );
      append($$anchor2, fragment_1);
    });
    let $0 = user_derived(() => {
      var _a;
      return (_a = $_interaction().action) == null ? void 0 : _a.noAction;
    });
    add_svelte_meta(
      () => BaseEvent_default(node, {
        get chunk() {
          return $$props.chunk;
        },
        get styles() {
          return get(styles);
        },
        get onpointerdown() {
          return get($0);
        },
        body,
        $$slots: { body: true }
      }),
      "component",
      Event2,
      17,
      0,
      { componentTag: "BaseEvent" }
    );
  }
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Event2 = hmr(Event2, () => Event2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Event2[HMR].source;
    set(Event2[HMR].source, module.default[HMR].original);
  });
}
var Event_default2 = Event2;

// node_modules/@event-calendar/core/src/plugins/list/Day.svelte
Day2[FILENAME] = "node_modules/@event-calendar/core/src/plugins/list/Day.svelte";
var root_18 = add_locations(from_html(`<div role="listitem"><h4><time></time> <time></time></h4> <!></div>`), Day2[FILENAME], [[45, 4, [[52, 8, [[53, 12], [54, 12]]]]]]);
function Day2($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Day2);
  const [$$stores, $$cleanup] = setup_stores();
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $highlightedDates = () => (validate_store(highlightedDates, "highlightedDates"), store_get(highlightedDates, "$highlightedDates", $$stores));
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $_filteredEvents = () => (validate_store(_filteredEvents, "_filteredEvents"), store_get(_filteredEvents, "$_filteredEvents", $$stores));
  const $filterEventsWithResources = () => (validate_store(filterEventsWithResources, "filterEventsWithResources"), store_get(filterEventsWithResources, "$filterEventsWithResources", $$stores));
  const $resources = () => (validate_store(resources, "resources"), store_get(resources, "$resources", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  const $_intlListDay = () => (validate_store(_intlListDay, "_intlListDay"), store_get(_intlListDay, "$_intlListDay", $$stores));
  const $_intlListDaySide = () => (validate_store(_intlListDaySide, "_intlListDaySide"), store_get(_intlListDaySide, "$_intlListDaySide", $$stores));
  let {
    _filteredEvents,
    _interaction,
    _intlListDay,
    _intlListDaySide,
    _today,
    resources,
    filterEventsWithResources,
    highlightedDates,
    theme,
    validRange
  } = getContext("state");
  let el = tag(state(void 0), "el");
  let isToday = tag(user_derived(() => datesEqual($$props.date, $_today())), "isToday");
  let highlight = tag(user_derived(() => $highlightedDates().some((d) => datesEqual(d, $$props.date))), "highlight");
  let disabled = tag(user_derived(() => outsideRange($$props.date, $validRange())), "disabled");
  let datetime = tag(user_derived(() => toISOString($$props.date, 10)), "datetime");
  let chunks = tag(
    user_derived(() => {
      let chunks2 = [];
      if (!get(disabled)) {
        let start = $$props.date;
        let end = addDay(cloneDate($$props.date));
        for (let event2 of $_filteredEvents()) {
          if (!bgEvent(event2.display) && eventIntersects(event2, start, end, $filterEventsWithResources() ? $resources() : void 0)) {
            let chunk = createEventChunk(event2, start, end);
            chunks2.push(chunk);
          }
        }
        sortEventChunks(chunks2);
      }
      return chunks2;
    }),
    "chunks"
  );
  user_effect(() => {
    if (get(el)) {
      setPayload(get(el), () => ({
        allDay: true,
        date: $$props.date,
        resource: void 0,
        dayEl: get(el),
        disabled: get(disabled)
      }));
    }
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_18();
      div.__pointerdown = function(...$$args) {
        apply(() => {
          var _a;
          return (_a = $_interaction().action) == null ? void 0 : _a.select;
        }, this, $$args, Day2, [49, 23]);
      };
      var h4 = child(div);
      var time = child(h4);
      action(time, ($$node, $$action_arg) => {
        var _a;
        return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
      }, () => $_intlListDay().format($$props.date));
      var time_1 = sibling(time, 2);
      action(time_1, ($$node, $$action_arg) => {
        var _a;
        return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
      }, () => $_intlListDaySide().format($$props.date));
      reset(h4);
      var node_1 = sibling(h4, 2);
      validate_each_keys(() => get(chunks), (chunk) => chunk.event);
      add_svelte_meta(
        () => each(node_1, 17, () => get(chunks), (chunk) => chunk.event, ($$anchor3, chunk) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(
            () => Event_default2(node_2, {
              get chunk() {
                return get(chunk);
              }
            }),
            "component",
            Day2,
            57,
            12,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_1);
        }),
        "each",
        Day2,
        56,
        8
      );
      reset(div);
      bind_this(div, ($$value) => set(el, $$value), () => get(el));
      template_effect(
        ($0) => {
          set_class(div, 1, `${$theme().day ?? ""} ${$0 ?? ""}${get(isToday) ? " " + $theme().today : ""}${get(highlight) ? " " + $theme().highlight : ""}`);
          set_class(h4, 1, $theme().dayHead);
          set_attribute(time, "datetime", get(datetime));
          set_class(time_1, 1, $theme().daySide);
          set_attribute(time_1, "datetime", get(datetime));
        },
        [() => {
          var _a;
          return (_a = $theme().weekdays) == null ? void 0 : _a[$$props.date.getUTCDay()];
        }]
      );
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(chunks).length) $$render(consequent);
      }),
      "if",
      Day2,
      44,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Day2 = hmr(Day2, () => Day2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Day2[HMR].source;
    set(Day2[HMR].source, module.default[HMR].original);
  });
}
var Day_default2 = Day2;
delegate(["pointerdown"]);

// node_modules/@event-calendar/core/src/plugins/list/Body.svelte
Body2[FILENAME] = "node_modules/@event-calendar/core/src/plugins/list/Body.svelte";
function onclick(jsEvent, $noEventsClick, noEventsClick, $_view, _view) {
  if (isFunction($noEventsClick())) {
    $noEventsClick()({ jsEvent, view: toViewWithLocalDates($_view()) });
  }
}
var root_19 = add_locations(from_html(`<div></div>`), Body2[FILENAME], [[37, 12]]);
var root12 = add_locations(from_html(`<div><div><!></div></div>`), Body2[FILENAME], [[32, 0, [[33, 4]]]]);
function Body2($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Body2);
  const [$$stores, $$cleanup] = setup_stores();
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $_filteredEvents = () => (validate_store(_filteredEvents, "_filteredEvents"), store_get(_filteredEvents, "$_filteredEvents", $$stores));
  const $noEventsContent = () => (validate_store(noEventsContent, "noEventsContent"), store_get(noEventsContent, "$noEventsContent", $$stores));
  const $noEventsClick = () => (validate_store(noEventsClick, "noEventsClick"), store_get(noEventsClick, "$noEventsClick", $$stores));
  const $_view = () => (validate_store(_view, "_view"), store_get(_view, "$_view", $$stores));
  const $_bodyEl = () => (validate_store(_bodyEl, "_bodyEl"), store_get(_bodyEl, "$_bodyEl", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  let {
    _bodyEl,
    _filteredEvents,
    _view,
    _viewDates,
    noEventsClick,
    noEventsContent,
    theme
  } = getContext("state");
  let noEvents = tag(
    user_derived(() => {
      let noEvents2 = true;
      if ($_viewDates().length) {
        let start = $_viewDates()[0];
        let end = addDay(cloneDate($_viewDates().at(-1)));
        for (let event2 of $_filteredEvents()) {
          if (!bgEvent(event2.display) && event2.start < end && event2.end > start) {
            noEvents2 = false;
            break;
          }
        }
      }
      return noEvents2;
    }),
    "noEvents"
  );
  let content = tag(user_derived(() => isFunction($noEventsContent()) ? $noEventsContent()() : $noEventsContent()), "content");
  var div = root12();
  var div_1 = child(div);
  var node = child(div_1);
  {
    var consequent = ($$anchor2) => {
      var div_2 = root_19();
      div_2.__click = [onclick, $noEventsClick, noEventsClick, $_view, _view];
      action(div_2, ($$node, $$action_arg) => {
        var _a;
        return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
      }, () => get(content));
      template_effect(() => set_class(div_2, 1, $theme().noEvents));
      append($$anchor2, div_2);
    };
    var alternate = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(
        () => each(node_1, 1, $_viewDates, index, ($$anchor3, date) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(
            () => Day_default2(node_2, {
              get date() {
                return get(date);
              }
            }),
            "component",
            Body2,
            40,
            16,
            { componentTag: "Day" }
          );
          append($$anchor3, fragment_1);
        }),
        "each",
        Body2,
        39,
        12
      );
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(noEvents)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Body2,
      34,
      8
    );
  }
  reset(div_1);
  reset(div);
  bind_this(div, ($$value) => store_set(_bodyEl, $$value), () => $_bodyEl());
  template_effect(() => {
    set_class(div, 1, $theme().body);
    set_class(div_1, 1, $theme().content);
  });
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Body2 = hmr(Body2, () => Body2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Body2[HMR].source;
    set(Body2[HMR].source, module.default[HMR].original);
  });
}
var Body_default2 = Body2;
delegate(["click"]);

// node_modules/@event-calendar/core/src/plugins/list/View.svelte
View2[FILENAME] = "node_modules/@event-calendar/core/src/plugins/list/View.svelte";
function View2($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, View2);
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(() => Body_default2(node, {}), "component", View2, 5, 0, { componentTag: "Body" });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  View2 = hmr(View2, () => View2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = View2[HMR].source;
    set(View2[HMR].source, module.default[HMR].original);
  });
}
var View_default2 = View2;

// node_modules/@event-calendar/core/src/plugins/list/index.js
var list_default = {
  createOptions(options) {
    options.buttonText.listDay = "list";
    options.buttonText.listWeek = "list";
    options.buttonText.listMonth = "list";
    options.buttonText.listYear = "list";
    options.listDayFormat = { weekday: "long" };
    options.listDaySideFormat = { year: "numeric", month: "long", day: "numeric" };
    options.noEventsClick = void 0;
    options.noEventsContent = "No events";
    options.theme.daySide = "ec-day-side";
    options.theme.eventTag = "ec-event-tag";
    options.theme.noEvents = "ec-no-events";
    options.view = "listWeek";
    options.views.listDay = {
      buttonText: btnTextDay,
      component: View_default2,
      duration: { days: 1 },
      theme: themeView("ec-list ec-day-view")
    };
    options.views.listWeek = {
      buttonText: btnTextWeek,
      component: View_default2,
      duration: { weeks: 1 },
      theme: themeView("ec-list ec-week-view")
    };
    options.views.listMonth = {
      buttonText: btnTextMonth,
      component: View_default2,
      duration: { months: 1 },
      theme: themeView("ec-list ec-month-view")
    };
    options.views.listYear = {
      buttonText: btnTextYear,
      component: View_default2,
      duration: { years: 1 },
      theme: themeView("ec-list ec-year-view")
    };
  },
  createStores(state2) {
    state2._intlListDay = intl(state2.locale, state2.listDayFormat);
    state2._intlListDaySide = intl(state2.locale, state2.listDaySideFormat);
  }
};

// node_modules/@event-calendar/core/src/plugins/time-grid/stores.js
function times(state2) {
  return derived(
    [state2.slotDuration, state2.slotLabelInterval, state2._slotTimeLimits, state2._intlSlotLabel],
    (args) => createTimes(setMidnight(createDate()), ...args)
  );
}
function slotTimeLimits(state2) {
  return derived(
    [state2.slotMinTime, state2.slotMaxTime, state2.flexibleSlotTimeLimits, state2._viewDates, state2._filteredEvents],
    (args) => createSlotTimeLimits(...args)
  );
}

// node_modules/@event-calendar/core/src/plugins/time-grid/utils.js
function groupEventChunks(chunks) {
  if (!chunks.length) {
    return;
  }
  sortEventChunks(chunks);
  let group = {
    columns: [],
    end: chunks[0].end
  };
  for (let chunk of chunks) {
    let c = 0;
    if (chunk.start < group.end) {
      for (; c < group.columns.length; ++c) {
        if (group.columns[c].at(-1).end <= chunk.start) {
          break;
        }
      }
      if (chunk.end > group.end) {
        group.end = chunk.end;
      }
    } else {
      group = {
        columns: [],
        end: chunk.end
      };
    }
    if (group.columns.length < c + 1) {
      group.columns.push([]);
    }
    group.columns[c].push(chunk);
    chunk.group = group;
    chunk.column = c;
  }
}
function createAllDayContent(allDayContent) {
  let text2 = "all-day";
  let content;
  if (allDayContent) {
    content = isFunction(allDayContent) ? allDayContent({ text: text2 }) : allDayContent;
    if (typeof content === "string") {
      content = { html: content };
    }
  } else {
    content = {
      html: text2
    };
  }
  return content;
}

// node_modules/@event-calendar/core/src/plugins/time-grid/Section.svelte
Section[FILENAME] = "node_modules/@event-calendar/core/src/plugins/time-grid/Section.svelte";
var root_110 = add_locations(from_html(`<time></time>`), Section[FILENAME], [[17, 8]]);
var root13 = add_locations(from_html(`<div><div></div> <!></div> <div role="row"><div><!></div> <!></div>`, 1), Section[FILENAME], [[14, 0, [[15, 4]]], [24, 0, [[25, 4]]]]);
function Section($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Section);
  const [$$stores, $$cleanup] = setup_stores();
  const $allDayContent = () => (validate_store(allDayContent, "allDayContent"), store_get(allDayContent, "$allDayContent", $$stores));
  const $slotLabelInterval = () => (validate_store(slotLabelInterval, "slotLabelInterval"), store_get(slotLabelInterval, "$slotLabelInterval", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_times = () => (validate_store(_times, "_times"), store_get(_times, "$_times", $$stores));
  let { allDayContent, slotLabelInterval, theme, _times } = getContext("state");
  let allDayText = tag(user_derived(() => createAllDayContent($allDayContent())), "allDayText");
  let showAllTimes = tag(user_derived(() => $slotLabelInterval() && $slotLabelInterval().seconds <= 0), "showAllTimes");
  var fragment = root13();
  var div = first_child(fragment);
  var div_1 = child(div);
  action(div_1, ($$node, $$action_arg) => {
    var _a;
    return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
  }, () => get(allDayText));
  var node = sibling(div_1, 2);
  add_svelte_meta(
    () => each(node, 1, $_times, index, ($$anchor2, time, i) => {
      var time_1 = root_110();
      action(time_1, ($$node, $$action_arg) => {
        var _a;
        return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
      }, () => get(time)[1]);
      template_effect(() => {
        set_class(time_1, 1, `${$theme().time ?? ""}${(i || get(showAllTimes)) && get(time)[2] ? "" : " " + $theme().minor}`);
        set_attribute(time_1, "datetime", get(time)[0]);
      });
      append($$anchor2, time_1);
    }),
    "each",
    Section,
    16,
    4
  );
  reset(div);
  var div_2 = sibling(div, 2);
  var div_3 = child(div_2);
  var node_1 = child(div_3);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_2, () => $$props.lines), "render", Section, 25, 43);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if ($$props.lines) $$render(consequent);
      }),
      "if",
      Section,
      25,
      32
    );
  }
  reset(div_3);
  var node_3 = sibling(div_3, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", Section, 27, 8);
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if ($$props.children) $$render(consequent_1);
      }),
      "if",
      Section,
      26,
      4
    );
  }
  reset(div_2);
  template_effect(() => {
    set_class(div, 1, $theme().sidebar);
    set_class(div_1, 1, $theme().sidebarTitle);
    set_class(div_2, 1, $theme().days);
    set_class(div_3, 1, $theme().lines);
  });
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Section = hmr(Section, () => Section[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Section[HMR].source;
    set(Section[HMR].source, module.default[HMR].original);
  });
}
var Section_default = Section;

// node_modules/@event-calendar/core/src/plugins/time-grid/Body.svelte
Body3[FILENAME] = "node_modules/@event-calendar/core/src/plugins/time-grid/Body.svelte";
var root_23 = add_locations(from_html(`<div></div>`), Body3[FILENAME], [[38, 20]]);
var root14 = add_locations(from_html(`<div><div><!></div></div>`), Body3[FILENAME], [[29, 0, [[34, 4]]]]);
function Body3($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Body3);
  const [$$stores, $$cleanup] = setup_stores();
  const $_bodyEl = () => (validate_store(_bodyEl, "_bodyEl"), store_get(_bodyEl, "$_bodyEl", $$stores));
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $scrollTime = () => (validate_store(scrollTime, "scrollTime"), store_get(scrollTime, "$scrollTime", $$stores));
  const $_slotTimeLimits = () => (validate_store(_slotTimeLimits, "_slotTimeLimits"), store_get(_slotTimeLimits, "$_slotTimeLimits", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $slotHeight = () => (validate_store(slotHeight, "slotHeight"), store_get(slotHeight, "$slotHeight", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_recheckScrollable = () => (validate_store(_recheckScrollable, "_recheckScrollable"), store_get(_recheckScrollable, "$_recheckScrollable", $$stores));
  const $_times = () => (validate_store(_times, "_times"), store_get(_times, "$_times", $$stores));
  let {
    _bodyEl,
    _viewDates,
    _slotTimeLimits,
    _times,
    _recheckScrollable,
    scrollTime,
    slotDuration,
    slotHeight,
    theme
  } = getContext("state");
  let el = tag(state(void 0), "el");
  user_effect(() => {
    store_set(_bodyEl, get(el));
  });
  user_effect(() => {
    $_viewDates();
    $scrollTime();
    untrack(scrollToTime);
  });
  function scrollToTime() {
    get(el).scrollTop = (($scrollTime().seconds - $_slotTimeLimits().min.seconds) / $slotDuration().seconds - 0.5) * $slotHeight();
  }
  var div = root14();
  var div_1 = child(div);
  var node = child(div_1);
  {
    const lines = wrap_snippet(Body3, function($$anchor2) {
      validate_snippet_args(...arguments);
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(
        () => each(node_1, 1, $_times, index, ($$anchor3, time) => {
          var div_2 = root_23();
          template_effect(() => set_class(div_2, 1, `${$theme().line ?? ""}${get(time)[2] ? "" : " " + $theme().minor}`));
          append($$anchor3, div_2);
        }),
        "each",
        Body3,
        37,
        16
      );
      append($$anchor2, fragment);
    });
    add_svelte_meta(
      () => Section_default(node, {
        get children() {
          return $$props.children;
        },
        lines,
        $$slots: { lines: true }
      }),
      "component",
      Body3,
      35,
      8,
      { componentTag: "Section" }
    );
  }
  reset(div_1);
  reset(div);
  bind_this(div, ($$value) => set(el, $$value), () => get(el));
  action(div, ($$node, $$action_arg) => {
    var _a;
    return (_a = observeResize) == null ? void 0 : _a($$node, $$action_arg);
  }, () => () => store_set(_recheckScrollable, true));
  template_effect(() => {
    set_class(div, 1, $theme().body);
    set_class(div_1, 1, $theme().content);
  });
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Body3 = hmr(Body3, () => Body3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Body3[HMR].source;
    set(Body3[HMR].source, module.default[HMR].original);
  });
}
var Body_default3 = Body3;

// node_modules/@event-calendar/core/src/plugins/time-grid/Event.svelte
Event3[FILENAME] = "node_modules/@event-calendar/core/src/plugins/time-grid/Event.svelte";
function Event3($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Event3);
  const [$$stores, $$cleanup] = setup_stores();
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $_slotTimeLimits = () => (validate_store(_slotTimeLimits, "_slotTimeLimits"), store_get(_slotTimeLimits, "$_slotTimeLimits", $$stores));
  const $slotHeight = () => (validate_store(slotHeight, "slotHeight"), store_get(slotHeight, "$slotHeight", $$stores));
  const $slotEventOverlap = () => (validate_store(slotEventOverlap, "slotEventOverlap"), store_get(slotEventOverlap, "$slotEventOverlap", $$stores));
  let { slotEventOverlap, slotDuration, slotHeight, _slotTimeLimits } = getContext("state");
  let display = tag(user_derived(() => $$props.chunk.event.display), "display");
  let styles = tag(
    user_derived(() => (style) => {
      let step = $slotDuration().seconds;
      let offset = $_slotTimeLimits().min.seconds;
      let start = ($$props.chunk.start - $$props.date) / 1e3;
      let end = ($$props.chunk.end - $$props.date) / 1e3;
      let top = (start - offset) / step * $slotHeight();
      let height2 = (end - start) / step * $slotHeight() || $slotHeight();
      let maxHeight = ($_slotTimeLimits().max.seconds - start) / step * $slotHeight();
      style["top"] = `${top}px`;
      style["min-height"] = `${height2}px`;
      style["height"] = `${height2}px`;
      style["max-height"] = `${maxHeight}px`;
      if (!bgEvent(get(display)) && !helperEvent(get(display)) || ghostEvent(get(display))) {
        style["z-index"] = `${$$props.chunk.column + 1}`;
        style["left"] = `${100 / $$props.chunk.group.columns.length * $$props.chunk.column}%`;
        style["width"] = `${100 / $$props.chunk.group.columns.length * ($slotEventOverlap() ? 0.5 * (1 + $$props.chunk.group.columns.length - $$props.chunk.column) : 1)}%`;
      }
      return style;
    }),
    "styles"
  );
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => InteractableEvent_default(node, {
      get chunk() {
        return $$props.chunk;
      },
      get styles() {
        return get(styles);
      },
      axis: "y"
    }),
    "component",
    Event3,
    34,
    0,
    { componentTag: "InteractableEvent" }
  );
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Event3 = hmr(Event3, () => Event3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Event3[HMR].source;
    set(Event3[HMR].source, module.default[HMR].original);
  });
}
var Event_default3 = Event3;

// node_modules/@event-calendar/core/src/plugins/time-grid/NowIndicator.svelte
NowIndicator[FILENAME] = "node_modules/@event-calendar/core/src/plugins/time-grid/NowIndicator.svelte";
var root15 = add_locations(from_html(`<div></div>`), NowIndicator[FILENAME], [[15, 0]]);
function NowIndicator($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NowIndicator);
  const [$$stores, $$cleanup] = setup_stores();
  const $_now = () => (validate_store(_now, "_now"), store_get(_now, "$_now", $$stores));
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $_slotTimeLimits = () => (validate_store(_slotTimeLimits, "_slotTimeLimits"), store_get(_slotTimeLimits, "$_slotTimeLimits", $$stores));
  const $slotHeight = () => (validate_store(slotHeight, "slotHeight"), store_get(slotHeight, "$slotHeight", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  let {
    slotDuration,
    slotHeight,
    theme,
    _now,
    _today,
    _slotTimeLimits
  } = getContext("state");
  let start = tag(user_derived(() => ($_now() - $_today()) / 1e3), "start");
  let top = tag(
    user_derived(() => {
      let step = $slotDuration().seconds;
      let offset = $_slotTimeLimits().min.seconds;
      return (get(start) - offset) / step * $slotHeight();
    }),
    "top"
  );
  var div = root15();
  template_effect(() => {
    set_class(div, 1, $theme().nowIndicator);
    set_style(div, `top:${get(top) ?? ""}px`);
  });
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  NowIndicator = hmr(NowIndicator, () => NowIndicator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NowIndicator[HMR].source;
    set(NowIndicator[HMR].source, module.default[HMR].original);
  });
}
var NowIndicator_default = NowIndicator;

// node_modules/@event-calendar/core/src/plugins/time-grid/Day.svelte
Day3[FILENAME] = "node_modules/@event-calendar/core/src/plugins/time-grid/Day.svelte";
var root_32 = add_locations(from_html(`<!> <!> <!>`, 1), Day3[FILENAME], []);
var root16 = add_locations(from_html(`<div role="cell"><div><!></div> <div><!></div> <div><!></div></div>`), Day3[FILENAME], [[75, 0, [[81, 4], [88, 4], [103, 4]]]]);
function Day3($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Day3);
  const [$$stores, $$cleanup] = setup_stores();
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $highlightedDates = () => (validate_store(highlightedDates, "highlightedDates"), store_get(highlightedDates, "$highlightedDates", $$stores));
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $_slotTimeLimits = () => (validate_store(_slotTimeLimits, "_slotTimeLimits"), store_get(_slotTimeLimits, "$_slotTimeLimits", $$stores));
  const $filterEventsWithResources = () => (validate_store(filterEventsWithResources, "filterEventsWithResources"), store_get(filterEventsWithResources, "$filterEventsWithResources", $$stores));
  const $resources = () => (validate_store(resources, "resources"), store_get(resources, "$resources", $$stores));
  const $_filteredEvents = () => (validate_store(_filteredEvents, "_filteredEvents"), store_get(_filteredEvents, "$_filteredEvents", $$stores));
  const $_iEvents = () => (validate_store(_iEvents, "_iEvents"), store_get(_iEvents, "$_iEvents", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $slotHeight = () => (validate_store(slotHeight, "slotHeight"), store_get(slotHeight, "$slotHeight", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  const $nowIndicator = () => (validate_store(nowIndicator, "nowIndicator"), store_get(nowIndicator, "$nowIndicator", $$stores));
  let resource = prop($$props, "resource", 3, void 0);
  let {
    _filteredEvents,
    _iEvents,
    highlightedDates,
    nowIndicator,
    slotDuration,
    slotHeight,
    filterEventsWithResources,
    theme,
    resources,
    validRange,
    _interaction,
    _today,
    _slotTimeLimits
  } = getContext("state");
  let el = tag(state(void 0), "el");
  let isToday = tag(user_derived(() => datesEqual($$props.date, $_today())), "isToday");
  let highlight = tag(user_derived(() => $highlightedDates().some((d) => datesEqual(d, $$props.date))), "highlight");
  let disabled = tag(user_derived(() => outsideRange($$props.date, $validRange())), "disabled");
  let start = tag(user_derived(() => addDuration(cloneDate($$props.date), $_slotTimeLimits().min)), "start");
  let end = tag(user_derived(() => addDuration(cloneDate($$props.date), $_slotTimeLimits().max)), "end");
  let resourceFilter = tag(user_derived(() => resource() ?? ($filterEventsWithResources() ? $resources() : void 0)), "resourceFilter");
  let $$d = tag(
    user_derived(() => {
      if (get(disabled)) {
        return [[], []];
      }
      let chunks2 = [];
      let bgChunks2 = [];
      for (let event2 of $_filteredEvents()) {
        if ((!event2.allDay || bgEvent(event2.display)) && eventIntersects(event2, get(start), get(end), get(resourceFilter))) {
          let chunk = createEventChunk(event2, get(start), get(end));
          switch (event2.display) {
            case "background":
              bgChunks2.push(chunk);
              break;
            default:
              chunks2.push(chunk);
          }
        }
      }
      groupEventChunks(chunks2);
      return [chunks2, bgChunks2];
    }),
    "[$derived iterable]"
  ), $$array = tag(user_derived(() => to_array(get($$d), 2)), "[$derived iterable]"), chunks = tag(user_derived(() => get($$array)[0]), "chunks"), bgChunks = tag(user_derived(() => get($$array)[1]), "bgChunks");
  let iChunks = tag(
    user_derived(() => {
      if (get(disabled)) {
        return [];
      }
      return $_iEvents().map((event2) => event2 && eventIntersects(event2, get(start), get(end), resource()) ? createEventChunk(event2, get(start), get(end)) : null);
    }),
    "iChunks"
  );
  function dateFromPoint(x, y) {
    y -= rect(get(el)).top;
    return {
      allDay: false,
      date: addDuration(addDuration(cloneDate($$props.date), $_slotTimeLimits().min), $slotDuration(), floor(y / $slotHeight())),
      resource: resource(),
      dayEl: get(el),
      disabled: get(disabled)
    };
  }
  onMount(() => {
    setPayload(get(el), dateFromPoint);
  });
  var div = root16();
  div.__pointerdown = function(...$$args) {
    apply(() => {
      var _a;
      return !get(disabled) ? (_a = $_interaction().action) == null ? void 0 : _a.select : void 0;
    }, this, $$args, Day3, [79, 19]);
  };
  var div_1 = child(div);
  var node = child(div_1);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      validate_each_keys(() => get(bgChunks), (chunk) => chunk.event);
      add_svelte_meta(
        () => each(node_1, 17, () => get(bgChunks), (chunk) => chunk.event, ($$anchor3, chunk) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(
            () => Event_default3(node_2, {
              get date() {
                return $$props.date;
              },
              get chunk() {
                return get(chunk);
              }
            }),
            "component",
            Day3,
            84,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_1);
        }),
        "each",
        Day3,
        83,
        12
      );
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!get(disabled)) $$render(consequent);
      }),
      "if",
      Day3,
      82,
      8
    );
  }
  reset(div_1);
  var div_2 = sibling(div_1, 2);
  var node_3 = child(div_2);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_2 = root_32();
      var node_4 = first_child(fragment_2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_5 = first_child(fragment_3);
          add_svelte_meta(
            () => Event_default3(node_5, {
              get date() {
                return $$props.date;
              },
              get chunk() {
                return get(iChunks)[1];
              }
            }),
            "component",
            Day3,
            92,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_3);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (get(iChunks)[1]) $$render(consequent_1);
          }),
          "if",
          Day3,
          91,
          12
        );
      }
      var node_6 = sibling(node_4, 2);
      validate_each_keys(() => get(chunks), (chunk) => chunk.event);
      add_svelte_meta(
        () => each(node_6, 17, () => get(chunks), (chunk) => chunk.event, ($$anchor3, chunk) => {
          var fragment_4 = comment();
          var node_7 = first_child(fragment_4);
          add_svelte_meta(
            () => Event_default3(node_7, {
              get date() {
                return $$props.date;
              },
              get chunk() {
                return get(chunk);
              }
            }),
            "component",
            Day3,
            95,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_4);
        }),
        "each",
        Day3,
        94,
        12
      );
      var node_8 = sibling(node_6, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_5 = comment();
          var node_9 = first_child(fragment_5);
          add_svelte_meta(
            () => Event_default3(node_9, {
              get date() {
                return $$props.date;
              },
              get chunk() {
                return get(iChunks)[0];
              }
            }),
            "component",
            Day3,
            99,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_5);
        };
        add_svelte_meta(
          () => if_block(node_8, ($$render) => {
            if (get(iChunks)[0] && !get(iChunks)[0].event.allDay) $$render(consequent_2);
          }),
          "if",
          Day3,
          98,
          12
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if (!get(disabled)) $$render(consequent_3);
      }),
      "if",
      Day3,
      89,
      8
    );
  }
  reset(div_2);
  var div_3 = sibling(div_2, 2);
  var node_10 = child(div_3);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment_6 = comment();
      var node_11 = first_child(fragment_6);
      add_svelte_meta(() => NowIndicator_default(node_11, {}), "component", Day3, 106, 12, { componentTag: "NowIndicator" });
      append($$anchor2, fragment_6);
    };
    add_svelte_meta(
      () => if_block(node_10, ($$render) => {
        if ($nowIndicator() && get(isToday) && !get(disabled)) $$render(consequent_4);
      }),
      "if",
      Day3,
      105,
      8
    );
  }
  reset(div_3);
  reset(div);
  bind_this(div, ($$value) => set(el, $$value), () => get(el));
  template_effect(
    ($0) => {
      set_class(div, 1, `${$theme().day ?? ""} ${$0 ?? ""}${get(isToday) ? " " + $theme().today : ""}${get(highlight) ? " " + $theme().highlight : ""}${get(disabled) ? " " + $theme().disabled : ""}`);
      set_class(div_1, 1, $theme().bgEvents);
      set_class(div_2, 1, $theme().events);
      set_class(div_3, 1, $theme().extra);
    },
    [() => {
      var _a;
      return (_a = $theme().weekdays) == null ? void 0 : _a[$$props.date.getUTCDay()];
    }]
  );
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Day3 = hmr(Day3, () => Day3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Day3[HMR].source;
    set(Day3[HMR].source, module.default[HMR].original);
  });
}
var Day_default3 = Day3;
delegate(["pointerdown"]);

// node_modules/@event-calendar/core/src/plugins/time-grid/all-day/Event.svelte
Event4[FILENAME] = "node_modules/@event-calendar/core/src/plugins/time-grid/all-day/Event.svelte";
function Event4($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Event4);
  let longChunks = prop($$props, "longChunks", 19, () => ({}));
  let el = tag(state(void 0), "el");
  let margin = tag(state(1), "margin");
  let event2 = tag(user_derived(() => $$props.chunk.event), "event");
  let display = tag(user_derived(() => $$props.chunk.event.display), "display");
  let styles = tag(
    user_derived(() => (style) => {
      if (bgEvent(get(display))) {
        style["width"] = `calc(${$$props.chunk.days * 100}% + ${$$props.chunk.days - 1}px)`;
      } else {
        style["width"] = `calc(${$$props.chunk.days * 100}% + ${($$props.chunk.days - 1) * 7}px)`;
        style["margin-top"] = `${get(event2)._margin ?? get(margin)}px`;
      }
      return style;
    }),
    "styles"
  );
  function reposition() {
    if (!get(el)) {
      return;
    }
    set(margin, repositionEvent($$props.chunk, longChunks(), height(get(el))), true);
  }
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => InteractableEvent_default(node, {
      get chunk() {
        return $$props.chunk;
      },
      get styles() {
        return get(styles);
      },
      axis: "x",
      forceMargin: () => rect(get(el)).top - rect(ancestor(get(el), 1)).top,
      get el() {
        return get(el);
      },
      set el($$value) {
        set(el, $$value, true);
      }
    }),
    "component",
    Event4,
    31,
    0,
    { componentTag: "InteractableEvent" }
  );
  append($$anchor, fragment);
  return pop({
    get reposition() {
      return reposition;
    },
    ...legacy_api()
  });
}
if (import.meta.hot) {
  Event4 = hmr(Event4, () => Event4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Event4[HMR].source;
    set(Event4[HMR].source, module.default[HMR].original);
  });
}
var Event_default4 = Event4;

// node_modules/@event-calendar/core/src/plugins/time-grid/all-day/Day.svelte
Day4[FILENAME] = "node_modules/@event-calendar/core/src/plugins/time-grid/all-day/Day.svelte";
var root_33 = add_locations(from_html(`<div><!></div>`), Day4[FILENAME], [[53, 8]]);
var root17 = add_locations(from_html(`<div role="cell"><div><!></div> <!> <div><!></div></div>`), Day4[FILENAME], [[38, 0, [[44, 4], [57, 4]]]]);
function Day4($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Day4);
  const [$$stores, $$cleanup] = setup_stores();
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $highlightedDates = () => (validate_store(highlightedDates, "highlightedDates"), store_get(highlightedDates, "$highlightedDates", $$stores));
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  let iChunks = prop($$props, "iChunks", 19, () => []), resource = prop($$props, "resource", 3, void 0);
  let { highlightedDates, theme, validRange, _interaction, _today } = getContext("state");
  let el = tag(state(void 0), "el");
  let refs = [];
  let dayChunks = tag(user_derived(() => $$props.chunks.filter((chunk) => datesEqual(chunk.date, $$props.date))), "dayChunks");
  let dayBgChunks = tag(user_derived(() => $$props.bgChunks.filter((bgChunk) => datesEqual(bgChunk.date, $$props.date))), "dayBgChunks");
  let isToday = tag(user_derived(() => datesEqual($$props.date, $_today())), "isToday");
  let highlight = tag(user_derived(() => $highlightedDates().some((d) => datesEqual(d, $$props.date))), "highlight");
  let disabled = tag(user_derived(() => outsideRange($$props.date, $validRange())), "disabled");
  onMount(() => {
    setPayload(get(el), () => ({
      allDay: true,
      date: $$props.date,
      resource: resource(),
      dayEl: get(el),
      disabled: get(disabled)
    }));
  });
  function reposition() {
    if (!get(disabled)) {
      runReposition(refs, get(dayChunks));
    }
  }
  var div = root17();
  div.__pointerdown = function(...$$args) {
    apply(() => {
      var _a;
      return !get(disabled) ? (_a = $_interaction().action) == null ? void 0 : _a.select : void 0;
    }, this, $$args, Day4, [42, 19]);
  };
  var div_1 = child(div);
  var node = child(div_1);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      validate_each_keys(() => get(dayBgChunks), (chunk) => chunk.event);
      add_svelte_meta(
        () => each(node_1, 17, () => get(dayBgChunks), (chunk) => chunk.event, ($$anchor3, chunk) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(
            () => Event_default4(node_2, {
              get chunk() {
                return get(chunk);
              }
            }),
            "component",
            Day4,
            47,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_1);
        }),
        "each",
        Day4,
        46,
        12
      );
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!get(disabled)) $$render(consequent);
      }),
      "if",
      Day4,
      45,
      8
    );
  }
  reset(div_1);
  var node_3 = sibling(div_1, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var div_2 = root_33();
      var node_4 = child(div_2);
      add_svelte_meta(
        () => Event_default4(node_4, {
          get chunk() {
            return iChunks()[0];
          }
        }),
        "component",
        Day4,
        54,
        12,
        { componentTag: "Event" }
      );
      reset(div_2);
      template_effect(() => set_class(div_2, 1, `${$theme().events ?? ""} ${$theme().preview ?? ""}`));
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if (iChunks()[0] && datesEqual(iChunks()[0].date, $$props.date) && !get(disabled)) $$render(consequent_1);
      }),
      "if",
      Day4,
      52,
      4
    );
  }
  var div_3 = sibling(node_3, 2);
  var node_5 = child(div_3);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_6 = first_child(fragment_2);
      validate_each_keys(() => get(dayChunks), (chunk) => chunk.event);
      add_svelte_meta(
        () => each(node_6, 19, () => get(dayChunks), (chunk) => chunk.event, ($$anchor3, chunk, i) => {
          var fragment_3 = comment();
          var node_7 = first_child(fragment_3);
          add_svelte_meta(
            () => bind_this(
              Event_default4(node_7, {
                get chunk() {
                  return get(chunk);
                },
                get longChunks() {
                  return $$props.longChunks;
                }
              }),
              ($$value, i2) => refs[i2] = $$value,
              (i2) => refs == null ? void 0 : refs[i2],
              () => [get(i)]
            ),
            "component",
            Day4,
            61,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_3);
        }),
        "each",
        Day4,
        59,
        12
      );
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_5, ($$render) => {
        if (!get(disabled)) $$render(consequent_2);
      }),
      "if",
      Day4,
      58,
      8
    );
  }
  reset(div_3);
  reset(div);
  bind_this(div, ($$value) => set(el, $$value), () => get(el));
  template_effect(
    ($0) => {
      set_class(div, 1, `${$theme().day ?? ""} ${$0 ?? ""}${get(isToday) ? " " + $theme().today : ""}${get(highlight) ? " " + $theme().highlight : ""}${get(disabled) ? " " + $theme().disabled : ""}`);
      set_class(div_1, 1, $theme().bgEvents);
      set_class(div_3, 1, $theme().events);
    },
    [() => {
      var _a;
      return (_a = $theme().weekdays) == null ? void 0 : _a[$$props.date.getUTCDay()];
    }]
  );
  append($$anchor, div);
  var $$pop = pop({
    get reposition() {
      return reposition;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Day4 = hmr(Day4, () => Day4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Day4[HMR].source;
    set(Day4[HMR].source, module.default[HMR].original);
  });
}
var Day_default4 = Day4;
delegate(["pointerdown"]);

// node_modules/@event-calendar/core/src/plugins/time-grid/all-day/Week.svelte
Week2[FILENAME] = "node_modules/@event-calendar/core/src/plugins/time-grid/all-day/Week.svelte";
function Week2($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Week2);
  const [$$stores, $$cleanup] = setup_stores();
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $filterEventsWithResources = () => (validate_store(filterEventsWithResources, "filterEventsWithResources"), store_get(filterEventsWithResources, "$filterEventsWithResources", $$stores));
  const $resources = () => (validate_store(resources, "resources"), store_get(resources, "$resources", $$stores));
  const $_filteredEvents = () => (validate_store(_filteredEvents, "_filteredEvents"), store_get(_filteredEvents, "$_filteredEvents", $$stores));
  const $hiddenDays = () => (validate_store(hiddenDays, "hiddenDays"), store_get(hiddenDays, "$hiddenDays", $$stores));
  const $_iEvents = () => (validate_store(_iEvents, "_iEvents"), store_get(_iEvents, "$_iEvents", $$stores));
  let resource = prop($$props, "resource", 3, void 0);
  let {
    _filteredEvents,
    _iEvents,
    hiddenDays,
    resources,
    filterEventsWithResources,
    validRange
  } = getContext("state");
  let refs = [];
  let start = tag(user_derived(() => limitToRange($$props.dates[0], $validRange())), "start");
  let end = tag(user_derived(() => addDay(cloneDate(limitToRange($$props.dates.at(-1), $validRange())))), "end");
  let resourceFilter = tag(user_derived(() => resource() ?? ($filterEventsWithResources() ? $resources() : void 0)), "resourceFilter");
  let $$d = tag(
    user_derived(() => {
      let chunks2 = [];
      let bgChunks2 = [];
      for (let event2 of $_filteredEvents()) {
        if (event2.allDay && eventIntersects(event2, get(start), get(end), get(resourceFilter))) {
          let chunk = createEventChunk(event2, get(start), get(end));
          if (bgEvent(event2.display)) {
            bgChunks2.push(chunk);
          } else {
            chunks2.push(chunk);
          }
        }
      }
      prepareEventChunks(bgChunks2, $hiddenDays());
      let longChunks2 = prepareEventChunks(chunks2, $hiddenDays());
      return [chunks2, bgChunks2, longChunks2];
    }),
    "[$derived iterable]"
  ), $$array = tag(user_derived(() => to_array(get($$d), 3)), "[$derived iterable]"), chunks = tag(user_derived(() => get($$array)[0]), "chunks"), bgChunks = tag(user_derived(() => get($$array)[1]), "bgChunks"), longChunks = tag(user_derived(() => get($$array)[2]), "longChunks");
  function reposition() {
    runReposition(refs, $$props.dates);
  }
  user_effect(() => {
    get(chunks);
    untrack(reposition);
  });
  let iChunks = tag(
    user_derived(() => $_iEvents().map((event2) => {
      let chunk;
      if (event2 && event2.allDay && eventIntersects(event2, get(start), get(end), resource())) {
        chunk = createEventChunk(event2, get(start), get(end));
        prepareEventChunks([chunk], $hiddenDays());
      } else {
        chunk = null;
      }
      return chunk;
    })),
    "iChunks"
  );
  var fragment = comment();
  event("resize", $window, reposition);
  var node = first_child(fragment);
  add_svelte_meta(
    () => each(node, 17, () => $$props.dates, index, ($$anchor2, date, i) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => bind_this(
          Day_default4(node_1, {
            get date() {
              return get(date);
            },
            get chunks() {
              return get(chunks);
            },
            get bgChunks() {
              return get(bgChunks);
            },
            get longChunks() {
              return get(longChunks);
            },
            get iChunks() {
              return get(iChunks);
            },
            get resource() {
              return resource();
            }
          }),
          ($$value, i2) => refs[i2] = $$value,
          (i2) => refs == null ? void 0 : refs[i2],
          () => [i]
        ),
        "component",
        Week2,
        61,
        4,
        { componentTag: "Day" }
      );
      append($$anchor2, fragment_1);
    }),
    "each",
    Week2,
    59,
    0
  );
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Week2 = hmr(Week2, () => Week2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Week2[HMR].source;
    set(Week2[HMR].source, module.default[HMR].original);
  });
}
var Week_default2 = Week2;

// node_modules/@event-calendar/core/src/plugins/time-grid/View.svelte
View3[FILENAME] = "node_modules/@event-calendar/core/src/plugins/time-grid/View.svelte";
var root_24 = add_locations(from_html(`<div role="columnheader"><time></time></div>`), View3[FILENAME], [[15, 12, [[19, 16]]]]);
var root_34 = add_locations(from_html(`<div><div><!> <div></div></div></div>`), View3[FILENAME], [[30, 4, [[31, 8, [[35, 12]]]]]]);
var root18 = add_locations(from_html(`<div><!> <div></div></div> <!> <!>`, 1), View3[FILENAME], [[12, 0, [[27, 4]]]]);
function View3($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, View3);
  const [$$stores, $$cleanup] = setup_stores();
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $_intlDayHeaderAL = () => (validate_store(_intlDayHeaderAL, "_intlDayHeaderAL"), store_get(_intlDayHeaderAL, "$_intlDayHeaderAL", $$stores));
  const $_intlDayHeader = () => (validate_store(_intlDayHeader, "_intlDayHeader"), store_get(_intlDayHeader, "$_intlDayHeader", $$stores));
  const $allDaySlot = () => (validate_store(allDaySlot, "allDaySlot"), store_get(allDaySlot, "$allDaySlot", $$stores));
  let {
    _viewDates,
    _intlDayHeader,
    _intlDayHeaderAL,
    _today,
    allDaySlot,
    theme
  } = getContext("state");
  init();
  var fragment = root18();
  var div = first_child(fragment);
  var node = child(div);
  add_svelte_meta(
    () => Section_default(node, {
      children: wrap_snippet(View3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        add_svelte_meta(
          () => each(node_1, 1, $_viewDates, index, ($$anchor3, date) => {
            var div_1 = root_24();
            var time = child(div_1);
            action(time, ($$node, $$action_arg) => {
              var _a;
              return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
            }, () => $_intlDayHeader().format(get(date)));
            reset(div_1);
            template_effect(
              ($0, $1, $2, $3) => {
                set_class(div_1, 1, `${$theme().day ?? ""} ${$0 ?? ""}${$1 ?? ""}`);
                set_attribute(time, "datetime", $2);
                set_attribute(time, "aria-label", $3);
              },
              [
                () => {
                  var _a;
                  return (_a = $theme().weekdays) == null ? void 0 : _a[get(date).getUTCDay()];
                },
                () => datesEqual(get(date), $_today()) ? " " + $theme().today : "",
                () => toISOString(get(date), 10),
                () => $_intlDayHeaderAL().format(get(date))
              ]
            );
            append($$anchor3, div_1);
          }),
          "each",
          View3,
          14,
          8
        );
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    View3,
    13,
    4,
    { componentTag: "Section" }
  );
  var div_2 = sibling(node, 2);
  reset(div);
  var node_2 = sibling(div, 2);
  {
    var consequent = ($$anchor2) => {
      var div_3 = root_34();
      var div_4 = child(div_3);
      var node_3 = child(div_4);
      add_svelte_meta(
        () => Section_default(node_3, {
          children: wrap_snippet(View3, ($$anchor3, $$slotProps) => {
            var fragment_2 = comment();
            var node_4 = first_child(fragment_2);
            add_svelte_meta(
              () => Week_default2(node_4, {
                get dates() {
                  return $_viewDates();
                }
              }),
              "component",
              View3,
              33,
              16,
              { componentTag: "Week" }
            );
            append($$anchor3, fragment_2);
          }),
          $$slots: { default: true }
        }),
        "component",
        View3,
        32,
        12,
        { componentTag: "Section" }
      );
      var div_5 = sibling(node_3, 2);
      reset(div_4);
      reset(div_3);
      template_effect(() => {
        set_class(div_3, 1, $theme().allDay);
        set_class(div_4, 1, $theme().content);
        set_class(div_5, 1, $theme().hiddenScroll);
      });
      append($$anchor2, div_3);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if ($allDaySlot()) $$render(consequent);
      }),
      "if",
      View3,
      29,
      0
    );
  }
  var node_5 = sibling(node_2, 2);
  add_svelte_meta(
    () => Body_default3(node_5, {
      children: wrap_snippet(View3, ($$anchor2, $$slotProps) => {
        var fragment_3 = comment();
        var node_6 = first_child(fragment_3);
        add_svelte_meta(
          () => each(node_6, 1, $_viewDates, index, ($$anchor3, date) => {
            var fragment_4 = comment();
            var node_7 = first_child(fragment_4);
            add_svelte_meta(
              () => Day_default3(node_7, {
                get date() {
                  return get(date);
                }
              }),
              "component",
              View3,
              41,
              4,
              { componentTag: "Day" }
            );
            append($$anchor3, fragment_4);
          }),
          "each",
          View3,
          40,
          0
        );
        append($$anchor2, fragment_3);
      }),
      $$slots: { default: true }
    }),
    "component",
    View3,
    39,
    0,
    { componentTag: "Body" }
  );
  template_effect(() => {
    set_class(div, 1, $theme().header);
    set_class(div_2, 1, $theme().hiddenScroll);
  });
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  View3 = hmr(View3, () => View3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = View3[HMR].source;
    set(View3[HMR].source, module.default[HMR].original);
  });
}
var View_default3 = View3;

// node_modules/@event-calendar/core/src/plugins/time-grid/index.js
var time_grid_default = {
  createOptions(options) {
    options.buttonText.timeGridDay = "day";
    options.buttonText.timeGridWeek = "week";
    options.view = "timeGridWeek";
    options.views.timeGridDay = {
      buttonText: btnTextDay,
      component: View_default3,
      dayHeaderFormat: { weekday: "long" },
      duration: { days: 1 },
      theme: themeView("ec-time-grid ec-day-view"),
      titleFormat: { year: "numeric", month: "long", day: "numeric" }
    };
    options.views.timeGridWeek = {
      buttonText: btnTextWeek,
      component: View_default3,
      duration: { weeks: 1 },
      theme: themeView("ec-time-grid ec-week-view")
    };
  },
  createStores(state2) {
    state2._slotTimeLimits = slotTimeLimits(state2);
    state2._times = times(state2);
  }
};

// node_modules/@event-calendar/core/src/plugins/resource-time-grid/Label.svelte
Label[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-time-grid/Label.svelte";
var root19 = add_locations(from_html(`<span></span>`), Label[FILENAME], [[48, 0]]);
function Label($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Label);
  const [$$stores, $$cleanup] = setup_stores();
  const $resourceLabelContent = () => (validate_store(resourceLabelContent, "resourceLabelContent"), store_get(resourceLabelContent, "$resourceLabelContent", $$stores));
  const $_intlDayHeaderAL = () => (validate_store(_intlDayHeaderAL, "_intlDayHeaderAL"), store_get(_intlDayHeaderAL, "$_intlDayHeaderAL", $$stores));
  const $resourceLabelDidMount = () => (validate_store(resourceLabelDidMount, "resourceLabelDidMount"), store_get(resourceLabelDidMount, "$resourceLabelDidMount", $$stores));
  let date = prop($$props, "date", 3, void 0), setLabel = prop($$props, "setLabel", 3, void 0);
  let {
    resourceLabelContent,
    resourceLabelDidMount,
    _intlDayHeaderAL
  } = getContext("state");
  let el = tag(state(void 0), "el");
  let content = tag(
    user_derived(() => {
      if ($resourceLabelContent()) {
        return isFunction($resourceLabelContent()) ? $resourceLabelContent()({
          resource: $$props.resource,
          date: date() ? toLocalDate(date()) : void 0
        }) : $resourceLabelContent();
      } else {
        return $$props.resource.title;
      }
    }),
    "content"
  );
  let ariaLabel = tag(state(void 0), "ariaLabel");
  user_effect(() => {
    get(content);
    untrack(() => {
      if (date()) {
        set(ariaLabel, $_intlDayHeaderAL().format(date()) + ", " + get(el).innerText);
      } else if (setLabel()) {
        set(ariaLabel, void 0);
        setLabel()(get(el).innerText);
      }
    });
  });
  onMount(() => {
    if (isFunction($resourceLabelDidMount())) {
      $resourceLabelDidMount()({
        resource: $$props.resource,
        date: date() ? toLocalDate(date()) : void 0,
        el: get(el)
      });
    }
  });
  var span = root19();
  bind_this(span, ($$value) => set(el, $$value), () => get(el));
  action(span, ($$node, $$action_arg) => {
    var _a;
    return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
  }, () => get(content));
  template_effect(() => set_attribute(span, "aria-label", get(ariaLabel)));
  append($$anchor, span);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Label = hmr(Label, () => Label[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Label[HMR].source;
    set(Label[HMR].source, module.default[HMR].original);
  });
}
var Label_default = Label;

// node_modules/@event-calendar/core/src/plugins/resource-time-grid/View.svelte
View4[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-time-grid/View.svelte";
var root_35 = add_locations(from_html(`<div><time></time></div>`), View4[FILENAME], [[21, 20, [[22, 24]]]]);
var root_43 = add_locations(from_html(`<div><!></div>`), View4[FILENAME], [[29, 20]]);
var root_7 = add_locations(from_html(`<div role="columnheader"><!></div>`), View4[FILENAME], [[37, 32]]);
var root_82 = add_locations(from_html(`<div role="columnheader"><time></time></div>`), View4[FILENAME], [[41, 32, [[45, 36]]]]);
var root_52 = add_locations(from_html(`<div></div>`), View4[FILENAME], [[34, 20]]);
var root_25 = add_locations(from_html(`<div><!> <!></div>`), View4[FILENAME], [[19, 12]]);
var root_122 = add_locations(from_html(`<div></div>`), View4[FILENAME], [[66, 24]]);
var root_152 = add_locations(from_html(`<div><!></div>`), View4[FILENAME], [[74, 24]]);
var root_9 = add_locations(from_html(`<div><div><!> <div></div></div></div>`), View4[FILENAME], [[61, 4, [[62, 8, [[80, 12]]]]]]);
var root_172 = add_locations(from_html(`<div></div>`), View4[FILENAME], [[86, 4]]);
var root20 = add_locations(from_html(`<div><!> <div></div></div> <!> <!>`, 1), View4[FILENAME], [[16, 0, [[58, 4]]]]);
function View4($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, View4);
  const [$$stores, $$cleanup] = setup_stores();
  const $datesAboveResources = () => (validate_store(datesAboveResources, "datesAboveResources"), store_get(datesAboveResources, "$datesAboveResources", $$stores));
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $_viewResources = () => (validate_store(_viewResources, "_viewResources"), store_get(_viewResources, "$_viewResources", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $_intlDayHeaderAL = () => (validate_store(_intlDayHeaderAL, "_intlDayHeaderAL"), store_get(_intlDayHeaderAL, "$_intlDayHeaderAL", $$stores));
  const $_intlDayHeader = () => (validate_store(_intlDayHeader, "_intlDayHeader"), store_get(_intlDayHeader, "$_intlDayHeader", $$stores));
  const $allDaySlot = () => (validate_store(allDaySlot, "allDaySlot"), store_get(allDaySlot, "$allDaySlot", $$stores));
  let {
    datesAboveResources,
    _today,
    _viewDates,
    _viewResources,
    _intlDayHeader,
    _intlDayHeaderAL,
    allDaySlot,
    theme
  } = getContext("state");
  let loops = tag(
    user_derived(() => $datesAboveResources() ? [$_viewDates(), $_viewResources()] : [$_viewResources(), $_viewDates()]),
    "loops"
  );
  let resourceLabels = tag_proxy(proxy([]), "resourceLabels");
  var fragment = root20();
  var div = first_child(fragment);
  var node = child(div);
  add_svelte_meta(
    () => Section_default(node, {
      children: wrap_snippet(View4, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        add_svelte_meta(
          () => each(node_1, 17, () => get(loops)[0], index, ($$anchor3, item0, i) => {
            var div_1 = root_25();
            var node_2 = child(div_1);
            {
              var consequent = ($$anchor4) => {
                var div_2 = root_35();
                var time = child(div_2);
                action(time, ($$node, $$action_arg) => {
                  var _a;
                  return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
                }, () => $_intlDayHeader().format(get(item0)));
                reset(div_2);
                template_effect(
                  ($0, $1, $2, $3) => {
                    set_class(div_2, 1, `${$theme().day ?? ""} ${$0 ?? ""}${$1 ?? ""}`);
                    set_attribute(time, "datetime", $2);
                    set_attribute(time, "aria-label", $3);
                  },
                  [
                    () => {
                      var _a;
                      return (_a = $theme().weekdays) == null ? void 0 : _a[get(item0).getUTCDay()];
                    },
                    () => datesEqual(get(item0), $_today()) ? " " + $theme().today : "",
                    () => toISOString(get(item0), 10),
                    () => $_intlDayHeaderAL().format(get(item0))
                  ]
                );
                append($$anchor4, div_2);
              };
              var alternate = ($$anchor4) => {
                var div_3 = root_43();
                var node_3 = child(div_3);
                add_svelte_meta(
                  () => Label_default(node_3, {
                    get resource() {
                      return get(item0);
                    },
                    setLabel: (e) => assign(resourceLabels, i, e.detail + ", ", "node_modules/​@event-calendar/​core/​src/​plugins/​resource-time-grid/​View.svelte:30:63")
                  }),
                  "component",
                  View4,
                  30,
                  24,
                  { componentTag: "Label" }
                );
                reset(div_3);
                template_effect(() => set_class(div_3, 1, $theme().day));
                append($$anchor4, div_3);
              };
              add_svelte_meta(
                () => if_block(node_2, ($$render) => {
                  if ($datesAboveResources()) $$render(consequent);
                  else $$render(alternate, false);
                }),
                "if",
                View4,
                20,
                16
              );
            }
            var node_4 = sibling(node_2, 2);
            {
              var consequent_2 = ($$anchor4) => {
                var div_4 = root_52();
                add_svelte_meta(
                  () => each(div_4, 21, () => get(loops)[1], index, ($$anchor5, item1) => {
                    var fragment_2 = comment();
                    var node_5 = first_child(fragment_2);
                    {
                      var consequent_1 = ($$anchor6) => {
                        var div_5 = root_7();
                        var node_6 = child(div_5);
                        add_svelte_meta(
                          () => Label_default(node_6, {
                            get resource() {
                              return get(item1);
                            },
                            get date() {
                              return get(item0);
                            }
                          }),
                          "component",
                          View4,
                          38,
                          36,
                          { componentTag: "Label" }
                        );
                        reset(div_5);
                        template_effect(() => set_class(div_5, 1, $theme().day));
                        append($$anchor6, div_5);
                      };
                      var alternate_1 = ($$anchor6) => {
                        var div_6 = root_82();
                        var time_1 = child(div_6);
                        action(time_1, ($$node, $$action_arg) => {
                          var _a;
                          return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
                        }, () => $_intlDayHeader().format(get(item1)));
                        reset(div_6);
                        template_effect(
                          ($0, $1, $2, $3) => {
                            set_class(div_6, 1, `${$theme().day ?? ""} ${$0 ?? ""}${$1 ?? ""}`);
                            set_attribute(time_1, "datetime", $2);
                            set_attribute(time_1, "aria-label", `${resourceLabels[i] ?? ""}${$3 ?? ""}`);
                          },
                          [
                            () => {
                              var _a;
                              return (_a = $theme().weekdays) == null ? void 0 : _a[get(item1).getUTCDay()];
                            },
                            () => datesEqual(get(item1), $_today()) ? " " + $theme().today : "",
                            () => toISOString(get(item1), 10),
                            () => $_intlDayHeaderAL().format(get(item1))
                          ]
                        );
                        append($$anchor6, div_6);
                      };
                      add_svelte_meta(
                        () => if_block(node_5, ($$render) => {
                          if ($datesAboveResources()) $$render(consequent_1);
                          else $$render(alternate_1, false);
                        }),
                        "if",
                        View4,
                        36,
                        28
                      );
                    }
                    append($$anchor5, fragment_2);
                  }),
                  "each",
                  View4,
                  35,
                  24
                );
                reset(div_4);
                template_effect(() => set_class(div_4, 1, $theme().days));
                append($$anchor4, div_4);
              };
              add_svelte_meta(
                () => if_block(node_4, ($$render) => {
                  if (get(loops)[1].length > 1) $$render(consequent_2);
                }),
                "if",
                View4,
                33,
                16
              );
            }
            reset(div_1);
            template_effect(() => set_class(div_1, 1, $theme().resource));
            append($$anchor3, div_1);
          }),
          "each",
          View4,
          18,
          8
        );
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    View4,
    17,
    4,
    { componentTag: "Section" }
  );
  var div_7 = sibling(node, 2);
  reset(div);
  var node_7 = sibling(div, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var div_8 = root_9();
      var div_9 = child(div_8);
      var node_8 = child(div_9);
      add_svelte_meta(
        () => Section_default(node_8, {
          children: wrap_snippet(View4, ($$anchor3, $$slotProps) => {
            var fragment_3 = comment();
            var node_9 = first_child(fragment_3);
            {
              var consequent_3 = ($$anchor4) => {
                var fragment_4 = comment();
                var node_10 = first_child(fragment_4);
                add_svelte_meta(
                  () => each(node_10, 1, $_viewDates, index, ($$anchor5, date) => {
                    var div_10 = root_122();
                    add_svelte_meta(
                      () => each(div_10, 5, $_viewResources, index, ($$anchor6, resource) => {
                        var fragment_5 = comment();
                        var node_11 = first_child(fragment_5);
                        {
                          let $0 = user_derived(() => [get(date)]);
                          add_svelte_meta(
                            () => Week_default2(node_11, {
                              get dates() {
                                return get($0);
                              },
                              get resource() {
                                return get(resource);
                              }
                            }),
                            "component",
                            View4,
                            68,
                            32,
                            { componentTag: "Week" }
                          );
                        }
                        append($$anchor6, fragment_5);
                      }),
                      "each",
                      View4,
                      67,
                      28
                    );
                    reset(div_10);
                    template_effect(() => set_class(div_10, 1, $theme().resource));
                    append($$anchor5, div_10);
                  }),
                  "each",
                  View4,
                  65,
                  20
                );
                append($$anchor4, fragment_4);
              };
              var alternate_2 = ($$anchor4) => {
                var fragment_6 = comment();
                var node_12 = first_child(fragment_6);
                add_svelte_meta(
                  () => each(node_12, 1, $_viewResources, index, ($$anchor5, resource) => {
                    var div_11 = root_152();
                    var node_13 = child(div_11);
                    add_svelte_meta(
                      () => Week_default2(node_13, {
                        get dates() {
                          return $_viewDates();
                        },
                        get resource() {
                          return get(resource);
                        }
                      }),
                      "component",
                      View4,
                      75,
                      28,
                      { componentTag: "Week" }
                    );
                    reset(div_11);
                    template_effect(() => set_class(div_11, 1, $theme().resource));
                    append($$anchor5, div_11);
                  }),
                  "each",
                  View4,
                  73,
                  20
                );
                append($$anchor4, fragment_6);
              };
              add_svelte_meta(
                () => if_block(node_9, ($$render) => {
                  if ($datesAboveResources()) $$render(consequent_3);
                  else $$render(alternate_2, false);
                }),
                "if",
                View4,
                64,
                16
              );
            }
            append($$anchor3, fragment_3);
          }),
          $$slots: { default: true }
        }),
        "component",
        View4,
        63,
        12,
        { componentTag: "Section" }
      );
      var div_12 = sibling(node_8, 2);
      reset(div_9);
      reset(div_8);
      template_effect(() => {
        set_class(div_8, 1, $theme().allDay);
        set_class(div_9, 1, $theme().content);
        set_class(div_12, 1, $theme().hiddenScroll);
      });
      append($$anchor2, div_8);
    };
    add_svelte_meta(
      () => if_block(node_7, ($$render) => {
        if ($allDaySlot()) $$render(consequent_4);
      }),
      "if",
      View4,
      60,
      0
    );
  }
  var node_14 = sibling(node_7, 2);
  add_svelte_meta(
    () => Body_default3(node_14, {
      children: wrap_snippet(View4, ($$anchor2, $$slotProps) => {
        var fragment_7 = comment();
        var node_15 = first_child(fragment_7);
        add_svelte_meta(
          () => each(node_15, 17, () => get(loops)[0], index, ($$anchor3, item0) => {
            var div_13 = root_172();
            add_svelte_meta(
              () => each(div_13, 21, () => get(loops)[1], index, ($$anchor4, item1) => {
                var fragment_8 = comment();
                var node_16 = first_child(fragment_8);
                {
                  let $0 = user_derived(() => $datesAboveResources() ? get(item0) : get(item1));
                  let $1 = user_derived(() => $datesAboveResources() ? get(item1) : get(item0));
                  add_svelte_meta(
                    () => Day_default3(node_16, {
                      get date() {
                        return get($0);
                      },
                      get resource() {
                        return get($1);
                      }
                    }),
                    "component",
                    View4,
                    88,
                    12,
                    { componentTag: "Day" }
                  );
                }
                append($$anchor4, fragment_8);
              }),
              "each",
              View4,
              87,
              8
            );
            reset(div_13);
            template_effect(() => set_class(div_13, 1, $theme().resource));
            append($$anchor3, div_13);
          }),
          "each",
          View4,
          85,
          0
        );
        append($$anchor2, fragment_7);
      }),
      $$slots: { default: true }
    }),
    "component",
    View4,
    84,
    0,
    { componentTag: "Body" }
  );
  template_effect(() => {
    set_class(div, 1, $theme().header);
    set_class(div_7, 1, $theme().hiddenScroll);
  });
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  View4 = hmr(View4, () => View4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = View4[HMR].source;
    set(View4[HMR].source, module.default[HMR].original);
  });
}
var View_default4 = View4;

// node_modules/@event-calendar/core/src/plugins/resource-time-grid/index.js
var resource_time_grid_default = {
  createOptions(options) {
    options.datesAboveResources = false;
    options.buttonText.resourceTimeGridDay = "resources";
    options.buttonText.resourceTimeGridWeek = "resources";
    options.view = "resourceTimeGridWeek";
    options.views.resourceTimeGridDay = {
      buttonText: btnTextDay,
      component: View_default4,
      duration: { days: 1 },
      theme: themeView("ec-time-grid ec-resource-day-view")
    };
    options.views.resourceTimeGridWeek = {
      buttonText: btnTextWeek,
      component: View_default4,
      duration: { weeks: 1 },
      theme: themeView("ec-time-grid ec-resource-week-view")
    };
  },
  createStores(state2) {
    if (!("_times" in state2)) {
      time_grid_default.createStores(state2);
    }
    if (!("_viewResources" in state2)) {
      state2._viewResources = viewResources(state2);
    }
  }
};

// node_modules/@event-calendar/core/src/plugins/resource-timeline/stores.js
function dayTimeLimits(state2) {
  return derived(
    [state2.slotMinTime, state2.slotMaxTime, state2.flexibleSlotTimeLimits, state2._viewDates, state2._filteredEvents],
    ([$slotMinTime, $slotMaxTime, $flexibleSlotTimeLimits, $_viewDates, $_filteredEvents]) => {
      let dayTimeLimits2 = {};
      for (let date of $_viewDates) {
        dayTimeLimits2[date.getTime()] = createSlotTimeLimits(
          $slotMinTime,
          $slotMaxTime,
          $flexibleSlotTimeLimits,
          [date],
          $_filteredEvents
        );
      }
      return dayTimeLimits2;
    }
  );
}
function dayTimes(state2) {
  return derived(
    [state2._viewDates, state2.slotDuration, state2.slotLabelInterval, state2._dayTimeLimits, state2._intlSlotLabel],
    ([$_viewDates, $slotDuration, $slotLabelInterval, $_dayTimeLimits, $_intlSlotLabel]) => {
      let dayTimes2 = {};
      for (let date of $_viewDates) {
        let time = date.getTime();
        dayTimes2[time] = time in $_dayTimeLimits ? createTimes(date, $slotDuration, $slotLabelInterval, $_dayTimeLimits[time], $_intlSlotLabel) : [];
      }
      return dayTimes2;
    }
  );
}
function nestedResources(state2) {
  return derived(state2.resources, ($resources) => $resources.some((resource) => getPayload(resource).children.length));
}

// node_modules/@event-calendar/core/src/plugins/resource-timeline/Label.svelte
Label2[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/Label.svelte";
var root21 = add_locations(from_html(`<span></span>`), Label2[FILENAME], [[35, 0]]);
function Label2($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Label2);
  const [$$stores, $$cleanup] = setup_stores();
  const $resourceLabelContent = () => (validate_store(resourceLabelContent, "resourceLabelContent"), store_get(resourceLabelContent, "$resourceLabelContent", $$stores));
  const $resourceLabelDidMount = () => (validate_store(resourceLabelDidMount, "resourceLabelDidMount"), store_get(resourceLabelDidMount, "$resourceLabelDidMount", $$stores));
  let date = prop($$props, "date", 3, void 0);
  let { resourceLabelContent, resourceLabelDidMount } = getContext("state");
  let el = tag(state(void 0), "el");
  let content = tag(
    user_derived(() => {
      if ($resourceLabelContent()) {
        return isFunction($resourceLabelContent()) ? $resourceLabelContent()({
          resource: $$props.resource,
          date: date() ? toLocalDate(date()) : void 0
        }) : $resourceLabelContent();
      } else {
        return $$props.resource.title;
      }
    }),
    "content"
  );
  onMount(() => {
    if (isFunction($resourceLabelDidMount())) {
      $resourceLabelDidMount()({
        resource: $$props.resource,
        date: date() ? toLocalDate(date()) : void 0,
        el: get(el)
      });
    }
  });
  var span = root21();
  bind_this(span, ($$value) => set(el, $$value), () => get(el));
  action(span, ($$node, $$action_arg) => {
    var _a;
    return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
  }, () => get(content));
  append($$anchor, span);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Label2 = hmr(Label2, () => Label2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Label2[HMR].source;
    set(Label2[HMR].source, module.default[HMR].original);
  });
}
var Label_default2 = Label2;

// node_modules/@event-calendar/core/src/plugins/resource-timeline/Expander.svelte
Expander[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/Expander.svelte";
function onclick2(_, expanded, payload, toggle, resources) {
  set(expanded, !get(expanded));
  get(payload).expanded = get(expanded);
  toggle(get(payload).children, get(expanded));
  resources.update(identity);
}
var root_111 = add_locations(from_html(`<span></span>`), Expander[FILENAME], [[36, 4]]);
var root_26 = add_locations(from_html(`<button><!></button>`), Expander[FILENAME], [[41, 8]]);
var root22 = add_locations(from_html(`<!> <span><!></span>`, 1), Expander[FILENAME], [[39, 0]]);
function Expander($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Expander);
  const [$$stores, $$cleanup] = setup_stores();
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  let { resources, theme } = getContext("state");
  let payload = tag(state({}), "payload");
  let expanded = tag(state(true), "expanded");
  user_pre_effect(() => {
    set(payload, getPayload($$props.resource));
    set(expanded, get(payload).expanded, true);
  });
  function toggle(children, expand) {
    for (let child2 of children) {
      let payload2 = getPayload(child2);
      payload2.hidden = !expand;
      if (payload2.expanded) {
        toggle(payload2.children, expand);
      }
    }
  }
  var fragment = root22();
  var node = first_child(fragment);
  add_svelte_meta(
    () => each(node, 17, () => Array(get(payload).level), index, ($$anchor2, level) => {
      var span = root_111();
      template_effect(() => set_class(span, 1, $theme().expander));
      append($$anchor2, span);
    }),
    "each",
    Expander,
    35,
    0
  );
  var span_1 = sibling(node, 2);
  var node_1 = child(span_1);
  {
    var consequent_1 = ($$anchor2) => {
      var button = root_26();
      button.__click = [onclick2, expanded, payload, toggle, resources];
      var node_2 = child(button);
      {
        var consequent = ($$anchor3) => {
          var text2 = text("−");
          append($$anchor3, text2);
        };
        var alternate = ($$anchor3) => {
          var text_1 = text("+");
          append($$anchor3, text_1);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if (get(expanded)) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          Expander,
          42,
          12
        );
      }
      reset(button);
      template_effect(() => set_class(button, 1, $theme().button));
      append($$anchor2, button);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        var _a;
        if ((_a = get(payload).children) == null ? void 0 : _a.length) $$render(consequent_1);
      }),
      "if",
      Expander,
      40,
      4
    );
  }
  reset(span_1);
  template_effect(() => set_class(span_1, 1, $theme().expander));
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Expander = hmr(Expander, () => Expander[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Expander[HMR].source;
    set(Expander[HMR].source, module.default[HMR].original);
  });
}
var Expander_default = Expander;
delegate(["click"]);

// node_modules/@event-calendar/core/src/plugins/resource-timeline/Sidebar.svelte
Sidebar[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/Sidebar.svelte";
var root_112 = add_locations(from_html(`<div role="rowheader"><!> <!></div>`), Sidebar[FILENAME], [[20, 12]]);
var root23 = add_locations(from_html(`<div><div></div> <div></div></div>`), Sidebar[FILENAME], [[16, 0, [[17, 4], [18, 4]]]]);
function Sidebar($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Sidebar);
  const [$$stores, $$cleanup] = setup_stores();
  const $_bodyEl = () => (validate_store(_bodyEl, "_bodyEl"), store_get(_bodyEl, "$_bodyEl", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_headerHeight = () => (validate_store(_headerHeight, "_headerHeight"), store_get(_headerHeight, "$_headerHeight", $$stores));
  const $_sidebarEl = () => (validate_store(_sidebarEl, "_sidebarEl"), store_get(_sidebarEl, "$_sidebarEl", $$stores));
  const $_viewResources = () => (validate_store(_viewResources, "_viewResources"), store_get(_viewResources, "$_viewResources", $$stores));
  const $_resHs = () => (validate_store(_resHs, "_resHs"), store_get(_resHs, "$_resHs", $$stores));
  const $_nestedResources = () => (validate_store(_nestedResources, "_nestedResources"), store_get(_nestedResources, "$_nestedResources", $$stores));
  let {
    _viewResources,
    _headerHeight,
    _bodyEl,
    _resHs,
    _sidebarEl,
    _nestedResources,
    theme
  } = getContext("state");
  function onwheel(jsEvent) {
    $_bodyEl().scrollBy({ top: jsEvent.deltaY < 0 ? -30 : 30 });
  }
  init();
  var div = root23();
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  add_svelte_meta(
    () => each(div_2, 5, $_viewResources, index, ($$anchor2, resource) => {
      var div_3 = root_112();
      var node = child(div_3);
      {
        var consequent = ($$anchor3) => {
          var fragment = comment();
          var node_1 = first_child(fragment);
          add_svelte_meta(
            () => Expander_default(node_1, {
              get resource() {
                return get(resource);
              }
            }),
            "component",
            Sidebar,
            22,
            20,
            { componentTag: "Expander" }
          );
          append($$anchor3, fragment);
        };
        add_svelte_meta(
          () => if_block(node, ($$render) => {
            if ($_nestedResources()) $$render(consequent);
          }),
          "if",
          Sidebar,
          21,
          16
        );
      }
      var node_2 = sibling(node, 2);
      add_svelte_meta(
        () => Label_default2(node_2, {
          get resource() {
            return get(resource);
          }
        }),
        "component",
        Sidebar,
        24,
        16,
        { componentTag: "Label" }
      );
      reset(div_3);
      template_effect(
        ($0) => {
          set_class(div_3, 1, $theme().resource);
          set_style(div_3, `flex-basis: ${$0 ?? ""}px`);
        },
        [() => max($_resHs().get(get(resource)) ?? 0, 34)]
      );
      append($$anchor2, div_3);
    }),
    "each",
    Sidebar,
    19,
    8
  );
  reset(div_2);
  bind_this(div_2, ($$value) => store_set(_sidebarEl, $$value), () => $_sidebarEl());
  reset(div);
  template_effect(() => {
    set_class(div, 1, $theme().sidebar);
    set_class(div_1, 1, $theme().sidebarTitle);
    set_style(div_1, `flex-basis: ${$_headerHeight() ?? ""}px`);
    set_class(div_2, 1, $theme().content);
  });
  event("wheel", div_2, onwheel);
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Sidebar = hmr(Sidebar, () => Sidebar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sidebar[HMR].source;
    set(Sidebar[HMR].source, module.default[HMR].original);
  });
}
var Sidebar_default = Sidebar;

// node_modules/@event-calendar/core/src/plugins/resource-timeline/Header.svelte
Header2[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/Header.svelte";
var root_36 = add_locations(from_html(`<div role="columnheader"><time></time></div>`), Header2[FILENAME], [[23, 28, [[24, 32]]]]);
var root_27 = add_locations(from_html(`<div><time></time></div> <div></div>`, 1), Header2[FILENAME], [[14, 20, [[15, 24]]], [21, 20]]);
var root_44 = add_locations(from_html(`<div role="columnheader"><time></time></div>`), Header2[FILENAME], [[32, 20, [[33, 24]]]]);
var root_113 = add_locations(from_html(`<div><!></div>`), Header2[FILENAME], [[12, 12]]);
var root24 = add_locations(from_html(`<div><div role="row"></div> <div></div></div>`), Header2[FILENAME], [[9, 0, [[10, 4], [43, 4]]]]);
function Header2($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Header2);
  const [$$stores, $$cleanup] = setup_stores();
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_headerEl = () => (validate_store(_headerEl, "_headerEl"), store_get(_headerEl, "$_headerEl", $$stores));
  const $_headerHeight = () => (validate_store(_headerHeight, "_headerHeight"), store_get(_headerHeight, "$_headerHeight", $$stores));
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $_intlDayHeaderAL = () => (validate_store(_intlDayHeaderAL, "_intlDayHeaderAL"), store_get(_intlDayHeaderAL, "$_intlDayHeaderAL", $$stores));
  const $_intlDayHeader = () => (validate_store(_intlDayHeader, "_intlDayHeader"), store_get(_intlDayHeader, "$_intlDayHeader", $$stores));
  const $_dayTimes = () => (validate_store(_dayTimes, "_dayTimes"), store_get(_dayTimes, "$_dayTimes", $$stores));
  let {
    _headerEl,
    _headerHeight,
    _intlDayHeader,
    _intlDayHeaderAL,
    _dayTimes,
    _today,
    _viewDates,
    slotDuration,
    theme
  } = getContext("state");
  init();
  var div = root24();
  var div_1 = child(div);
  add_svelte_meta(
    () => each(div_1, 5, $_viewDates, index, ($$anchor2, date) => {
      var div_2 = root_113();
      var node = child(div_2);
      {
        var consequent = ($$anchor3) => {
          var fragment = root_27();
          var div_3 = first_child(fragment);
          var time_1 = child(div_3);
          action(time_1, ($$node, $$action_arg) => {
            var _a;
            return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
          }, () => $_intlDayHeader().format(get(date)));
          reset(div_3);
          var div_4 = sibling(div_3, 2);
          add_svelte_meta(
            () => each(div_4, 5, () => $_dayTimes()[get(date).getTime()], index, ($$anchor4, time) => {
              var div_5 = root_36();
              var time_2 = child(div_5);
              action(time_2, ($$node, $$action_arg) => {
                var _a;
                return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
              }, () => get(time)[1]);
              reset(div_5);
              template_effect(() => {
                set_class(div_5, 1, `${$theme().time ?? ""}${get(time)[2] ? "" : " " + $theme().minor}`);
                set_attribute(time_2, "datetime", get(time)[0]);
              });
              append($$anchor4, div_5);
            }),
            "each",
            Header2,
            22,
            24
          );
          reset(div_4);
          template_effect(
            ($0, $1) => {
              set_class(div_3, 1, $theme().dayHead);
              set_attribute(time_1, "datetime", $0);
              set_attribute(time_1, "aria-label", $1);
              set_class(div_4, 1, $theme().times);
            },
            [
              () => toISOString(get(date), 10),
              () => $_intlDayHeaderAL().format(get(date))
            ]
          );
          append($$anchor3, fragment);
        };
        var alternate = ($$anchor3) => {
          var div_6 = root_44();
          var time_3 = child(div_6);
          action(time_3, ($$node, $$action_arg) => {
            var _a;
            return (_a = setContent) == null ? void 0 : _a($$node, $$action_arg);
          }, () => $_intlDayHeader().format(get(date)));
          reset(div_6);
          template_effect(
            ($0, $1) => {
              set_class(div_6, 1, $theme().time);
              set_attribute(time_3, "datetime", $0);
              set_attribute(time_3, "aria-label", $1);
            },
            [
              () => toISOString(get(date), 10),
              () => $_intlDayHeaderAL().format(get(date))
            ]
          );
          append($$anchor3, div_6);
        };
        add_svelte_meta(
          () => if_block(node, ($$render) => {
            if (toSeconds($slotDuration())) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          Header2,
          13,
          16
        );
      }
      reset(div_2);
      template_effect(($0, $1) => set_class(div_2, 1, `${$theme().day ?? ""} ${$0 ?? ""}${$1 ?? ""}`), [
        () => {
          var _a;
          return (_a = $theme().weekdays) == null ? void 0 : _a[get(date).getUTCDay()];
        },
        () => datesEqual(get(date), $_today()) ? " " + $theme().today : ""
      ]);
      append($$anchor2, div_2);
    }),
    "each",
    Header2,
    11,
    8
  );
  reset(div_1);
  var div_7 = sibling(div_1, 2);
  reset(div);
  bind_this(div, ($$value) => store_set(_headerEl, $$value), () => $_headerEl());
  action(div, ($$node, $$action_arg) => {
    var _a;
    return (_a = observeResize) == null ? void 0 : _a($$node, $$action_arg);
  }, () => () => store_set(_headerHeight, $_headerEl().clientHeight));
  template_effect(() => {
    set_class(div, 1, $theme().header);
    set_class(div_1, 1, $theme().days);
    set_class(div_7, 1, $theme().hiddenScroll);
  });
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Header2 = hmr(Header2, () => Header2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Header2[HMR].source;
    set(Header2[HMR].source, module.default[HMR].original);
  });
}
var Header_default2 = Header2;

// node_modules/@event-calendar/core/src/plugins/resource-timeline/lib.js
function prepareEventChunks2(chunks, $_viewDates, $_dayTimeLimits, $slotDuration) {
  let longChunks = {};
  let filteredChunks = [];
  if (chunks.length) {
    sortEventChunks(chunks);
    let step = toSeconds($slotDuration);
    let prevChunk;
    for (let chunk of chunks) {
      let prevDayEnd;
      if (step) {
        let slots = 0;
        for (let i = 0; i < $_viewDates.length; ++i) {
          let slotTimeLimits2 = getSlotTimeLimits($_dayTimeLimits, $_viewDates[i]);
          let dayStart = addDuration(cloneDate($_viewDates[i]), slotTimeLimits2.min);
          let dayEnd = addDuration(cloneDate($_viewDates[i]), slotTimeLimits2.max);
          if (!chunk.date) {
            if (chunk.start < dayEnd && chunk.end > dayStart) {
              chunk.date = $_viewDates[i];
              if (chunk.start < dayStart) {
                chunk.start = dayStart;
              }
              chunk.offset = (chunk.start - dayStart) / 1e3 / step;
              if (chunk.end > dayEnd) {
                slots += dayEnd - chunk.start;
              } else {
                slots += chunk.end - chunk.start || step * 1e3;
                break;
              }
            }
          } else {
            if (chunk.end <= dayStart) {
              chunk.end = prevDayEnd;
              break;
            }
            let key = $_viewDates[i].getTime();
            if (longChunks[key]) {
              longChunks[key].push(chunk);
            } else {
              longChunks[key] = [chunk];
            }
            if (chunk.end > dayEnd) {
              slots += dayEnd - dayStart;
            } else {
              slots += chunk.end - dayStart;
              break;
            }
          }
          prevDayEnd = dayEnd;
        }
        chunk.slots = slots / 1e3 / step;
      } else {
        let days2 = 0;
        for (let i = 0; i < $_viewDates.length; ++i) {
          let dayStart = $_viewDates[i];
          let dayEnd = addDay(cloneDate(dayStart));
          if (!chunk.date) {
            if (chunk.start < dayEnd) {
              chunk.date = dayStart;
              if (chunk.start < dayStart) {
                chunk.start = dayStart;
              }
              ++days2;
            }
          } else {
            if (chunk.end <= dayStart) {
              chunk.end = prevDayEnd;
              break;
            }
            let key = dayStart.getTime();
            if (longChunks[key]) {
              longChunks[key].push(chunk);
            } else {
              longChunks[key] = [chunk];
            }
            ++days2;
          }
          prevDayEnd = dayEnd;
        }
        chunk.days = days2;
      }
      if (!chunk.date) {
        continue;
      }
      if (prevChunk && datesEqual(prevChunk.date, chunk.date)) {
        chunk.prev = prevChunk;
      }
      prevChunk = chunk;
      filteredChunks.push(chunk);
    }
  }
  return [filteredChunks, longChunks];
}
function repositionEvent2(chunk, dayChunks, longChunks, height2, allDay) {
  chunk.top = 0;
  chunk.bottom = height2;
  let margin = 1;
  let key = chunk.date.getTime();
  longChunks = (longChunks == null ? void 0 : longChunks[key]) ?? [];
  let chunks = [...dayChunks, ...longChunks];
  chunks.sort((a, b) => (a.top ?? 0) - (b.top ?? 0) || a.start - b.start || b.event.allDay - a.event.allDay);
  for (let dayChunk of chunks) {
    if (dayChunk === chunk) {
      continue;
    }
    if ((allDay || chunk.start < dayChunk.end && chunk.end > dayChunk.start) && chunk.top < dayChunk.bottom && chunk.bottom > dayChunk.top) {
      let offset = dayChunk.bottom - chunk.top + 1;
      margin += offset;
      chunk.top += offset;
      chunk.bottom += offset;
    }
  }
  return margin;
}
function getSlotTimeLimits($_dayTimeLimits, date) {
  return $_dayTimeLimits[date.getTime()] ?? { min: createDuration(0), max: createDuration(0) };
}

// node_modules/@event-calendar/core/src/plugins/resource-timeline/Event.svelte
Event5[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/Event.svelte";
function Event5($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Event5);
  const [$$stores, $$cleanup] = setup_stores();
  const $slotWidth = () => (validate_store(slotWidth, "slotWidth"), store_get(slotWidth, "$slotWidth", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  let dayChunks = prop($$props, "dayChunks", 19, () => []), longChunks = prop($$props, "longChunks", 19, () => ({})), resource = prop($$props, "resource", 3, void 0);
  let { slotDuration, slotWidth } = getContext("state");
  let el = tag(state(void 0), "el");
  let margin = tag(state(proxy(helperEvent($$props.chunk.event.display) ? 1 : 0)), "margin");
  let event2 = tag(user_derived(() => $$props.chunk.event), "event");
  let width = tag(
    user_derived(() => "slots" in $$props.chunk ? $$props.chunk.slots * $slotWidth() : $$props.chunk.days * 100),
    "width"
  );
  let styles = tag(
    user_derived(() => (style) => {
      if ("slots" in $$props.chunk) {
        let left = $$props.chunk.offset * $slotWidth();
        style["left"] = `${left}px`;
        style["width"] = `${get(width)}px`;
      } else {
        style["width"] = `${get(width)}%`;
      }
      let marginTop = get(margin);
      if (get(event2)._margin) {
        let [_margin, _resource] = get(event2)._margin;
        if (strict_equals(resource(), _resource)) {
          marginTop = _margin;
        }
      }
      style["margin-top"] = `${marginTop}px`;
      return style;
    }),
    "styles"
  );
  function reposition() {
    if (!get(el)) {
      return 0;
    }
    let h = height(get(el));
    set(margin, repositionEvent2($$props.chunk, dayChunks(), longChunks(), h, !toSeconds($slotDuration())), true);
    return get(margin) + h;
  }
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => InteractableEvent_default(node_1, {
          get chunk() {
            return $$props.chunk;
          },
          get styles() {
            return get(styles);
          },
          axis: "x",
          forceMargin: () => [get(margin), resource()],
          get el() {
            return get(el);
          },
          set el($$value) {
            set(el, $$value, true);
          }
        }),
        "component",
        Event5,
        48,
        4,
        { componentTag: "InteractableEvent" }
      );
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(width) > 0) $$render(consequent);
      }),
      "if",
      Event5,
      47,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop({
    get reposition() {
      return reposition;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Event5 = hmr(Event5, () => Event5[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Event5[HMR].source;
    set(Event5[HMR].source, module.default[HMR].original);
  });
}
var Event_default5 = Event5;

// node_modules/@event-calendar/core/src/plugins/resource-timeline/Day.svelte
Day5[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/Day.svelte";
var root_114 = add_locations(from_html(`<!> <!> <!> <!>`, 1), Day5[FILENAME], []);
var root25 = add_locations(from_html(`<div role="cell"><div><!></div></div>`), Day5[FILENAME], [[58, 0, [[65, 4]]]]);
function Day5($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Day5);
  const [$$stores, $$cleanup] = setup_stores();
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $highlightedDates = () => (validate_store(highlightedDates, "highlightedDates"), store_get(highlightedDates, "$highlightedDates", $$stores));
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $_dayTimeLimits = () => (validate_store(_dayTimeLimits, "_dayTimeLimits"), store_get(_dayTimeLimits, "$_dayTimeLimits", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $slotWidth = () => (validate_store(slotWidth, "slotWidth"), store_get(slotWidth, "$slotWidth", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_interaction = () => (validate_store(_interaction, "_interaction"), store_get(_interaction, "$_interaction", $$stores));
  let iChunks = prop($$props, "iChunks", 19, () => []);
  let {
    highlightedDates,
    slotDuration,
    slotWidth,
    theme,
    validRange,
    _interaction,
    _today,
    _dayTimeLimits
  } = getContext("state");
  let el = tag(state(void 0), "el");
  let refs = [];
  let isToday = tag(user_derived(() => datesEqual($$props.date, $_today())), "isToday");
  let highlight = tag(user_derived(() => $highlightedDates().some((d) => datesEqual(d, $$props.date))), "highlight");
  let disabled = tag(user_derived(() => outsideRange($$props.date, $validRange())), "disabled");
  let slotTimeLimits2 = tag(user_derived(() => getSlotTimeLimits($_dayTimeLimits(), $$props.date)), "slotTimeLimits");
  let allDay = tag(user_derived(() => !toSeconds($slotDuration())), "allDay");
  let pointerIdx = tag(user_derived(() => get(allDay) ? 2 : 1), "pointerIdx");
  let dayChunks = tag(user_derived(() => $$props.chunks.filter(chunkIntersects)), "dayChunks");
  let dayBgChunks = tag(user_derived(() => $$props.bgChunks.filter((bgChunk) => (!get(allDay) || bgChunk.event.allDay) && chunkIntersects(bgChunk))), "dayBgChunks");
  function chunkIntersects(chunk) {
    return datesEqual(chunk.date, $$props.date);
  }
  function dateFromPoint(x, y) {
    x -= rect(get(el)).left;
    return {
      allDay: get(allDay),
      date: get(allDay) ? cloneDate($$props.date) : addDuration(addDuration(cloneDate($$props.date), get(slotTimeLimits2).min), $slotDuration(), floor(x / $slotWidth())),
      resource: $$props.resource,
      dayEl: get(el),
      disabled: get(disabled)
    };
  }
  user_effect(() => {
    setPayload(get(el), dateFromPoint);
  });
  function reposition() {
    return max(...runReposition(refs, get(dayChunks)));
  }
  var div = root25();
  div.__pointerdown = function(...$$args) {
    apply(() => {
      var _a;
      return (_a = $_interaction().action) == null ? void 0 : _a.select;
    }, this, $$args, Day5, [63, 19]);
  };
  var div_1 = child(div);
  var node = child(div_1);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment = root_114();
      var node_1 = first_child(fragment);
      validate_each_keys(() => get(dayBgChunks), (chunk) => chunk.event);
      add_svelte_meta(
        () => each(node_1, 17, () => get(dayBgChunks), (chunk) => chunk.event, ($$anchor3, chunk) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(
            () => Event_default5(node_2, {
              get chunk() {
                return get(chunk);
              }
            }),
            "component",
            Day5,
            68,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_1);
        }),
        "each",
        Day5,
        67,
        12
      );
      var node_3 = sibling(node_1, 2);
      {
        var consequent = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          add_svelte_meta(
            () => Event_default5(node_4, {
              get chunk() {
                return iChunks()[get(pointerIdx)];
              }
            }),
            "component",
            Day5,
            72,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (iChunks()[get(pointerIdx)] && chunkIntersects(iChunks()[get(pointerIdx)])) $$render(consequent);
          }),
          "if",
          Day5,
          71,
          12
        );
      }
      var node_5 = sibling(node_3, 2);
      validate_each_keys(() => get(dayChunks), (chunk) => chunk.event);
      add_svelte_meta(
        () => each(node_5, 19, () => get(dayChunks), (chunk) => chunk.event, ($$anchor3, chunk, i) => {
          var fragment_3 = comment();
          var node_6 = first_child(fragment_3);
          add_svelte_meta(
            () => bind_this(
              Event_default5(node_6, {
                get chunk() {
                  return get(chunk);
                },
                get dayChunks() {
                  return get(dayChunks);
                },
                get longChunks() {
                  return $$props.longChunks;
                },
                get resource() {
                  return $$props.resource;
                }
              }),
              ($$value, i2) => refs[i2] = $$value,
              (i2) => refs == null ? void 0 : refs[i2],
              () => [get(i)]
            ),
            "component",
            Day5,
            76,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_3);
        }),
        "each",
        Day5,
        74,
        12
      );
      var node_7 = sibling(node_5, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_4 = comment();
          var node_8 = first_child(fragment_4);
          add_svelte_meta(
            () => Event_default5(node_8, {
              get chunk() {
                return iChunks()[0];
              },
              get resource() {
                return $$props.resource;
              }
            }),
            "component",
            Day5,
            80,
            16,
            { componentTag: "Event" }
          );
          append($$anchor3, fragment_4);
        };
        add_svelte_meta(
          () => if_block(node_7, ($$render) => {
            if (iChunks()[0] && chunkIntersects(iChunks()[0])) $$render(consequent_1);
          }),
          "if",
          Day5,
          79,
          12
        );
      }
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!get(disabled)) $$render(consequent_2);
      }),
      "if",
      Day5,
      66,
      8
    );
  }
  reset(div_1);
  reset(div);
  bind_this(div, ($$value) => set(el, $$value), () => get(el));
  template_effect(
    ($0, $1) => {
      set_class(div, 1, `${$theme().day ?? ""} ${$0 ?? ""}${get(isToday) ? " " + $theme().today : ""}${get(highlight) ? " " + $theme().highlight : ""}${get(disabled) ? " " + $theme().disabled : ""}`);
      set_style(div, `flex-grow: ${$1 ?? ""}`);
      set_class(div_1, 1, $theme().events);
    },
    [
      () => {
        var _a;
        return (_a = $theme().weekdays) == null ? void 0 : _a[$$props.date.getUTCDay()];
      },
      () => get(allDay) ? null : ceil((toSeconds(get(slotTimeLimits2).max) - toSeconds(get(slotTimeLimits2).min)) / toSeconds($slotDuration()))
    ]
  );
  append($$anchor, div);
  var $$pop = pop({
    get reposition() {
      return reposition;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Day5 = hmr(Day5, () => Day5[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Day5[HMR].source;
    set(Day5[HMR].source, module.default[HMR].original);
  });
}
var Day_default5 = Day5;
delegate(["pointerdown"]);

// node_modules/@event-calendar/core/src/plugins/resource-timeline/Days.svelte
Days[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/Days.svelte";
var root26 = add_locations(from_html(`<div role="row"></div>`), Days[FILENAME], [[70, 0]]);
function Days($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Days);
  const [$$stores, $$cleanup] = setup_stores();
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $validRange = () => (validate_store(validRange, "validRange"), store_get(validRange, "$validRange", $$stores));
  const $_dayTimeLimits = () => (validate_store(_dayTimeLimits, "_dayTimeLimits"), store_get(_dayTimeLimits, "$_dayTimeLimits", $$stores));
  const $_filteredEvents = () => (validate_store(_filteredEvents, "_filteredEvents"), store_get(_filteredEvents, "$_filteredEvents", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $_iEvents = () => (validate_store(_iEvents, "_iEvents"), store_get(_iEvents, "$_iEvents", $$stores));
  const $_resHs = () => (validate_store(_resHs, "_resHs"), store_get(_resHs, "$_resHs", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  let {
    _viewDates,
    _filteredEvents,
    _iEvents,
    _resHs,
    _dayTimeLimits,
    slotDuration,
    theme,
    validRange
  } = getContext("state");
  let refs = [];
  let height2 = tag(state(0), "height");
  let $$d = tag(
    user_derived(() => {
      let start2 = cloneDate(limitToRange($_viewDates()[0], $validRange()));
      let end2 = cloneDate(limitToRange($_viewDates().at(-1), $validRange()));
      let slotTimeLimits2 = getSlotTimeLimits($_dayTimeLimits(), start2);
      addDuration(start2, slotTimeLimits2.min);
      slotTimeLimits2 = getSlotTimeLimits($_dayTimeLimits(), end2);
      if (slotTimeLimits2.max.seconds > DAY_IN_SECONDS) {
        addDuration(end2, slotTimeLimits2.max);
      } else {
        addDay(end2);
      }
      return [start2, end2];
    }),
    "[$derived iterable]"
  ), $$array = tag(user_derived(() => to_array(get($$d), 2)), "[$derived iterable]"), start = tag(user_derived(() => get($$array)[0]), "start"), end = tag(user_derived(() => get($$array)[1]), "end");
  let $$d_1 = tag(
    user_derived(() => {
      let chunks2 = [];
      let bgChunks2 = [];
      let longChunks2;
      for (let event2 of $_filteredEvents()) {
        if (eventIntersects(event2, get(start), get(end), $$props.resource)) {
          let chunk = createEventChunk(event2, get(start), get(end));
          if (bgEvent(event2.display)) {
            bgChunks2.push(chunk);
          } else {
            chunks2.push(chunk);
          }
        }
      }
      [bgChunks2] = prepareEventChunks2(bgChunks2, $_viewDates(), $_dayTimeLimits(), $slotDuration());
      [chunks2, longChunks2] = prepareEventChunks2(chunks2, $_viewDates(), $_dayTimeLimits(), $slotDuration());
      return [chunks2, bgChunks2, longChunks2];
    }),
    "[$derived iterable]"
  ), $$array_3 = tag(user_derived(() => to_array(get($$d_1), 3)), "[$derived iterable]"), chunks = tag(user_derived(() => get($$array_3)[0]), "chunks"), bgChunks = tag(user_derived(() => get($$array_3)[1]), "bgChunks"), longChunks = tag(user_derived(() => get($$array_3)[2]), "longChunks");
  let iChunks = tag(
    user_derived(() => $_iEvents().map((event2) => {
      let chunk;
      if (event2 && eventIntersects(event2, get(start), get(end), $$props.resource)) {
        chunk = createEventChunk(event2, get(start), get(end));
        [[chunk]] = prepareEventChunks2([chunk], $_viewDates(), $_dayTimeLimits(), $slotDuration());
      } else {
        chunk = null;
      }
      return chunk;
    })),
    "iChunks"
  );
  function reposition() {
    set(height2, ceil(max(...runReposition(refs, $_viewDates()))) + 10);
    $_resHs().set($$props.resource, get(height2));
    store_set(_resHs, $_resHs());
  }
  var div = root26();
  add_svelte_meta(
    () => each(div, 5, $_viewDates, index, ($$anchor2, date, i) => {
      var fragment = comment();
      var node = first_child(fragment);
      add_svelte_meta(
        () => bind_this(
          Day_default5(node, {
            get date() {
              return get(date);
            },
            get resource() {
              return $$props.resource;
            },
            get chunks() {
              return get(chunks);
            },
            get bgChunks() {
              return get(bgChunks);
            },
            get longChunks() {
              return get(longChunks);
            },
            get iChunks() {
              return get(iChunks);
            }
          }),
          ($$value, i2) => refs[i2] = $$value,
          (i2) => refs == null ? void 0 : refs[i2],
          () => [i]
        ),
        "component",
        Days,
        73,
        8,
        { componentTag: "Day" }
      );
      append($$anchor2, fragment);
    }),
    "each",
    Days,
    71,
    4
  );
  reset(div);
  template_effect(
    ($0) => {
      set_class(div, 1, $theme().days);
      set_style(div, `flex-basis: ${$0 ?? ""}px`);
    },
    [() => max(get(height2), 34)]
  );
  append($$anchor, div);
  var $$pop = pop({
    get reposition() {
      return reposition;
    },
    ...legacy_api()
  });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Days = hmr(Days, () => Days[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Days[HMR].source;
    set(Days[HMR].source, module.default[HMR].original);
  });
}
var Days_default = Days;

// node_modules/@event-calendar/core/src/plugins/resource-timeline/Body.svelte
Body4[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/Body.svelte";
var root_28 = add_locations(from_html(`<div></div>`), Body4[FILENAME], [[56, 20]]);
var root27 = add_locations(from_html(`<div><div><div></div> <!></div></div>`), Body4[FILENAME], [[46, 0, [[52, 4, [[53, 8]]]]]]);
function Body4($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Body4);
  const [$$stores, $$cleanup] = setup_stores();
  const $_dayTimeLimits = () => (validate_store(_dayTimeLimits, "_dayTimeLimits"), store_get(_dayTimeLimits, "$_dayTimeLimits", $$stores));
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $_bodyEl = () => (validate_store(_bodyEl, "_bodyEl"), store_get(_bodyEl, "$_bodyEl", $$stores));
  const $scrollTime = () => (validate_store(scrollTime, "scrollTime"), store_get(scrollTime, "$scrollTime", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $slotWidth = () => (validate_store(slotWidth, "slotWidth"), store_get(slotWidth, "$slotWidth", $$stores));
  const $_bodyScrollLeft = () => (validate_store(_bodyScrollLeft, "_bodyScrollLeft"), store_get(_bodyScrollLeft, "$_bodyScrollLeft", $$stores));
  const $_resHs = () => (validate_store(_resHs, "_resHs"), store_get(_resHs, "$_resHs", $$stores));
  const $_viewResources = () => (validate_store(_viewResources, "_viewResources"), store_get(_viewResources, "$_viewResources", $$stores));
  const $_filteredEvents = () => (validate_store(_filteredEvents, "_filteredEvents"), store_get(_filteredEvents, "$_filteredEvents", $$stores));
  const $_headerEl = () => (validate_store(_headerEl, "_headerEl"), store_get(_headerEl, "$_headerEl", $$stores));
  const $_sidebarEl = () => (validate_store(_sidebarEl, "_sidebarEl"), store_get(_sidebarEl, "$_sidebarEl", $$stores));
  const $_bodyHeight = () => (validate_store(_bodyHeight, "_bodyHeight"), store_get(_bodyHeight, "$_bodyHeight", $$stores));
  const $_bodyWidth = () => (validate_store(_bodyWidth, "_bodyWidth"), store_get(_bodyWidth, "$_bodyWidth", $$stores));
  const $_recheckScrollable = () => (validate_store(_recheckScrollable, "_recheckScrollable"), store_get(_recheckScrollable, "$_recheckScrollable", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_dayTimes = () => (validate_store(_dayTimes, "_dayTimes"), store_get(_dayTimes, "$_dayTimes", $$stores));
  let {
    _bodyEl,
    _bodyHeight,
    _bodyWidth,
    _bodyScrollLeft,
    _headerEl,
    _filteredEvents,
    _sidebarEl,
    _dayTimes,
    _dayTimeLimits,
    _recheckScrollable,
    _resHs,
    _viewResources,
    _viewDates,
    scrollTime,
    slotDuration,
    slotWidth,
    theme
  } = getContext("state");
  let refs = [];
  function scrollToTime() {
    let slotTimeLimits2 = getSlotTimeLimits($_dayTimeLimits(), $_viewDates()[0]);
    store_mutate(_bodyEl, untrack($_bodyEl).scrollLeft = (toSeconds($scrollTime()) - toSeconds(slotTimeLimits2.min)) / toSeconds($slotDuration()) * $slotWidth(), untrack($_bodyEl));
    store_set(_bodyScrollLeft, $_bodyEl().scrollLeft);
  }
  user_effect(() => {
    $_viewDates();
    $scrollTime();
    untrack(scrollToTime);
  });
  function reposition() {
    $_resHs().clear();
    runReposition(refs, $_viewResources());
  }
  user_effect(() => {
    $_filteredEvents();
    $_viewResources();
    untrack(reposition);
  });
  function onscroll() {
    store_mutate(_headerEl, untrack($_headerEl).scrollLeft = $_bodyEl().scrollLeft, untrack($_headerEl));
    store_mutate(_sidebarEl, untrack($_sidebarEl).scrollTop = $_bodyEl().scrollTop, untrack($_sidebarEl));
    store_set(_bodyScrollLeft, $_bodyEl().scrollLeft);
  }
  function onresize() {
    store_set(_bodyHeight, $_bodyEl().clientHeight);
    store_set(_bodyWidth, $_bodyEl().clientWidth);
    store_set(_recheckScrollable, true);
  }
  var div = root27();
  event("resize", $window, reposition);
  var div_1 = child(div);
  var div_2 = child(div_1);
  add_svelte_meta(
    () => each(div_2, 5, $_viewDates, index, ($$anchor2, date) => {
      var fragment = comment();
      var node = first_child(fragment);
      add_svelte_meta(
        () => each(node, 1, () => $_dayTimes()[get(date).getTime()], index, ($$anchor3, time) => {
          var div_3 = root_28();
          template_effect(() => set_class(div_3, 1, `${$theme().line ?? ""}${get(time)[2] ? "" : " " + $theme().minor}`));
          append($$anchor3, div_3);
        }),
        "each",
        Body4,
        55,
        16
      );
      append($$anchor2, fragment);
    }),
    "each",
    Body4,
    54,
    12
  );
  reset(div_2);
  var node_1 = sibling(div_2, 2);
  add_svelte_meta(
    () => each(node_1, 1, $_viewResources, index, ($$anchor2, resource, i) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      add_svelte_meta(
        () => bind_this(
          Days_default(node_2, {
            get resource() {
              return get(resource);
            }
          }),
          ($$value, i2) => refs[i2] = $$value,
          (i2) => refs == null ? void 0 : refs[i2],
          () => [i]
        ),
        "component",
        Body4,
        62,
        12,
        { componentTag: "Days" }
      );
      append($$anchor2, fragment_1);
    }),
    "each",
    Body4,
    60,
    8
  );
  reset(div_1);
  reset(div);
  bind_this(div, ($$value) => store_set(_bodyEl, $$value), () => $_bodyEl());
  action(div, ($$node, $$action_arg) => {
    var _a;
    return (_a = observeResize) == null ? void 0 : _a($$node, $$action_arg);
  }, () => onresize);
  template_effect(() => {
    set_class(div, 1, $theme().body);
    set_class(div_1, 1, $theme().content);
    set_class(div_2, 1, $theme().lines);
  });
  event("scroll", div, onscroll);
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Body4 = hmr(Body4, () => Body4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Body4[HMR].source;
    set(Body4[HMR].source, module.default[HMR].original);
  });
}
var Body_default4 = Body4;

// node_modules/@event-calendar/core/src/plugins/resource-timeline/NowIndicator.svelte
NowIndicator2[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/NowIndicator.svelte";
var root_115 = add_locations(from_html(`<div></div>`), NowIndicator2[FILENAME], [[33, 4]]);
function NowIndicator2($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NowIndicator2);
  const [$$stores, $$cleanup] = setup_stores();
  const $_viewDates = () => (validate_store(_viewDates, "_viewDates"), store_get(_viewDates, "$_viewDates", $$stores));
  const $_dayTimeLimits = () => (validate_store(_dayTimeLimits, "_dayTimeLimits"), store_get(_dayTimeLimits, "$_dayTimeLimits", $$stores));
  const $_today = () => (validate_store(_today, "_today"), store_get(_today, "$_today", $$stores));
  const $_now = () => (validate_store(_now, "_now"), store_get(_now, "$_now", $$stores));
  const $slotDuration = () => (validate_store(slotDuration, "slotDuration"), store_get(slotDuration, "$slotDuration", $$stores));
  const $slotWidth = () => (validate_store(slotWidth, "slotWidth"), store_get(slotWidth, "$slotWidth", $$stores));
  const $_bodyScrollLeft = () => (validate_store(_bodyScrollLeft, "_bodyScrollLeft"), store_get(_bodyScrollLeft, "$_bodyScrollLeft", $$stores));
  const $_bodyWidth = () => (validate_store(_bodyWidth, "_bodyWidth"), store_get(_bodyWidth, "$_bodyWidth", $$stores));
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $_headerHeight = () => (validate_store(_headerHeight, "_headerHeight"), store_get(_headerHeight, "$_headerHeight", $$stores));
  const $_bodyHeight = () => (validate_store(_bodyHeight, "_bodyHeight"), store_get(_bodyHeight, "$_bodyHeight", $$stores));
  let {
    slotDuration,
    slotWidth,
    theme,
    _bodyHeight,
    _bodyWidth,
    _bodyScrollLeft,
    _headerHeight,
    _dayTimeLimits,
    _now,
    _today,
    _viewDates
  } = getContext("state");
  let left = tag(
    user_derived(() => {
      let offset = 0;
      for (let i = 0; i < $_viewDates().length; ++i) {
        let slotTimeLimits2 = getSlotTimeLimits($_dayTimeLimits(), $_viewDates()[i]);
        if (datesEqual($_viewDates()[i], $_today())) {
          let dayStart = addDuration(cloneDate($_viewDates()[i]), slotTimeLimits2.min);
          let dayEnd = addDuration(cloneDate($_viewDates()[i]), slotTimeLimits2.max);
          if ($_now() >= dayStart && $_now() <= dayEnd) {
            offset += ($_now() - dayStart) / 1e3;
            break;
          } else {
            return null;
          }
        } else {
          offset += slotTimeLimits2.max.seconds - slotTimeLimits2.min.seconds;
        }
      }
      let step = $slotDuration().seconds;
      return offset / step * $slotWidth() - $_bodyScrollLeft();
    }),
    "left"
  );
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_115();
      let styles;
      template_effect(
        ($0) => {
          set_class(div, 1, $theme().nowIndicator);
          styles = set_style(div, "", styles, $0);
        },
        [
          () => ({
            top: `${$_headerHeight() + 2}px`,
            left: `${get(left) ?? ""}px`,
            height: `${$_bodyHeight() - 1}px`
          })
        ]
      );
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(get(left), null, false) && get(left) >= 3 && get(left) <= $_bodyWidth() - 3) $$render(consequent);
      }),
      "if",
      NowIndicator2,
      32,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  NowIndicator2 = hmr(NowIndicator2, () => NowIndicator2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NowIndicator2[HMR].source;
    set(NowIndicator2[HMR].source, module.default[HMR].original);
  });
}
var NowIndicator_default2 = NowIndicator2;

// node_modules/@event-calendar/core/src/plugins/resource-timeline/View.svelte
View5[FILENAME] = "node_modules/@event-calendar/core/src/plugins/resource-timeline/View.svelte";
var root28 = add_locations(from_html(`<div><!> <div><!> <!> <!></div></div>`), View5[FILENAME], [[11, 0, [[13, 4]]]]);
function View5($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, View5);
  const [$$stores, $$cleanup] = setup_stores();
  const $theme = () => (validate_store(theme, "theme"), store_get(theme, "$theme", $$stores));
  const $nowIndicator = () => (validate_store(nowIndicator, "nowIndicator"), store_get(nowIndicator, "$nowIndicator", $$stores));
  let { nowIndicator, theme } = getContext("state");
  init();
  var div = root28();
  var node = child(div);
  add_svelte_meta(() => Sidebar_default(node, {}), "component", View5, 12, 4, { componentTag: "Sidebar" });
  var div_1 = sibling(node, 2);
  var node_1 = child(div_1);
  add_svelte_meta(() => Header_default2(node_1, {}), "component", View5, 14, 8, { componentTag: "Header" });
  var node_2 = sibling(node_1, 2);
  add_svelte_meta(() => Body_default4(node_2, {}), "component", View5, 15, 8, { componentTag: "Body" });
  var node_3 = sibling(node_2, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_4 = first_child(fragment);
      add_svelte_meta(() => NowIndicator_default2(node_4, {}), "component", View5, 17, 12, { componentTag: "NowIndicator" });
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if ($nowIndicator()) $$render(consequent);
      }),
      "if",
      View5,
      16,
      8
    );
  }
  reset(div_1);
  reset(div);
  template_effect(() => {
    set_class(div, 1, $theme().container);
    set_class(div_1, 1, $theme().main);
  });
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  View5 = hmr(View5, () => View5[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = View5[HMR].source;
    set(View5[HMR].source, module.default[HMR].original);
  });
}
var View_default5 = View5;

// node_modules/@event-calendar/core/src/plugins/resource-timeline/index.js
var resource_timeline_default = {
  createOptions(options) {
    options.buttonText.resourceTimelineDay = "timeline";
    options.buttonText.resourceTimelineWeek = "timeline";
    options.buttonText.resourceTimelineMonth = "timeline";
    options.theme.expander = "ec-expander";
    options.theme.main = "ec-main";
    options.theme.times = "ec-times";
    options.theme.container = "ec-container";
    options.view = "resourceTimelineWeek";
    options.views.resourceTimelineDay = {
      buttonText: btnTextDay,
      component: View_default5,
      displayEventEnd: false,
      dayHeaderFormat: { weekday: "long" },
      duration: { days: 1 },
      slotDuration: "01:00",
      theme: themeView("ec-timeline ec-resource-day-view"),
      titleFormat: { year: "numeric", month: "long", day: "numeric" }
    };
    options.views.resourceTimelineWeek = {
      buttonText: btnTextWeek,
      component: View_default5,
      displayEventEnd: false,
      duration: { weeks: 1 },
      slotDuration: "01:00",
      theme: themeView("ec-timeline ec-resource-week-view")
    };
    options.views.resourceTimelineMonth = {
      buttonText: btnTextMonth,
      component: View_default5,
      displayEventEnd: false,
      dayHeaderFormat: {
        weekday: "short",
        day: "numeric"
      },
      duration: { months: 1 },
      slotDuration: { days: 1 },
      theme: themeView("ec-timeline ec-resource-month-view"),
      titleFormat: { year: "numeric", month: "long" }
    };
  },
  createStores(state2) {
    if (!("_viewResources" in state2)) {
      state2._viewResources = viewResources(state2);
    }
    state2._bodyHeight = writable(0);
    state2._bodyWidth = writable(0);
    state2._bodyScrollLeft = writable(0);
    state2._headerEl = writable(void 0);
    state2._headerHeight = writable(0);
    state2._dayTimeLimits = dayTimeLimits(state2);
    state2._dayTimes = dayTimes(state2);
    state2._nestedResources = nestedResources(state2);
    state2._resHs = writable(/* @__PURE__ */ new Map());
    state2._sidebarEl = writable(void 0);
  }
};
export {
  Calendar_default as Calendar,
  day_grid_default as DayGrid,
  interaction_default as Interaction,
  list_default as List,
  resource_time_grid_default as ResourceTimeGrid,
  resource_timeline_default as ResourceTimeline,
  time_grid_default as TimeGrid
};
//# sourceMappingURL=@event-calendar_core.js.map
